# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.tag_name_and_id_input import TagNameAndIdInput


class TspublicRestV2ConnectionSearchRequest(object):

    """Implementation of the 'Tspublic Rest V2 Connection Search Request' model.

    TODO: type model description here.

    Attributes:
        offset (int): The offset point, starting from where the records should
            be included in the response. If no input is provided then offset
            starts from 0
        batch_number (int): An alternate way to set offset for the starting
            point of the response. Offset field should be kept blank to use
            the value from this field. Offset value will be calculated as
            (batchNumber - 1) * batchSize. It is mandatory to provide a value
            for batchSize with batchNumber. Example: Assume response has 100
            records. Now,  batchNumber is set as 2 and batchSize as 10, then
            offset value will be 10. So, 10 records starting from 11th record
            will be considered.
        batch_size (int): The number of records that should be included in the
            response starting from offset position. If no input is provided,
            then all records starting from the value provided in offset is
            included in the response.
        sort_by (SortBy1Enum): Field based on which the re.sponse needs to be
            ordered. Valid values
        sort_order (SortOrder1Enum): Order in which sortBy should be applied.
            Valid values
        mtype (Type15Enum): Type of the connect being searched. Valid values:
            SNOWFLAKE|AMAZON_REDSHIFT|GOOGLE_BIGQUERY|AZURE_SYNAPSE|TERADATA|ST
            ARBURST|SAP_HANA|ORACLE_ADW|DATABRICKS|DENODO
        name_pattern (string): A pattern to match the name of the connection.
            This parameter supports matching case-insensitive strings. For a
            wildcard match, use %.
        fetch_id (list of string): A JSON array containing the GUIDs of the
            connections that you want to fetch.
        skip_id (list of string): A JSON array containing the GUIDs of the
            connections that you want to skip.
        tag (list of TagNameAndIdInput): A JSON array of name or GUID of tags
            or both. When both are given then id is considered

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "offset": 'offset',
        "batch_number": 'batchNumber',
        "batch_size": 'batchSize',
        "sort_by": 'sortBy',
        "sort_order": 'sortOrder',
        "name_pattern": 'namePattern',
        "fetch_id": 'fetchId',
        "skip_id": 'skipId',
        "tag": 'tag'
    }

    _optionals = [
        'offset',
        'batch_number',
        'batch_size',
        'sort_by',
        'sort_order',
        'name_pattern',
        'fetch_id',
        'skip_id',
        'tag',
    ]

    def __init__(self,
                 mtype=None,
                 offset=0,
                 batch_number=-1,
                 batch_size=-1,
                 sort_by='DEFAULT',
                 sort_order=APIHelper.SKIP,
                 name_pattern=APIHelper.SKIP,
                 fetch_id=APIHelper.SKIP,
                 skip_id=APIHelper.SKIP,
                 tag=APIHelper.SKIP):
        """Constructor for the TspublicRestV2ConnectionSearchRequest class"""

        # Initialize members of the class
        self.offset = offset 
        self.batch_number = batch_number 
        self.batch_size = batch_size 
        self.sort_by = sort_by 
        if sort_order is not APIHelper.SKIP:
            self.sort_order = sort_order 
        self.mtype = mtype 
        if name_pattern is not APIHelper.SKIP:
            self.name_pattern = name_pattern 
        if fetch_id is not APIHelper.SKIP:
            self.fetch_id = fetch_id 
        if skip_id is not APIHelper.SKIP:
            self.skip_id = skip_id 
        if tag is not APIHelper.SKIP:
            self.tag = tag 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mtype = dictionary.get("type") if dictionary.get("type") else None
        offset = dictionary.get("offset") if dictionary.get("offset") else 0
        batch_number = dictionary.get("batchNumber") if dictionary.get("batchNumber") else -1
        batch_size = dictionary.get("batchSize") if dictionary.get("batchSize") else -1
        sort_by = dictionary.get("sortBy") if dictionary.get("sortBy") else 'DEFAULT'
        sort_order = dictionary.get("sortOrder") if dictionary.get("sortOrder") else APIHelper.SKIP
        name_pattern = dictionary.get("namePattern") if dictionary.get("namePattern") else APIHelper.SKIP
        fetch_id = dictionary.get("fetchId") if dictionary.get("fetchId") else APIHelper.SKIP
        skip_id = dictionary.get("skipId") if dictionary.get("skipId") else APIHelper.SKIP
        tag = None
        if dictionary.get('tag') is not None:
            tag = [TagNameAndIdInput.from_dictionary(x) for x in dictionary.get('tag')]
        else:
            tag = APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   offset,
                   batch_number,
                   batch_size,
                   sort_by,
                   sort_order,
                   name_pattern,
                   fetch_id,
                   skip_id,
                   tag)
