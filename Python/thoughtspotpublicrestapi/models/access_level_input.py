# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper


class AccessLevelInput(object):

    """Implementation of the 'AccessLevelInput' model.

    TODO: type model description here.

    Attributes:
        name (string): Username or name of the user group
        id (string): GUID of the user or user group
        mtype (Type1Enum): Type of access detail provided
        access (AccessEnum): Minimum access level that the specified user or
            user group has. If no input is provided then minimum access of
            READ_ONLY will be considered.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "id": 'id',
        "mtype": 'type',
        "access": 'access'
    }

    _optionals = [
        'name',
        'id',
        'mtype',
        'access',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 access=APIHelper.SKIP):
        """Constructor for the AccessLevelInput class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if id is not APIHelper.SKIP:
            self.id = id 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if access is not APIHelper.SKIP:
            self.access = access 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        access = dictionary.get("access") if dictionary.get("access") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   id,
                   mtype,
                   access)
