# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.connection_database_type import ConnectionDatabaseType


class ConnectionTableResponse(object):

    """Implementation of the 'ConnectionTableResponse' model.

    TODO: type model description here.

    Attributes:
        id (string): Connection id
        database (list of ConnectionDatabaseType): List of databases

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "database": 'database'
    }

    _optionals = [
        'id',
        'database',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 database=APIHelper.SKIP):
        """Constructor for the ConnectionTableResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if database is not APIHelper.SKIP:
            self.database = database 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        database = None
        if dictionary.get('database') is not None:
            database = [ConnectionDatabaseType.from_dictionary(x) for x in dictionary.get('database')]
        else:
            database = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   database)
