# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.user_name_and_id import UserNameAndID


class TableList(object):

    """Implementation of the 'tableList' model.

    TODO: type model description here.

    Attributes:
        name (string): Name of the table
        mtype (string): Type of the table
        id (string): GUID of the table
        database_stripe (string): Name of the database to which the table
            belongs
        schema_stripe (string): Name of the schema to which the table belongs
        is_external (bool): TODO: type description here.
        is_deprecated (bool): Indicates if the table is deprecated
        is_deleted (bool): Indicates if the table is deleted
        is_hidden (bool): Indicates if the table is hideen
        index_version (float): TODO: type description here.
        generation_num (float): TODO: type description here.
        created (string): Date and time when the table was created
        modified (string): Date and time of last modification of the table
        author (UserNameAndID): TODO: type description here.
        modified_by (UserNameAndID): TODO: type description here.
        owner (UserNameAndID): TODO: type description here.
        tags (list of string): List of tags assigned to the table

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "id": 'id',
        "database_stripe": 'databaseStripe',
        "schema_stripe": 'schemaStripe',
        "is_external": 'isExternal',
        "is_deprecated": 'isDeprecated',
        "is_deleted": 'isDeleted',
        "is_hidden": 'isHidden',
        "index_version": 'indexVersion',
        "generation_num": 'generationNum',
        "created": 'created',
        "modified": 'modified',
        "author": 'author',
        "modified_by": 'modifiedBy',
        "owner": 'owner',
        "tags": 'tags'
    }

    _optionals = [
        'name',
        'mtype',
        'id',
        'database_stripe',
        'schema_stripe',
        'is_external',
        'is_deprecated',
        'is_deleted',
        'is_hidden',
        'index_version',
        'generation_num',
        'created',
        'modified',
        'author',
        'modified_by',
        'owner',
        'tags',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 database_stripe=APIHelper.SKIP,
                 schema_stripe=APIHelper.SKIP,
                 is_external=APIHelper.SKIP,
                 is_deprecated=APIHelper.SKIP,
                 is_deleted=APIHelper.SKIP,
                 is_hidden=APIHelper.SKIP,
                 index_version=APIHelper.SKIP,
                 generation_num=APIHelper.SKIP,
                 created=APIHelper.SKIP,
                 modified=APIHelper.SKIP,
                 author=APIHelper.SKIP,
                 modified_by=APIHelper.SKIP,
                 owner=APIHelper.SKIP,
                 tags=APIHelper.SKIP):
        """Constructor for the TableList class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if id is not APIHelper.SKIP:
            self.id = id 
        if database_stripe is not APIHelper.SKIP:
            self.database_stripe = database_stripe 
        if schema_stripe is not APIHelper.SKIP:
            self.schema_stripe = schema_stripe 
        if is_external is not APIHelper.SKIP:
            self.is_external = is_external 
        if is_deprecated is not APIHelper.SKIP:
            self.is_deprecated = is_deprecated 
        if is_deleted is not APIHelper.SKIP:
            self.is_deleted = is_deleted 
        if is_hidden is not APIHelper.SKIP:
            self.is_hidden = is_hidden 
        if index_version is not APIHelper.SKIP:
            self.index_version = index_version 
        if generation_num is not APIHelper.SKIP:
            self.generation_num = generation_num 
        if created is not APIHelper.SKIP:
            self.created = created 
        if modified is not APIHelper.SKIP:
            self.modified = modified 
        if author is not APIHelper.SKIP:
            self.author = author 
        if modified_by is not APIHelper.SKIP:
            self.modified_by = modified_by 
        if owner is not APIHelper.SKIP:
            self.owner = owner 
        if tags is not APIHelper.SKIP:
            self.tags = tags 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        database_stripe = dictionary.get("databaseStripe") if dictionary.get("databaseStripe") else APIHelper.SKIP
        schema_stripe = dictionary.get("schemaStripe") if dictionary.get("schemaStripe") else APIHelper.SKIP
        is_external = dictionary.get("isExternal") if "isExternal" in dictionary.keys() else APIHelper.SKIP
        is_deprecated = dictionary.get("isDeprecated") if "isDeprecated" in dictionary.keys() else APIHelper.SKIP
        is_deleted = dictionary.get("isDeleted") if "isDeleted" in dictionary.keys() else APIHelper.SKIP
        is_hidden = dictionary.get("isHidden") if "isHidden" in dictionary.keys() else APIHelper.SKIP
        index_version = dictionary.get("indexVersion") if dictionary.get("indexVersion") else APIHelper.SKIP
        generation_num = dictionary.get("generationNum") if dictionary.get("generationNum") else APIHelper.SKIP
        created = dictionary.get("created") if dictionary.get("created") else APIHelper.SKIP
        modified = dictionary.get("modified") if dictionary.get("modified") else APIHelper.SKIP
        author = UserNameAndID.from_dictionary(dictionary.get('author')) if 'author' in dictionary.keys() else APIHelper.SKIP 
        modified_by = UserNameAndID.from_dictionary(dictionary.get('modifiedBy')) if 'modifiedBy' in dictionary.keys() else APIHelper.SKIP 
        owner = UserNameAndID.from_dictionary(dictionary.get('owner')) if 'owner' in dictionary.keys() else APIHelper.SKIP 
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   mtype,
                   id,
                   database_stripe,
                   schema_stripe,
                   is_external,
                   is_deprecated,
                   is_deleted,
                   is_hidden,
                   index_version,
                   generation_num,
                   created,
                   modified,
                   author,
                   modified_by,
                   owner,
                   tags)
