# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.connection_columns_shema import ConnectionColumnsShema


class ConnectionTableColumnsResponse(object):

    """Implementation of the 'ConnectionTableColumnsResponse' model.

    TODO: type model description here.

    Attributes:
        id (string): Connection id
        table (list of ConnectionColumnsShema): List of table details

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "table": 'table'
    }

    _optionals = [
        'id',
        'table',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 table=APIHelper.SKIP):
        """Constructor for the ConnectionTableColumnsResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if table is not APIHelper.SKIP:
            self.table = table 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        table = None
        if dictionary.get('table') is not None:
            table = [ConnectionColumnsShema.from_dictionary(x) for x in dictionary.get('table')]
        else:
            table = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   table)
