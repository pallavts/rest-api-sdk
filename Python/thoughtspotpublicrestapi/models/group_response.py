# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.group_name_and_id import GroupNameAndID
from thoughtspotpublicrestapi.models.liveboard_name_and_id import LiveboardNameAndID
from thoughtspotpublicrestapi.models.org_type import OrgType
from thoughtspotpublicrestapi.models.user_name_and_id import UserNameAndID


class GroupResponse(object):

    """Implementation of the 'GroupResponse' model.

    TODO: type model description here.

    Attributes:
        name (string): Name of the group
        display_name (string): A unique display name string for the user
            group
        id (string): GUID of the group
        visibility (string): Visibility of the group
        description (string): Description of the group
        privileges (list of string): Privileges assigned to the group
        orgs (list of OrgType): The organizations that user belongs to
        groups (list of GroupNameAndID): Name of the group to which is added
        users (list of UserNameAndID): User Group Information by Id or Name.
        assigned_liveboards (list of LiveboardNameAndID): Liveboards assigned
            to the group
        user_group_content (object): TODO: type description here.
        tags (list of string): Tags assigned to the group
        is_deleted (bool): Indicates if the group is deleted
        is_hidden (bool): Indicates if the group is hidden
        is_external (bool): Indicates if the group is from external system
        is_deprecated (bool): TODO: type description here.
        complete (bool): Indicates if the all the properties of group is
            provided
        is_system_principal (bool): Indicates if the group is system
            principal
        mtype (string): Indicates the type of group
        parenttype (string): Indicates the type of parent object
        group_idx (int): TODO: type description here.
        metadata_version (int): TODO: type description here.
        tenant_id (string): Tenant id associated with the group
        index_version (float): TODO: type description here.
        generation_num (float): TODO: type description here.
        created (float): Date and time when group was created
        modified (float): Date and time of last modification of the group
        author (UserNameAndID): TODO: type description here.
        modified_by (UserNameAndID): TODO: type description here.
        owner (UserNameAndID): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "display_name": 'displayName',
        "id": 'id',
        "visibility": 'visibility',
        "description": 'description',
        "privileges": 'privileges',
        "orgs": 'orgs',
        "groups": 'groups',
        "users": 'users',
        "assigned_liveboards": 'assignedLiveboards',
        "user_group_content": 'userGroupContent',
        "tags": 'tags',
        "is_deleted": 'isDeleted',
        "is_hidden": 'isHidden',
        "is_external": 'isExternal',
        "is_deprecated": 'isDeprecated',
        "complete": 'complete',
        "is_system_principal": 'isSystemPrincipal',
        "mtype": 'type',
        "parenttype": 'parenttype',
        "group_idx": 'groupIdx',
        "metadata_version": 'metadataVersion',
        "tenant_id": 'tenantId',
        "index_version": 'indexVersion',
        "generation_num": 'generationNum',
        "created": 'created',
        "modified": 'modified',
        "author": 'author',
        "modified_by": 'modifiedBy',
        "owner": 'owner'
    }

    _optionals = [
        'name',
        'display_name',
        'id',
        'visibility',
        'description',
        'privileges',
        'orgs',
        'groups',
        'users',
        'assigned_liveboards',
        'user_group_content',
        'tags',
        'is_deleted',
        'is_hidden',
        'is_external',
        'is_deprecated',
        'complete',
        'is_system_principal',
        'mtype',
        'parenttype',
        'group_idx',
        'metadata_version',
        'tenant_id',
        'index_version',
        'generation_num',
        'created',
        'modified',
        'author',
        'modified_by',
        'owner',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 display_name=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 visibility=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 privileges=APIHelper.SKIP,
                 orgs=APIHelper.SKIP,
                 groups=APIHelper.SKIP,
                 users=APIHelper.SKIP,
                 assigned_liveboards=APIHelper.SKIP,
                 user_group_content=APIHelper.SKIP,
                 tags=APIHelper.SKIP,
                 is_deleted=APIHelper.SKIP,
                 is_hidden=APIHelper.SKIP,
                 is_external=APIHelper.SKIP,
                 is_deprecated=APIHelper.SKIP,
                 complete=APIHelper.SKIP,
                 is_system_principal=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 parenttype=APIHelper.SKIP,
                 group_idx=APIHelper.SKIP,
                 metadata_version=APIHelper.SKIP,
                 tenant_id=APIHelper.SKIP,
                 index_version=APIHelper.SKIP,
                 generation_num=APIHelper.SKIP,
                 created=APIHelper.SKIP,
                 modified=APIHelper.SKIP,
                 author=APIHelper.SKIP,
                 modified_by=APIHelper.SKIP,
                 owner=APIHelper.SKIP):
        """Constructor for the GroupResponse class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if display_name is not APIHelper.SKIP:
            self.display_name = display_name 
        if id is not APIHelper.SKIP:
            self.id = id 
        if visibility is not APIHelper.SKIP:
            self.visibility = visibility 
        if description is not APIHelper.SKIP:
            self.description = description 
        if privileges is not APIHelper.SKIP:
            self.privileges = privileges 
        if orgs is not APIHelper.SKIP:
            self.orgs = orgs 
        if groups is not APIHelper.SKIP:
            self.groups = groups 
        if users is not APIHelper.SKIP:
            self.users = users 
        if assigned_liveboards is not APIHelper.SKIP:
            self.assigned_liveboards = assigned_liveboards 
        if user_group_content is not APIHelper.SKIP:
            self.user_group_content = user_group_content 
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        if is_deleted is not APIHelper.SKIP:
            self.is_deleted = is_deleted 
        if is_hidden is not APIHelper.SKIP:
            self.is_hidden = is_hidden 
        if is_external is not APIHelper.SKIP:
            self.is_external = is_external 
        if is_deprecated is not APIHelper.SKIP:
            self.is_deprecated = is_deprecated 
        if complete is not APIHelper.SKIP:
            self.complete = complete 
        if is_system_principal is not APIHelper.SKIP:
            self.is_system_principal = is_system_principal 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if parenttype is not APIHelper.SKIP:
            self.parenttype = parenttype 
        if group_idx is not APIHelper.SKIP:
            self.group_idx = group_idx 
        if metadata_version is not APIHelper.SKIP:
            self.metadata_version = metadata_version 
        if tenant_id is not APIHelper.SKIP:
            self.tenant_id = tenant_id 
        if index_version is not APIHelper.SKIP:
            self.index_version = index_version 
        if generation_num is not APIHelper.SKIP:
            self.generation_num = generation_num 
        if created is not APIHelper.SKIP:
            self.created = created 
        if modified is not APIHelper.SKIP:
            self.modified = modified 
        if author is not APIHelper.SKIP:
            self.author = author 
        if modified_by is not APIHelper.SKIP:
            self.modified_by = modified_by 
        if owner is not APIHelper.SKIP:
            self.owner = owner 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        display_name = dictionary.get("displayName") if dictionary.get("displayName") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        privileges = dictionary.get("privileges") if dictionary.get("privileges") else APIHelper.SKIP
        orgs = None
        if dictionary.get('orgs') is not None:
            orgs = [OrgType.from_dictionary(x) for x in dictionary.get('orgs')]
        else:
            orgs = APIHelper.SKIP
        groups = None
        if dictionary.get('groups') is not None:
            groups = [GroupNameAndID.from_dictionary(x) for x in dictionary.get('groups')]
        else:
            groups = APIHelper.SKIP
        users = None
        if dictionary.get('users') is not None:
            users = [UserNameAndID.from_dictionary(x) for x in dictionary.get('users')]
        else:
            users = APIHelper.SKIP
        assigned_liveboards = None
        if dictionary.get('assignedLiveboards') is not None:
            assigned_liveboards = [LiveboardNameAndID.from_dictionary(x) for x in dictionary.get('assignedLiveboards')]
        else:
            assigned_liveboards = APIHelper.SKIP
        user_group_content = dictionary.get("userGroupContent") if dictionary.get("userGroupContent") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        is_deleted = dictionary.get("isDeleted") if "isDeleted" in dictionary.keys() else APIHelper.SKIP
        is_hidden = dictionary.get("isHidden") if "isHidden" in dictionary.keys() else APIHelper.SKIP
        is_external = dictionary.get("isExternal") if "isExternal" in dictionary.keys() else APIHelper.SKIP
        is_deprecated = dictionary.get("isDeprecated") if "isDeprecated" in dictionary.keys() else APIHelper.SKIP
        complete = dictionary.get("complete") if "complete" in dictionary.keys() else APIHelper.SKIP
        is_system_principal = dictionary.get("isSystemPrincipal") if "isSystemPrincipal" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        parenttype = dictionary.get("parenttype") if dictionary.get("parenttype") else APIHelper.SKIP
        group_idx = dictionary.get("groupIdx") if dictionary.get("groupIdx") else APIHelper.SKIP
        metadata_version = dictionary.get("metadataVersion") if dictionary.get("metadataVersion") else APIHelper.SKIP
        tenant_id = dictionary.get("tenantId") if dictionary.get("tenantId") else APIHelper.SKIP
        index_version = dictionary.get("indexVersion") if dictionary.get("indexVersion") else APIHelper.SKIP
        generation_num = dictionary.get("generationNum") if dictionary.get("generationNum") else APIHelper.SKIP
        created = dictionary.get("created") if dictionary.get("created") else APIHelper.SKIP
        modified = dictionary.get("modified") if dictionary.get("modified") else APIHelper.SKIP
        author = UserNameAndID.from_dictionary(dictionary.get('author')) if 'author' in dictionary.keys() else APIHelper.SKIP 
        modified_by = UserNameAndID.from_dictionary(dictionary.get('modifiedBy')) if 'modifiedBy' in dictionary.keys() else APIHelper.SKIP 
        owner = UserNameAndID.from_dictionary(dictionary.get('owner')) if 'owner' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(name,
                   display_name,
                   id,
                   visibility,
                   description,
                   privileges,
                   orgs,
                   groups,
                   users,
                   assigned_liveboards,
                   user_group_content,
                   tags,
                   is_deleted,
                   is_hidden,
                   is_external,
                   is_deprecated,
                   complete,
                   is_system_principal,
                   mtype,
                   parenttype,
                   group_idx,
                   metadata_version,
                   tenant_id,
                   index_version,
                   generation_num,
                   created,
                   modified,
                   author,
                   modified_by,
                   owner)
