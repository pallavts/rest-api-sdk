# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.user_name_and_id_input import UserNameAndIDInput


class TspublicRestV2UserAddorgRequest(object):

    """Implementation of the 'Tspublic Rest V2 User Addorg Request' model.

    TODO: type model description here.

    Attributes:
        org_id (int): The ID of the organization.
        users (list of UserNameAndIDInput): Array of objects. A JSON array of
            name of users or GUIDs of users or both. When both are given then
            id is considered

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "users": 'users',
        "org_id": 'orgId'
    }

    _optionals = [
        'org_id',
    ]

    def __init__(self,
                 users=None,
                 org_id=APIHelper.SKIP):
        """Constructor for the TspublicRestV2UserAddorgRequest class"""

        # Initialize members of the class
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        self.users = users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        users = None
        if dictionary.get('users') is not None:
            users = [UserNameAndIDInput.from_dictionary(x) for x in dictionary.get('users')]
        org_id = dictionary.get("orgId") if dictionary.get("orgId") else APIHelper.SKIP
        # Return an object of this model
        return cls(users,
                   org_id)
