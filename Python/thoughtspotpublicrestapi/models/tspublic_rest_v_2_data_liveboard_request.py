# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper


class TspublicRestV2DataLiveboardRequest(object):

    """Implementation of the 'Tspublic Rest V2 Data Liveboard Request' model.

    TODO: type model description here.

    Attributes:
        offset (int): The offset point, starting from where the records should
            be included in the response.   If no input is provided then offset
            starts from 0.
        batch_number (int): An alternate way to set offset for the starting
            point of the response.   The value in offset field will not be
            considered if batchNumber field has value greater than 0.   Offset
            value will be calculated as (batchNumber - 1) * batchSize.   It is
            mandatory to provide a value for batchSize with batchNumber.  
            Example:   Assume response has 100 records. Now,  batchNumber is
            set as 2 and batchSize as 10, then offset value will be 10. So, 10
            records starting from 11th record will be considered.
        batch_size (int): The number of records that should be included in the
            response starting from offset position.   If no input is provided,
            then all records starting from the value provided in offset is
            included in the response
        id (string): The GUID of the Liveboard
        transient_content (string): If you have embedded ThoughtSpot in your
            host application, and you want to download Liveboard data with
            unsaved changes then, pass the transient content from the browser
            fetch request, using the getExportRequestForCurrentPinboard
            method. For more information, see
            https://developers.thoughtspot.com/docs/?pageid=liveboard-export-ap
            i#transient-pinboard . If value for this field is provided, then
            id will not be considered.
        viz_id (list of string): A JSON array of GUIDs of the visualizations
            in the Liveboard.
        runtime_filter (string): JSON object which contains filter condition
            to filter the data at the time of data retrieval.   Example:
            {"col1":"region","op1":"EQ","val1":"northeast","col2":"date","op2":
            "BET","val2":["1625126400000","1625126400000"]}   For more
            information, see
            https://developers.thoughtspot.com/docs/?pageid=runtime-filters
        runtime_sort (string): JSON object which provides columns to sort the
            data at the time of data retrieval.   Example:
            {"sortCol1":"region","asc1":true,"sortCol2":"date"}   For more
            information, see
            https://developers.thoughtspot.com/docs/?pageid=runtime-filters.
        format_type (FormatTypeEnum): The format of the data in the response. 
            FULL: The response comes in "column":"value" format.   COMPACT:
            The response includes only the value of the columns.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "offset": 'offset',
        "batch_number": 'batchNumber',
        "batch_size": 'batchSize',
        "id": 'id',
        "transient_content": 'transientContent',
        "viz_id": 'vizId',
        "runtime_filter": 'runtimeFilter',
        "runtime_sort": 'runtimeSort',
        "format_type": 'formatType'
    }

    _optionals = [
        'offset',
        'batch_number',
        'batch_size',
        'id',
        'transient_content',
        'viz_id',
        'runtime_filter',
        'runtime_sort',
        'format_type',
    ]

    def __init__(self,
                 offset=0,
                 batch_number=-1,
                 batch_size=-1,
                 id=APIHelper.SKIP,
                 transient_content=APIHelper.SKIP,
                 viz_id=APIHelper.SKIP,
                 runtime_filter=APIHelper.SKIP,
                 runtime_sort=APIHelper.SKIP,
                 format_type='COMPACT'):
        """Constructor for the TspublicRestV2DataLiveboardRequest class"""

        # Initialize members of the class
        self.offset = offset 
        self.batch_number = batch_number 
        self.batch_size = batch_size 
        if id is not APIHelper.SKIP:
            self.id = id 
        if transient_content is not APIHelper.SKIP:
            self.transient_content = transient_content 
        if viz_id is not APIHelper.SKIP:
            self.viz_id = viz_id 
        if runtime_filter is not APIHelper.SKIP:
            self.runtime_filter = runtime_filter 
        if runtime_sort is not APIHelper.SKIP:
            self.runtime_sort = runtime_sort 
        self.format_type = format_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        offset = dictionary.get("offset") if dictionary.get("offset") else 0
        batch_number = dictionary.get("batchNumber") if dictionary.get("batchNumber") else -1
        batch_size = dictionary.get("batchSize") if dictionary.get("batchSize") else -1
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        transient_content = dictionary.get("transientContent") if dictionary.get("transientContent") else APIHelper.SKIP
        viz_id = dictionary.get("vizId") if dictionary.get("vizId") else APIHelper.SKIP
        runtime_filter = dictionary.get("runtimeFilter") if dictionary.get("runtimeFilter") else APIHelper.SKIP
        runtime_sort = dictionary.get("runtimeSort") if dictionary.get("runtimeSort") else APIHelper.SKIP
        format_type = dictionary.get("formatType") if dictionary.get("formatType") else 'COMPACT'
        # Return an object of this model
        return cls(offset,
                   batch_number,
                   batch_size,
                   id,
                   transient_content,
                   viz_id,
                   runtime_filter,
                   runtime_sort,
                   format_type)
