# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper


class OrgsResponse(object):

    """Implementation of the 'OrgsResponse' model.

    TODO: type model description here.

    Attributes:
        org_id (int): ID of the organization searched for
        org_name (string): Name of the organization searched for
        description (string): Description associated with the organization
        all_group_user_id (string): GUID of the ALL group in the organization
        default_admin_user_group_id (string): GUID of the admin group in the
            organization
        active (bool): Indicates if the organization is active or not

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "org_id": 'orgId',
        "org_name": 'orgName',
        "description": 'description',
        "all_group_user_id": 'allGroupUserId',
        "default_admin_user_group_id": 'defaultAdminUserGroupId',
        "active": 'active'
    }

    _optionals = [
        'org_id',
        'org_name',
        'description',
        'all_group_user_id',
        'default_admin_user_group_id',
        'active',
    ]

    def __init__(self,
                 org_id=APIHelper.SKIP,
                 org_name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 all_group_user_id=APIHelper.SKIP,
                 default_admin_user_group_id=APIHelper.SKIP,
                 active=APIHelper.SKIP):
        """Constructor for the OrgsResponse class"""

        # Initialize members of the class
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if org_name is not APIHelper.SKIP:
            self.org_name = org_name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if all_group_user_id is not APIHelper.SKIP:
            self.all_group_user_id = all_group_user_id 
        if default_admin_user_group_id is not APIHelper.SKIP:
            self.default_admin_user_group_id = default_admin_user_group_id 
        if active is not APIHelper.SKIP:
            self.active = active 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        org_id = dictionary.get("orgId") if dictionary.get("orgId") else APIHelper.SKIP
        org_name = dictionary.get("orgName") if dictionary.get("orgName") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        all_group_user_id = dictionary.get("allGroupUserId") if dictionary.get("allGroupUserId") else APIHelper.SKIP
        default_admin_user_group_id = dictionary.get("defaultAdminUserGroupId") if dictionary.get("defaultAdminUserGroupId") else APIHelper.SKIP
        active = dictionary.get("active") if "active" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(org_id,
                   org_name,
                   description,
                   all_group_user_id,
                   default_admin_user_group_id,
                   active)
