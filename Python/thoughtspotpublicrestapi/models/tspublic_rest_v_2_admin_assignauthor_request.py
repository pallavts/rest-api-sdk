# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper


class TspublicRestV2AdminAssignauthorRequest(object):

    """Implementation of the 'Tspublic Rest V2 Admin Assignauthor Request' model.

    TODO: type model description here.

    Attributes:
        ts_object_id (list of string): A JSON array of GUIDs of the metadata
            objects.
        name (string): User name of the user account
        id (string): The GUID of the user account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ts_object_id": 'tsObjectId',
        "name": 'name',
        "id": 'id'
    }

    _optionals = [
        'name',
        'id',
    ]

    def __init__(self,
                 ts_object_id=None,
                 name=APIHelper.SKIP,
                 id=APIHelper.SKIP):
        """Constructor for the TspublicRestV2AdminAssignauthorRequest class"""

        # Initialize members of the class
        self.ts_object_id = ts_object_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if id is not APIHelper.SKIP:
            self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ts_object_id = dictionary.get("tsObjectId") if dictionary.get("tsObjectId") else None
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        # Return an object of this model
        return cls(ts_object_id,
                   name,
                   id)
