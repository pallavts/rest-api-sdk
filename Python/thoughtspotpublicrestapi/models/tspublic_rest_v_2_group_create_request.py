# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.models.group_name_and_id_input import GroupNameAndIDInput
from thoughtspotpublicrestapi.models.user_name_and_id_input import UserNameAndIDInput


class TspublicRestV2GroupCreateRequest(object):

    """Implementation of the 'Tspublic Rest V2 Group Create Request' model.

    TODO: type model description here.

    Attributes:
        name (string): Name of the user group. The group name string must be
            unique.
        display_name (string): A unique display name string for the user
            group, for example, Developer group.
        visibility (Visibility2Enum): Visibility of the user group. The
            visibility attribute is set to DEFAULT. The DEFAULT attribute
            makes the user group visible for other user groups and allows them
            to share objects.
        description (string): Description text for the group.
        privileges (list of PrivilegeEnum): A JSON array of privileges
            assigned to the group
        org_id (int): Unique identifier of the organization. If no value is
            provided then group will be created in the organization associated
            with the login session.
        groups (list of GroupNameAndIDInput): Array of objects of groups that
            the group belong to.
        users (list of UserNameAndIDInput): Array of names of user names that
            the group belong to.
        mtype (Type10Enum): Type of user group. LOCAL_GROUP indicates that the
            user is created locally in the ThoughtSpot system.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "display_name": 'displayName',
        "visibility": 'visibility',
        "description": 'description',
        "privileges": 'privileges',
        "org_id": 'orgId',
        "groups": 'groups',
        "users": 'users',
        "mtype": 'type'
    }

    _optionals = [
        'visibility',
        'description',
        'privileges',
        'org_id',
        'groups',
        'users',
        'mtype',
    ]

    def __init__(self,
                 name=None,
                 display_name=None,
                 visibility='DEFAULT',
                 description=APIHelper.SKIP,
                 privileges=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 groups=APIHelper.SKIP,
                 users=APIHelper.SKIP,
                 mtype='LOCAL_GROUP'):
        """Constructor for the TspublicRestV2GroupCreateRequest class"""

        # Initialize members of the class
        self.name = name 
        self.display_name = display_name 
        self.visibility = visibility 
        if description is not APIHelper.SKIP:
            self.description = description 
        if privileges is not APIHelper.SKIP:
            self.privileges = privileges 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if groups is not APIHelper.SKIP:
            self.groups = groups 
        if users is not APIHelper.SKIP:
            self.users = users 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        display_name = dictionary.get("displayName") if dictionary.get("displayName") else None
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else 'DEFAULT'
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        privileges = dictionary.get("privileges") if dictionary.get("privileges") else APIHelper.SKIP
        org_id = dictionary.get("orgId") if dictionary.get("orgId") else APIHelper.SKIP
        groups = None
        if dictionary.get('groups') is not None:
            groups = [GroupNameAndIDInput.from_dictionary(x) for x in dictionary.get('groups')]
        else:
            groups = APIHelper.SKIP
        users = None
        if dictionary.get('users') is not None:
            users = [UserNameAndIDInput.from_dictionary(x) for x in dictionary.get('users')]
        else:
            users = APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'LOCAL_GROUP'
        # Return an object of this model
        return cls(name,
                   display_name,
                   visibility,
                   description,
                   privileges,
                   org_id,
                   groups,
                   users,
                   mtype)
