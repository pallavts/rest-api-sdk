# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from thoughtspotpublicrestapi.api_helper import APIHelper


class TspublicRestV2MetadataDetailSearchRequest(object):

    """Implementation of the 'Tspublic Rest V2 Metadata Detail Search Request' model.

    TODO: type model description here.

    Attributes:
        mtype (Type6Enum): Type of the metadata object being searched.
        id (list of string): A JSON array of GUIDs of the objects.
        show_hidden (bool): When set to true, returns details of the hidden
            objects, such as a column in a worksheet or a table.
        drop_question_details (bool): When set to true, the search assist data
            associated with a worksheet is not included in the API response.
            This attribute is applicable only for DATAOBJECT data type.
        version (string): Specify the version to retrieve the objects from. By
            default, the API returns metadata for all versions of the object.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "id": 'id',
        "show_hidden": 'showHidden',
        "drop_question_details": 'dropQuestionDetails',
        "version": 'version'
    }

    _optionals = [
        'show_hidden',
        'drop_question_details',
        'version',
    ]

    def __init__(self,
                 mtype=None,
                 id=None,
                 show_hidden=False,
                 drop_question_details=False,
                 version=APIHelper.SKIP):
        """Constructor for the TspublicRestV2MetadataDetailSearchRequest class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.id = id 
        self.show_hidden = show_hidden 
        self.drop_question_details = drop_question_details 
        if version is not APIHelper.SKIP:
            self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mtype = dictionary.get("type") if dictionary.get("type") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        show_hidden = dictionary.get("showHidden") if dictionary.get("showHidden") else False
        drop_question_details = dictionary.get("dropQuestionDetails") if dictionary.get("dropQuestionDetails") else False
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   id,
                   show_hidden,
                   drop_question_details,
                   version)
