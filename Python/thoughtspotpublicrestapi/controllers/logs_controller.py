# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.configuration import Server
from thoughtspotpublicrestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from thoughtspotpublicrestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from thoughtspotpublicrestapi.models.logs_response import LogsResponse
from thoughtspotpublicrestapi.exceptions.error_response_exception import ErrorResponseException


class LogsController(BaseController):

    """A Controller to access Endpoints in the thoughtspotpublicrestapi API."""
    def __init__(self, config):
        super(LogsController, self).__init__(config)

    def restapi_v_2__get_log_events(self,
                                    topic,
                                    from_epoch=None,
                                    to_epoch=None):
        """Does a GET request to /tspublic/rest/v2/logs/events.

        Note: This endpoint is applicable only for SAAS deployments. 
        The ThoughtSpot log streaming service API allows you to
        programmatically get a security audit event log from the ThoughtSpot
        system. 
        To use this API, make sure you have admin user privileges. 
        ThoughtSpot cloud deployments allow you to collect security audit
        events and send them to your Security information and event management
        (SIEM) application in real-time. 
        These events can help your security operations personnel to detect
        potential security threats or compromised user accounts in your
        organization.

        Args:
            topic (TopicEnum): Type of the log
            from_epoch (string, optional): The EPOCH time in milliseconds to
                set the start time for streaming logs.   Example: To set the
                timestamp as June 1, 2021 8 am, specify 1622534400000.
            to_epoch (string, optional): The EPOCH time in milliseconds to set
                the end time for streaming logs.   Example: To set the
                timestamp as July 1, 2021, 8 am, specify 1625126400000.

        Returns:
            LogsResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/logs/events')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('topic')
                         .value(topic)
                         .is_required(True))
            .query_param(Parameter()
                         .key('fromEpoch')
                         .value(from_epoch))
            .query_param(Parameter()
                         .key('toEpoch')
                         .value(to_epoch))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LogsResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()
