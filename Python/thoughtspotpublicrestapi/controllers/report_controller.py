# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.configuration import Server
from thoughtspotpublicrestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from thoughtspotpublicrestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.types.array_serialization_format import SerializationFormats
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from thoughtspotpublicrestapi.exceptions.error_response_exception import ErrorResponseException


class ReportController(BaseController):

    """A Controller to access Endpoints in the thoughtspotpublicrestapi API."""
    def __init__(self, config):
        super(ReportController, self).__init__(config)

    def restapi_v_2__answer_report(self,
                                   id,
                                   mtype):
        """Does a GET request to /tspublic/rest/v2/report/answer.

        To programmatically download Answer data as a file, use this endpoint.
                The PDF will download data in the tabular format even if Answer is
        saved as chart.

        Args:
            id (string): GUID of the Answer to download.
            mtype (Type16Enum): Type of file to be generated.

        Returns:
            object: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/report/answer')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('id')
                         .value(id)
                         .is_required(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype)
                         .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__liveboard_report(self,
                                      mtype,
                                      id=None,
                                      viz_id=None,
                                      transient_content=None,
                                      runtime_filter=None,
                                      runtime_sort=None,
                                      pdf_options=None):
        """Does a GET request to /tspublic/rest/v2/report/liveboard.

        To programmatically download Liveboard data or specific Visualization
        data from Liveboard as a file, use this endpoint

        Args:
            mtype (Type16Enum): Type of file to be generated. Valid values:
                CSV/XLSX/PDF/PNG.
            id (string, optional): GUID of the Liveboard to download.   This
                field is considered only when no input is provided for
                transientContent field.
            viz_id (list of string, optional): JSON Array of GUIDs of the
                visualizations in the Liveboard to be included in the
                downloaded file.   For CSV, XLSX and PNG file download,
                visualization id is mandatory. CSV and XLSX is valid only for
                visualization of type table and PNG is valid for charts.  
                Only one value will be accepted for these formats. If multiple
                values are provided then first value in the array will be
                considered.
            transient_content (string, optional): If you have embedded
                ThoughtSpot in your host application, and you want to download
                Liveboards with unsaved changes as a file, pass the transient
                content from the browser fetch request, using the
                getExportRequestForCurrentPinboard method. For more
                information, see
                https://developers.thoughtspot.com/docs/?pageid=liveboard-expor
                t-api#transient-pinboard.
            runtime_filter (string, optional): If you have embedded
                ThoughtSpot in your host application, and you want to download
                Liveboards with unsaved changes as a file, pass the transient
                content from the browser fetch request, using the
                getExportRequestForCurrentPinboard method. For more
                information, see
                https://developers.thoughtspot.com/docs/?pageid=liveboard-expor
                t-api#transient-pinboard .
            runtime_sort (string, optional): JSON object which provides
                columns to sort the data at the time of data retrieval.  
                Example: {"sortCol1":"region","asc1":true,"sortCol2":"date"}  
                For more information, see
                https://developers.thoughtspot.com/docs/?pageid=runtime-filters
                            pdf_options (PdfOptionsInput, optional): Additional options that
                are applicable for PDF type.

        Returns:
            object: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/report/liveboard')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('type')
                         .value(mtype)
                         .is_required(True))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .query_param(Parameter()
                         .key('vizId')
                         .value(viz_id))
            .query_param(Parameter()
                         .key('transientContent')
                         .value(transient_content))
            .query_param(Parameter()
                         .key('runtimeFilter')
                         .value(runtime_filter))
            .query_param(Parameter()
                         .key('runtimeSort')
                         .value(runtime_sort))
            .query_param(Parameter()
                         .key('pdfOptions')
                         .value(pdf_options))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .array_serialization_format(SerializationFormats.PLAIN)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()
