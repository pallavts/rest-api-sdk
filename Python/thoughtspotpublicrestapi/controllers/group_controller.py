# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.configuration import Server
from thoughtspotpublicrestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from thoughtspotpublicrestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from thoughtspotpublicrestapi.models.group_response import GroupResponse
from thoughtspotpublicrestapi.exceptions.error_response_exception import ErrorResponseException


class GroupController(BaseController):

    """A Controller to access Endpoints in the thoughtspotpublicrestapi API."""
    def __init__(self, config):
        super(GroupController, self).__init__(config)

    def restapi_v_2__get_group(self,
                               name=None,
                               id=None):
        """Does a GET request to /tspublic/rest/v2/group.

        To get the details of a specific group by name or id, use this
        endpoint.
        At Least one value needed.  When both are given id will be considered
        to fetch user information.

        Args:
            name (string, optional): Name of the group
            id (string, optional): The GUID of the group to query.

        Returns:
            GroupResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GroupResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__create_group(self,
                                  body):
        """Does a POST request to /tspublic/rest/v2/group/create.

        To programmatically create a group in the ThoughtSpot system, use this
        API endpoint. Using this API, you can create a group and assign
        privileges and users. For ease of user management and access control,
        ThoughtSpot administrators can create groups and assign privileges to
        these groups. The privileges determine the actions that the users
        belonging to a group are allowed to do. ThoughtSpot also has a default
        group called ALL_GROUP. When you create new group in ThoughtSpot, they
        are automatically added to ALL_GROUP. You cannot delete the ALL_GROUP
        or remove members from it.

        Args:
            body (TspublicRestV2GroupCreateRequest): TODO: type description
                here.

        Returns:
            GroupResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/create')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GroupResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__update_group(self,
                                  body):
        """Does a PUT request to /tspublic/rest/v2/group/update.

        You can use this endpoint to programmatically modify an existing user
        account.
        To modify a user, you require admin user privileges.
        At least one of User Id or username is mandatory. When both are given,
        then user id will be considered and username will be updated

        Args:
            body (TspublicRestV2GroupUpdateRequest): TODO: type description
                here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/update')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__delete_group(self,
                                  name=None,
                                  id=None):
        """Does a DELETE request to /tspublic/rest/v2/group/delete.

        To remove a group from the ThoughtSpot system, send a DELETE request
        to this endpoint. At Least one value needed.  When both are given user
        id will be considered to fetch user information.

        Args:
            name (string, optional): Name of the group.
            id (string, optional): The GUID of the group

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/delete')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__add_privileges_to_group(self,
                                             body):
        """Does a PUT request to /tspublic/rest/v2/group/addprivilege.

        To programmatically add privileges to an existing group, use API
        endpoint.
        When you assign privileges to a group,  all the users under to this
        group inherits the privileges assigned to that group.
        At least one of id or name of group is required. When both are given
        user id will be considered.

        Args:
            body (TspublicRestV2GroupAddprivilegeRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/addprivilege')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__remove_privileges_from_group(self,
                                                  body):
        """Does a PUT request to /tspublic/rest/v2/group/removeprivilege.

        To programmatically remove privileges from a group, use API endpoint.
        The API removes only the privilege association. It does not delete the
        privilege or group from the Thoughtspot system. At least one of id or
        name of group is required. When both are given user id will be
        considered.

        Args:
            body (TspublicRestV2GroupRemoveprivilegeRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/removeprivilege')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__add_users_to_group(self,
                                        body):
        """Does a PUT request to /tspublic/rest/v2/group/adduser.

        To programmatically add existing ThoughtSpot users to a group, use
        this API endpoint. When you assign users to a group, the users
        inherits the privileges assigned to that group. At least one of id or
        name of the group is required. When both are given user id will be
        considered.

        Args:
            body (TspublicRestV2GroupAdduserRequest): TODO: type description
                here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/adduser')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__remove_users_from_group(self,
                                             body):
        """Does a PUT request to /tspublic/rest/v2/group/removeuser.

        To programmatically remove users from a group, use API endpoint.The
        API removes only the user association. It does not delete the users or
        group from the Thoughtspot system. At least one of id or name of group
        is required. When both are given user id will be considered.

        Args:
            body (TspublicRestV2GroupRemoveuserRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/removeuser')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__add_groups_to_group(self,
                                         body):
        """Does a PUT request to /tspublic/rest/v2/group/addgroup.

        To programmatically add existing groups to a group, use API endpoint.
        When you assign groups to a group, the group inherits the privileges
        assigned to those groups. At least one of id or name of group is
        required. When both are given user id will be considered.

        Args:
            body (TspublicRestV2GroupAddgroupRequest): TODO: type description
                here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/addgroup')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__remove_groups_from_group(self,
                                              body):
        """Does a PUT request to /tspublic/rest/v2/group/removegroup.

        To programmatically remove groups from a group, use API endpoint.The
        API removes only the group association. It does not delete the group
        from the Thoughtspot system. At least one of id or name of group is
        required. When both are given user id will be considered.

        Args:
            body (TspublicRestV2GroupRemovegroupRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/removegroup')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__search_groups(self,
                                   body):
        """Does a POST request to /tspublic/rest/v2/group/search.

        To get the details of a specific group account or all groups in the
        ThoughtSpot system, use this end point.

        Args:
            body (TspublicRestV2GroupSearchRequest): TODO: type description
                here.

        Returns:
            object: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/group/search')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()
