# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.configuration import Server
from thoughtspotpublicrestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from thoughtspotpublicrestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from thoughtspotpublicrestapi.models.session_login_response import SessionLoginResponse
from thoughtspotpublicrestapi.exceptions.error_response_exception import ErrorResponseException


class SessionController(BaseController):

    """A Controller to access Endpoints in the thoughtspotpublicrestapi API."""
    def __init__(self, config):
        super(SessionController, self).__init__(config)

    def restapi_v_2__login(self,
                           user_name=None,
                           password=None,
                           remember_me=None):
        """Does a GET request to /tspublic/rest/v2/session/login.

        You can programmatically create login session for a user in
        ThoughtSpot using this endpoint. 
        You can create session by either providing userName and password as
        inputs in this request body or by including "Authorization" header
        with the token generated through the endpoint
        /tspublic/rest/v2/session/gettoken. 
        userName and password input is given precedence over "Authorization"
        header, when both are included in the request.

        Args:
            user_name (string, optional): Username of the user account
            password (string, optional): The password of the user account
            remember_me (bool, optional): A flag to remember the user session.
                When set to true, sets a session cookie that persists in
                subsequent API calls.

        Returns:
            SessionLoginResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/session/login')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('userName')
                         .value(user_name))
            .query_param(Parameter()
                         .key('password')
                         .value(password))
            .query_param(Parameter()
                         .key('rememberMe')
                         .value(remember_me))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SessionLoginResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__get_token(self,
                               user_name,
                               password=None,
                               secret_key=None,
                               access_level=None,
                               ts_object_id=None,
                               token_expiry_duration=None,
                               org_id=None):
        """Does a GET request to /tspublic/rest/v2/session/gettoken.

         To programmatically create session token for a user in ThoughtSpot,
         use this endpoint. 
        You can generate the token for a user by providing password or secret
        key from the cluster. 
        You need to enable trusted authentication to generate secret key. To
        generate secret key, follow below steps. 
         1. Click the Develop tab. 
         2. Under Customizations, click Settings. 
         3. To enable trusted authentication, turn on the toggle. 
         4. A secret_key for trusted authentication is generated. 
         5. Click the clipboard icon to copy the token. 
         
        Password is given precedence over secretKey input, when both are
        included in the request.

        Args:
            user_name (string): Username of the user account
            password (string, optional): The password of the user account
            secret_key (string, optional): The secret key string provided by
                the ThoughtSpot application server. ThoughtSpot generates this
                secret key when you enable trusted authentication.
            access_level (AccessLevelEnum, optional): User access privilege.  
                FULL - Creates a session with full access.   REPORT_BOOK_VIEW
                - Allow view access to the specified visualizations.
            ts_object_id (string, optional): GUID of the ThoughtSpot object.
                If you have set the accessLevel attribute to REPORT_BOOK_VIEW,
                specify the GUID of the Liveboard or visualization object.
            token_expiry_duration (string, optional): Duration in seconds
                after which the token expires
            org_id (string, optional): Id of the organization to be associated
                with the user login. If no input is provided then last logged
                in organization will be considered

        Returns:
            SessionLoginResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/session/gettoken')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('userName')
                         .value(user_name)
                         .is_required(True))
            .query_param(Parameter()
                         .key('password')
                         .value(password))
            .query_param(Parameter()
                         .key('secretKey')
                         .value(secret_key))
            .query_param(Parameter()
                         .key('accessLevel')
                         .value(access_level))
            .query_param(Parameter()
                         .key('tsObjectId')
                         .value(ts_object_id))
            .query_param(Parameter()
                         .key('tokenExpiryDuration')
                         .value(token_expiry_duration))
            .query_param(Parameter()
                         .key('orgId')
                         .value(org_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SessionLoginResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()
