# -*- coding: utf-8 -*-

"""
thoughtspotpublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from thoughtspotpublicrestapi.api_helper import APIHelper
from thoughtspotpublicrestapi.configuration import Server
from thoughtspotpublicrestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from thoughtspotpublicrestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.types.array_serialization_format import SerializationFormats
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from thoughtspotpublicrestapi.models.user_response import UserResponse
from thoughtspotpublicrestapi.exceptions.error_response_exception import ErrorResponseException


class UserController(BaseController):

    """A Controller to access Endpoints in the thoughtspotpublicrestapi API."""
    def __init__(self, config):
        super(UserController, self).__init__(config)

    def restapi_v_2__get_user(self,
                              name=None,
                              id=None):
        """Does a GET request to /tspublic/rest/v2/user.

        To get the details of a specific user account by username or user id,
        use this endpoint. At Least one value is needed.  When both are given,
        user id will be considered to fetch user information

        Args:
            name (string, optional): Username of the user that you want to
                query.
            id (string, optional): The GUID of the user account to query

        Returns:
            UserResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__create_user(self,
                                 name,
                                 display_name,
                                 password,
                                 visibility=None,
                                 mail=None,
                                 org_ids=None,
                                 groups=None,
                                 state=None,
                                 notify_on_share=None,
                                 show_walk_me=None,
                                 analyst_onboarding_complete=None,
                                 mtype=None):
        """Does a GET request to /tspublic/rest/v2/user/create.

        To programmatically create a user account in the ThoughtSpot system
        use this API endpoint. Using this API, you can create a user and
        assign groups.
        To create a user, you require admin user privileges.
        All users created in the ThoughtSpot system are added to ALL_GROUP

        Args:
            name (string): Name of the user. The username string must be
                unique.
            display_name (string): A unique display name string for the user
                account, usually their first and last name
            password (string): Password for the user account.
            visibility (VisibilityEnum, optional): Visibility of the user. The
                visibility attribute is set to DEFAULT when creating a user.
                The DEFAULT attribute makes a user visible to other users and
                user groups, and this allows them to share objects
            mail (string, optional): Email of the user account
            org_ids (list of int, optional): Array of org identifiers. If no
                value is provided then user will be created in the
                organization associated with the login session.
            groups (list of GroupNameAndIDInput, optional): Array of objects
                of groups that the user belong to.
            state (StateEnum, optional): Status of user account. acitve or
                inactive.
            notify_on_share (bool, optional): User preference for receiving
                email notifications when another ThoughtSpot user shares
                answers or pinboards.
            show_walk_me (bool, optional): The user preference for revisiting
                the onboarding experience.
            analyst_onboarding_complete (bool, optional): ThoughtSpot provides
                an interactive guided walkthrough to onboard new users. The
                onboarding experience leads users through a set of actions to
                help users get started and accomplish their tasks quickly. The
                users can turn off the Onboarding experience and access it
                again when they need assistance with the ThoughtSpot UI.
            mtype (Type8Enum, optional): Type of user. LOCAL_USER indicates
                that the user is created locally in the ThoughtSpot system.

        Returns:
            UserResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/create')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('name')
                         .value(name)
                         .is_required(True))
            .query_param(Parameter()
                         .key('displayName')
                         .value(display_name)
                         .is_required(True))
            .query_param(Parameter()
                         .key('password')
                         .value(password)
                         .is_required(True))
            .query_param(Parameter()
                         .key('visibility')
                         .value(visibility))
            .query_param(Parameter()
                         .key('mail')
                         .value(mail))
            .query_param(Parameter()
                         .key('orgIds')
                         .value(org_ids))
            .query_param(Parameter()
                         .key('groups')
                         .value(groups))
            .query_param(Parameter()
                         .key('state')
                         .value(state))
            .query_param(Parameter()
                         .key('notifyOnShare')
                         .value(notify_on_share))
            .query_param(Parameter()
                         .key('showWalkMe')
                         .value(show_walk_me))
            .query_param(Parameter()
                         .key('analystOnboardingComplete')
                         .value(analyst_onboarding_complete))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .array_serialization_format(SerializationFormats.PLAIN)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UserResponse.from_dictionary)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__update_user(self,
                                 body):
        """Does a PUT request to /tspublic/rest/v2/user/update.

        You can use this endpoint to programmatically modify an existing user
        account.  To modify a user, you require admin user privileges.
        At least one of User Id or username is mandatory. When both are given,
        then user id will be considered and username will be updated

        Args:
            body (TspublicRestV2UserUpdateRequest): TODO: type description
                here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/update')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__delete_user(self,
                                 name=None,
                                 id=None,
                                 org_id=None):
        """Does a DELETE request to /tspublic/rest/v2/user/delete.

        To remove a user from the ThoughtSpot system, use this endpoint.
        At Least one value needed.  When both are given user id will be
        considered to delete user.

        Args:
            name (string, optional): Username of the user that you want to
                query.
            id (string, optional): The GUID of the user account to query
            org_id (int, optional): Unique identifier of the organization from
                which the user would be deleted. If no value is provided then
                user will be deleted from the organization associated with the
                login session.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/delete')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .query_param(Parameter()
                         .key('orgId')
                         .value(org_id))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__add_user_to_groups(self,
                                        body):
        """Does a PUT request to /tspublic/rest/v2/user/addgroup.

        To programmatically add groups to an existing ThoughtSpot user use
        this endpoint.
        When you assign groups to a user, the user inherits the privileges
        assigned to those groups.
        At least one of User Id or username is mandatory. When both are given,
        then user id will be considered.

        Args:
            body (TspublicRestV2UserAddgroupRequest): TODO: type description
                here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/addgroup')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__remove_user_from_groups(self,
                                             body):
        """Does a PUT request to /tspublic/rest/v2/user/removegroup.

        To programmatically remove groups from an existing ThoughtSpot user,
        use this API endpoint.
        The API removes only the user association. It does not delete the user
        or group from the Thoughtspot system
        At least one of User Id or username is mandatory. When both are given,
        then user id will be considered.

        Args:
            body (TspublicRestV2UserRemovegroupRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/removegroup')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__search_users(self,
                                  body):
        """Does a POST request to /tspublic/rest/v2/user/search.

        To get the details of a specific user account or all users in the
        ThoughtSpot system use this end point.

        Args:
            body (TspublicRestV2UserSearchRequest): TODO: type description
                here.

        Returns:
            object: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/search')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__change_password_of_user(self,
                                             body):
        """Does a PUT request to /tspublic/rest/v2/user/changepassword.

        To change the password of a ThoughtSpot user account, use this
        endpoint. 
        At least one of id or name of user is required. When both are given
        user id will be considered.

        Args:
            body (TspublicRestV2UserChangepasswordRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/changepassword')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()

    def restapi_v_2__add_user_to_orgs(self,
                                      body):
        """Does a PUT request to /tspublic/rest/v2/user/addorg.

        To programmatically add existing ThoughtSpot users to an organization,
        use this API endpoint. 
        At least one of id or name of the organization is required. When both
        are given, then organization id will be considered. 
        Requires Administration access for the organization to which users
        need to be added.

        Args:
            body (TspublicRestV2UserAddorgRequest): TODO: type description
                here.

        Returns:
            bool: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tspublic/rest/v2/user/addorg')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body)
                        .is_required(True))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Operation failed', ErrorResponseException)
        ).execute()
