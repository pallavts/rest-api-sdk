/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import localhost.RESTAPISDKClient;
import localhost.exceptions.ApiException;
import localhost.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class MetadataControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static RESTAPISDKClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static MetadataController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getMetadataController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * To get details of a specific tag, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetTag() throws Exception {
        // Parameters for the API call
        String name = null;
        String id = null;

        // Set callback and perform API call
        try {
            controller.getTag(name, id);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * To programmatically delete tags, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered. Permission: Requires
     * administration privilege.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestDeleteTag() throws Exception {
        // Parameters for the API call
        String name = null;
        String id = null;

        // Set callback and perform API call
        try {
            controller.deleteTag(name, id);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * To get the name and id of liveboard that is set as a home liveboard for a user, use this
     * endpoint. At least one of user id or username is required. When both are given, then id will
     * be considered. Permission: Requires at least view access to the object.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetHomeLiveboard() throws Exception {
        // Parameters for the API call
        String userName = null;
        String userId = null;

        // Set callback and perform API call
        try {
            controller.getHomeLiveboard(userName, userId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * To get a list of objects with incomplete metadata, use this endpoint.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetIncompleteObjects() throws Exception {

        // Set callback and perform API call
        try {
            controller.getIncompleteObjects();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
