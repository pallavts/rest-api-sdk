/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for ConnectionColumn type.
 */
public class ConnectionColumn {
    private String name;
    private String type;
    private List<TableColumns> column;

    /**
     * Default constructor.
     */
    public ConnectionColumn() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  type  String value for type.
     * @param  column  List of TableColumns value for column.
     */
    public ConnectionColumn(
            String name,
            String type,
            List<TableColumns> column) {
        this.name = name;
        this.type = type;
        this.column = column;
    }

    /**
     * Getter for Name.
     * Name of the table
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of the table
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Type.
     * Type of the Table
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Type of the Table
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Column.
     * List of columns in the table
     * @return Returns the List of TableColumns
     */
    @JsonGetter("column")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<TableColumns> getColumn() {
        return column;
    }

    /**
     * Setter for Column.
     * List of columns in the table
     * @param column Value for List of TableColumns
     */
    @JsonSetter("column")
    public void setColumn(List<TableColumns> column) {
        this.column = column;
    }

    /**
     * Converts this ConnectionColumn into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ConnectionColumn [" + "name=" + name + ", type=" + type + ", column=" + column
                + "]";
    }

    /**
     * Builds a new {@link ConnectionColumn.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ConnectionColumn.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .type(getType())
                .column(getColumn());
        return builder;
    }

    /**
     * Class to build instances of {@link ConnectionColumn}.
     */
    public static class Builder {
        private String name;
        private String type;
        private List<TableColumns> column;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for column.
         * @param  column  List of TableColumns value for column.
         * @return Builder
         */
        public Builder column(List<TableColumns> column) {
            this.column = column;
            return this;
        }

        /**
         * Builds a new {@link ConnectionColumn} object using the set fields.
         * @return {@link ConnectionColumn}
         */
        public ConnectionColumn build() {
            return new ConnectionColumn(name, type, column);
        }
    }
}
