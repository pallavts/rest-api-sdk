/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for ConnectionColumnsShema type.
 */
public class ConnectionColumnsShema {
    private String name;
    private String dbName;
    private String schemaName;
    private List<TableColumns> columns;

    /**
     * Default constructor.
     */
    public ConnectionColumnsShema() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  dbName  String value for dbName.
     * @param  schemaName  String value for schemaName.
     * @param  columns  List of TableColumns value for columns.
     */
    public ConnectionColumnsShema(
            String name,
            String dbName,
            String schemaName,
            List<TableColumns> columns) {
        this.name = name;
        this.dbName = dbName;
        this.schemaName = schemaName;
        this.columns = columns;
    }

    /**
     * Getter for Name.
     * Name of the table
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of the table
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for DbName.
     * Name of the database
     * @return Returns the String
     */
    @JsonGetter("dbName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDbName() {
        return dbName;
    }

    /**
     * Setter for DbName.
     * Name of the database
     * @param dbName Value for String
     */
    @JsonSetter("dbName")
    public void setDbName(String dbName) {
        this.dbName = dbName;
    }

    /**
     * Getter for SchemaName.
     * Name of the schema
     * @return Returns the String
     */
    @JsonGetter("schemaName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSchemaName() {
        return schemaName;
    }

    /**
     * Setter for SchemaName.
     * Name of the schema
     * @param schemaName Value for String
     */
    @JsonSetter("schemaName")
    public void setSchemaName(String schemaName) {
        this.schemaName = schemaName;
    }

    /**
     * Getter for Columns.
     * List of columns in the table
     * @return Returns the List of TableColumns
     */
    @JsonGetter("columns")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<TableColumns> getColumns() {
        return columns;
    }

    /**
     * Setter for Columns.
     * List of columns in the table
     * @param columns Value for List of TableColumns
     */
    @JsonSetter("columns")
    public void setColumns(List<TableColumns> columns) {
        this.columns = columns;
    }

    /**
     * Converts this ConnectionColumnsShema into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ConnectionColumnsShema [" + "name=" + name + ", dbName=" + dbName + ", schemaName="
                + schemaName + ", columns=" + columns + "]";
    }

    /**
     * Builds a new {@link ConnectionColumnsShema.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ConnectionColumnsShema.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .dbName(getDbName())
                .schemaName(getSchemaName())
                .columns(getColumns());
        return builder;
    }

    /**
     * Class to build instances of {@link ConnectionColumnsShema}.
     */
    public static class Builder {
        private String name;
        private String dbName;
        private String schemaName;
        private List<TableColumns> columns;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for dbName.
         * @param  dbName  String value for dbName.
         * @return Builder
         */
        public Builder dbName(String dbName) {
            this.dbName = dbName;
            return this;
        }

        /**
         * Setter for schemaName.
         * @param  schemaName  String value for schemaName.
         * @return Builder
         */
        public Builder schemaName(String schemaName) {
            this.schemaName = schemaName;
            return this;
        }

        /**
         * Setter for columns.
         * @param  columns  List of TableColumns value for columns.
         * @return Builder
         */
        public Builder columns(List<TableColumns> columns) {
            this.columns = columns;
            return this;
        }

        /**
         * Builds a new {@link ConnectionColumnsShema} object using the set fields.
         * @return {@link ConnectionColumnsShema}
         */
        public ConnectionColumnsShema build() {
            return new ConnectionColumnsShema(name, dbName, schemaName, columns);
        }
    }
}
