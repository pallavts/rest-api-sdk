/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.AccessLevelEnum;
import localhost.models.SessionLoginResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SessionController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SessionController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * You can programmatically create login session for a user in ThoughtSpot using this endpoint.
     * You can create session by either providing userName and password as inputs in this request
     * body or by including "Authorization" header with the token generated through the endpoint
     * /tspublic/rest/v2/session/gettoken. userName and password input is given precedence over
     * "Authorization" header, when both are included in the request.
     * @param  userName  Optional parameter: Username of the user account
     * @param  password  Optional parameter: The password of the user account
     * @param  rememberMe  Optional parameter: A flag to remember the user session. When set to
     *         true, sets a session cookie that persists in subsequent API calls.
     * @return    Returns the SessionLoginResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SessionLoginResponse restapiV2Login(
            final String userName,
            final String password,
            final Boolean rememberMe) throws ApiException, IOException {
        return prepareRestapiV2LoginRequest(userName, password, rememberMe).execute();
    }

    /**
     * You can programmatically create login session for a user in ThoughtSpot using this endpoint.
     * You can create session by either providing userName and password as inputs in this request
     * body or by including "Authorization" header with the token generated through the endpoint
     * /tspublic/rest/v2/session/gettoken. userName and password input is given precedence over
     * "Authorization" header, when both are included in the request.
     * @param  userName  Optional parameter: Username of the user account
     * @param  password  Optional parameter: The password of the user account
     * @param  rememberMe  Optional parameter: A flag to remember the user session. When set to
     *         true, sets a session cookie that persists in subsequent API calls.
     * @return    Returns the SessionLoginResponse response from the API call
     */
    public CompletableFuture<SessionLoginResponse> restapiV2LoginAsync(
            final String userName,
            final String password,
            final Boolean rememberMe) {
        try { 
            return prepareRestapiV2LoginRequest(userName, password, rememberMe).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2Login.
     */
    private ApiCall<SessionLoginResponse, ApiException> prepareRestapiV2LoginRequest(
            final String userName,
            final String password,
            final Boolean rememberMe) throws IOException {
        return new ApiCall.Builder<SessionLoginResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/session/login")
                        .queryParam(param -> param.key("userName")
                                .value(userName).isRequired(false))
                        .queryParam(param -> param.key("password")
                                .value(password).isRequired(false))
                        .queryParam(param -> param.key("rememberMe")
                                .value(rememberMe).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SessionLoginResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically create session token for a user in ThoughtSpot, use this endpoint. You
     * can generate the token for a user by providing password or secret key from the cluster. You
     * need to enable trusted authentication to generate secret key. To generate secret key, follow
     * below steps. 1. Click the Develop tab. 2. Under Customizations, click Settings. 3. To enable
     * trusted authentication, turn on the toggle. 4. A secret_key for trusted authentication is
     * generated. 5. Click the clipboard icon to copy the token. Password is given precedence over
     * secretKey input, when both are included in the request.
     * @param  userName  Required parameter: Username of the user account
     * @param  password  Optional parameter: The password of the user account
     * @param  secretKey  Optional parameter: The secret key string provided by the ThoughtSpot
     *         application server. ThoughtSpot generates this secret key when you enable trusted
     *         authentication.
     * @param  accessLevel  Optional parameter: User access privilege. FULL - Creates a session with
     *         full access. REPORT_BOOK_VIEW - Allow view access to the specified visualizations.
     * @param  tsObjectId  Optional parameter: GUID of the ThoughtSpot object. If you have set the
     *         accessLevel attribute to REPORT_BOOK_VIEW, specify the GUID of the Liveboard or
     *         visualization object.
     * @param  tokenExpiryDuration  Optional parameter: Duration in seconds after which the token
     *         expires
     * @param  orgId  Optional parameter: Id of the organization to be associated with the user
     *         login. If no input is provided then last logged in organization will be considered
     * @return    Returns the SessionLoginResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SessionLoginResponse restapiV2GetToken(
            final String userName,
            final String password,
            final String secretKey,
            final AccessLevelEnum accessLevel,
            final String tsObjectId,
            final String tokenExpiryDuration,
            final String orgId) throws ApiException, IOException {
        return prepareRestapiV2GetTokenRequest(userName, password, secretKey, accessLevel,
                tsObjectId, tokenExpiryDuration, orgId).execute();
    }

    /**
     * To programmatically create session token for a user in ThoughtSpot, use this endpoint. You
     * can generate the token for a user by providing password or secret key from the cluster. You
     * need to enable trusted authentication to generate secret key. To generate secret key, follow
     * below steps. 1. Click the Develop tab. 2. Under Customizations, click Settings. 3. To enable
     * trusted authentication, turn on the toggle. 4. A secret_key for trusted authentication is
     * generated. 5. Click the clipboard icon to copy the token. Password is given precedence over
     * secretKey input, when both are included in the request.
     * @param  userName  Required parameter: Username of the user account
     * @param  password  Optional parameter: The password of the user account
     * @param  secretKey  Optional parameter: The secret key string provided by the ThoughtSpot
     *         application server. ThoughtSpot generates this secret key when you enable trusted
     *         authentication.
     * @param  accessLevel  Optional parameter: User access privilege. FULL - Creates a session with
     *         full access. REPORT_BOOK_VIEW - Allow view access to the specified visualizations.
     * @param  tsObjectId  Optional parameter: GUID of the ThoughtSpot object. If you have set the
     *         accessLevel attribute to REPORT_BOOK_VIEW, specify the GUID of the Liveboard or
     *         visualization object.
     * @param  tokenExpiryDuration  Optional parameter: Duration in seconds after which the token
     *         expires
     * @param  orgId  Optional parameter: Id of the organization to be associated with the user
     *         login. If no input is provided then last logged in organization will be considered
     * @return    Returns the SessionLoginResponse response from the API call
     */
    public CompletableFuture<SessionLoginResponse> restapiV2GetTokenAsync(
            final String userName,
            final String password,
            final String secretKey,
            final AccessLevelEnum accessLevel,
            final String tsObjectId,
            final String tokenExpiryDuration,
            final String orgId) {
        try { 
            return prepareRestapiV2GetTokenRequest(userName, password, secretKey, accessLevel, tsObjectId,
            tokenExpiryDuration, orgId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetToken.
     */
    private ApiCall<SessionLoginResponse, ApiException> prepareRestapiV2GetTokenRequest(
            final String userName,
            final String password,
            final String secretKey,
            final AccessLevelEnum accessLevel,
            final String tsObjectId,
            final String tokenExpiryDuration,
            final String orgId) throws IOException {
        return new ApiCall.Builder<SessionLoginResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/session/gettoken")
                        .queryParam(param -> param.key("userName")
                                .value(userName))
                        .queryParam(param -> param.key("password")
                                .value(password).isRequired(false))
                        .queryParam(param -> param.key("secretKey")
                                .value(secretKey).isRequired(false))
                        .queryParam(param -> param.key("accessLevel")
                                .value((accessLevel != null) ? accessLevel.value() : null).isRequired(false))
                        .queryParam(param -> param.key("tsObjectId")
                                .value(tsObjectId).isRequired(false))
                        .queryParam(param -> param.key("tokenExpiryDuration")
                                .value(tokenExpiryDuration).isRequired(false))
                        .queryParam(param -> param.key("orgId")
                                .value(orgId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SessionLoginResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}