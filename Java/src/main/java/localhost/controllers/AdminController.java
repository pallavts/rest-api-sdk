/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.AdminsyncPrincipalResponse;
import localhost.models.TspublicRestV2AdminAssignauthorRequest;
import localhost.models.TspublicRestV2AdminChangeauthorRequest;
import localhost.models.TspublicRestV2AdminConfigurationUpdateRequest;
import localhost.models.TspublicRestV2AdminForcelogoutRequest;
import localhost.models.TspublicRestV2AdminResetpasswordRequest;
import localhost.models.TspublicRestV2AdminSyncprincipalRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AdminController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AdminController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To update the Thoughtspot cluster configuration, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2UpdateClusterConfig(
            final TspublicRestV2AdminConfigurationUpdateRequest body) throws ApiException, IOException {
        return prepareRestapiV2UpdateClusterConfigRequest(body).execute();
    }

    /**
     * To update the Thoughtspot cluster configuration, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2UpdateClusterConfigAsync(
            final TspublicRestV2AdminConfigurationUpdateRequest body) {
        try { 
            return prepareRestapiV2UpdateClusterConfigRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2UpdateClusterConfig.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2UpdateClusterConfigRequest(
            final TspublicRestV2AdminConfigurationUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/admin/configuration/update")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To reset the password of a ThoughtSpot user account, use this endpoint. It is mandatory to
     * use Authorization header with token of a user with admin access to successfully run this
     * endpoint. At least one of User Id or username is mandatory. When both are given, then user id
     * will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2ResetUserPassword(
            final TspublicRestV2AdminResetpasswordRequest body) throws ApiException, IOException {
        return prepareRestapiV2ResetUserPasswordRequest(body).execute();
    }

    /**
     * To reset the password of a ThoughtSpot user account, use this endpoint. It is mandatory to
     * use Authorization header with token of a user with admin access to successfully run this
     * endpoint. At least one of User Id or username is mandatory. When both are given, then user id
     * will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2ResetUserPasswordAsync(
            final TspublicRestV2AdminResetpasswordRequest body) {
        try { 
            return prepareRestapiV2ResetUserPasswordRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ResetUserPassword.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2ResetUserPasswordRequest(
            final TspublicRestV2AdminResetpasswordRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/admin/resetpassword")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically synchronize user accounts and user groups from external system with
     * ThoughtSpot, use this endpoint. The payload takes principals containing all users and groups
     * present in the external system. The users and user groups in Thoughtspot get updated for any
     * matching inputs. Any user and user group present in the input, but not present in the
     * cluster, gets created in cluster. n You can optionally choose to delete the user and groups
     * from the cluster, that are not present in the input.
     * @param  body  Required parameter: Example:
     * @return    Returns the AdminsyncPrincipalResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AdminsyncPrincipalResponse restapiV2SyncPrincipal(
            final TspublicRestV2AdminSyncprincipalRequest body) throws ApiException, IOException {
        return prepareRestapiV2SyncPrincipalRequest(body).execute();
    }

    /**
     * To programmatically synchronize user accounts and user groups from external system with
     * ThoughtSpot, use this endpoint. The payload takes principals containing all users and groups
     * present in the external system. The users and user groups in Thoughtspot get updated for any
     * matching inputs. Any user and user group present in the input, but not present in the
     * cluster, gets created in cluster. n You can optionally choose to delete the user and groups
     * from the cluster, that are not present in the input.
     * @param  body  Required parameter: Example:
     * @return    Returns the AdminsyncPrincipalResponse response from the API call
     */
    public CompletableFuture<AdminsyncPrincipalResponse> restapiV2SyncPrincipalAsync(
            final TspublicRestV2AdminSyncprincipalRequest body) {
        try { 
            return prepareRestapiV2SyncPrincipalRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SyncPrincipal.
     */
    private ApiCall<AdminsyncPrincipalResponse, ApiException> prepareRestapiV2SyncPrincipalRequest(
            final TspublicRestV2AdminSyncprincipalRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AdminsyncPrincipalResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/admin/syncprincipal")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AdminsyncPrincipalResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically change the owner of one or several objects from one user account to
     * another, use this endpoint. You might want to transfer ownership of objects owned by a user
     * to another active user, when the account is removed from the ThoughtSpot application.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2ChangeAuthorOfObjects(
            final TspublicRestV2AdminChangeauthorRequest body) throws ApiException, IOException {
        return prepareRestapiV2ChangeAuthorOfObjectsRequest(body).execute();
    }

    /**
     * To programmatically change the owner of one or several objects from one user account to
     * another, use this endpoint. You might want to transfer ownership of objects owned by a user
     * to another active user, when the account is removed from the ThoughtSpot application.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2ChangeAuthorOfObjectsAsync(
            final TspublicRestV2AdminChangeauthorRequest body) {
        try { 
            return prepareRestapiV2ChangeAuthorOfObjectsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ChangeAuthorOfObjects.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2ChangeAuthorOfObjectsRequest(
            final TspublicRestV2AdminChangeauthorRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/admin/changeauthor")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically assign an author to one or several objects, use this endpoint. Provide
     * either user name or id as input. When both are given user id will be considered. Requires
     * administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AssignAuthorToObjects(
            final TspublicRestV2AdminAssignauthorRequest body) throws ApiException, IOException {
        return prepareRestapiV2AssignAuthorToObjectsRequest(body).execute();
    }

    /**
     * To programmatically assign an author to one or several objects, use this endpoint. Provide
     * either user name or id as input. When both are given user id will be considered. Requires
     * administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AssignAuthorToObjectsAsync(
            final TspublicRestV2AdminAssignauthorRequest body) {
        try { 
            return prepareRestapiV2AssignAuthorToObjectsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AssignAuthorToObjects.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AssignAuthorToObjectsRequest(
            final TspublicRestV2AdminAssignauthorRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/admin/assignauthor")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To logout one or more users from logged in session, use this endpoint. If no input is
     * provided then all logged in users are force logged out. Requires administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2ForceLogoutUsers(
            final TspublicRestV2AdminForcelogoutRequest body) throws ApiException, IOException {
        return prepareRestapiV2ForceLogoutUsersRequest(body).execute();
    }

    /**
     * To logout one or more users from logged in session, use this endpoint. If no input is
     * provided then all logged in users are force logged out. Requires administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2ForceLogoutUsersAsync(
            final TspublicRestV2AdminForcelogoutRequest body) {
        try { 
            return prepareRestapiV2ForceLogoutUsersRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ForceLogoutUsers.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2ForceLogoutUsersRequest(
            final TspublicRestV2AdminForcelogoutRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/admin/forcelogout")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}