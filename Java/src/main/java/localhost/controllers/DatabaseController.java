/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.CreateTableResponse;
import localhost.models.TspublicRestV2DatabaseTableCreateRequest;
import localhost.models.TspublicRestV2DatabaseTableRunqueryRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DatabaseController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DatabaseController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To list all the schemas in a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> restapiV2GetSchemas(
            final String database) throws ApiException, IOException {
        return prepareRestapiV2GetSchemasRequest(database).execute();
    }

    /**
     * To list all the schemas in a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> restapiV2GetSchemasAsync(
            final String database) {
        try { 
            return prepareRestapiV2GetSchemasRequest(database).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetSchemas.
     */
    private ApiCall<List<String>, ApiException> prepareRestapiV2GetSchemasRequest(
            final String database) throws IOException {
        return new ApiCall.Builder<List<String>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/database/schema")
                        .queryParam(param -> param.key("database")
                                .value(database))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        String[].class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To list all the tables in a schema of a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @param  schema  Required parameter: Name of the schema in Falcon database
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> restapiV2GetTables(
            final String database,
            final String schema) throws ApiException, IOException {
        return prepareRestapiV2GetTablesRequest(database, schema).execute();
    }

    /**
     * To list all the tables in a schema of a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @param  schema  Required parameter: Name of the schema in Falcon database
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> restapiV2GetTablesAsync(
            final String database,
            final String schema) {
        try { 
            return prepareRestapiV2GetTablesRequest(database, schema).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetTables.
     */
    private ApiCall<List<String>, ApiException> prepareRestapiV2GetTablesRequest(
            final String database,
            final String schema) throws IOException {
        return new ApiCall.Builder<List<String>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/database/table")
                        .queryParam(param -> param.key("database")
                                .value(database))
                        .queryParam(param -> param.key("schema")
                                .value(schema))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        String[].class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To provide details of a table
     * in a schema of a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @param  table  Required parameter: Name of the table in Falcon database
     * @param  schema  Optional parameter: Name of the schema in Falcon database
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2GetTableDetails(
            final String database,
            final String table,
            final String schema) throws ApiException, IOException {
        return prepareRestapiV2GetTableDetailsRequest(database, table, schema).execute();
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To provide details of a table
     * in a schema of a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @param  table  Required parameter: Name of the table in Falcon database
     * @param  schema  Optional parameter: Name of the schema in Falcon database
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2GetTableDetailsAsync(
            final String database,
            final String table,
            final String schema) {
        try { 
            return prepareRestapiV2GetTableDetailsRequest(database, table, schema).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetTableDetails.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2GetTableDetailsRequest(
            final String database,
            final String table,
            final String schema) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/database/table/detail")
                        .queryParam(param -> param.key("database")
                                .value(database))
                        .queryParam(param -> param.key("table")
                                .value(table))
                        .queryParam(param -> param.key("schema")
                                .value(schema).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To create a table in Falcon, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the CreateTableResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CreateTableResponse restapiV2CreateTable(
            final TspublicRestV2DatabaseTableCreateRequest body) throws ApiException, IOException {
        return prepareRestapiV2CreateTableRequest(body).execute();
    }

    /**
     * To create a table in Falcon, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the CreateTableResponse response from the API call
     */
    public CompletableFuture<CreateTableResponse> restapiV2CreateTableAsync(
            final TspublicRestV2DatabaseTableCreateRequest body) {
        try { 
            return prepareRestapiV2CreateTableRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2CreateTable.
     */
    private ApiCall<CreateTableResponse, ApiException> prepareRestapiV2CreateTableRequest(
            final TspublicRestV2DatabaseTableCreateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<CreateTableResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/database/table/create")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CreateTableResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To run a TQL statement in Falcon, use this endpoint. You can run only following type of
     * statements - Table DDL alter and Table rows update and delete.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Object> restapiV2RunQuery(
            final TspublicRestV2DatabaseTableRunqueryRequest body) throws ApiException, IOException {
        return prepareRestapiV2RunQueryRequest(body).execute();
    }

    /**
     * To run a TQL statement in Falcon, use this endpoint. You can run only following type of
     * statements - Table DDL alter and Table rows update and delete.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of Object response from the API call
     */
    public CompletableFuture<List<Object>> restapiV2RunQueryAsync(
            final TspublicRestV2DatabaseTableRunqueryRequest body) {
        try { 
            return prepareRestapiV2RunQueryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2RunQuery.
     */
    private ApiCall<List<Object>, ApiException> prepareRestapiV2RunQueryRequest(
            final TspublicRestV2DatabaseTableRunqueryRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<List<Object>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/database/table/runquery")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Object[].class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}