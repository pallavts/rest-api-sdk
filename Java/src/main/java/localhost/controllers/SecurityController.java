/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.PrincipalSearchResponse;
import localhost.models.SecurityPermissionResponse;
import localhost.models.TspublicRestV2SecurityPermissionPrincipalSearchRequest;
import localhost.models.TspublicRestV2SecurityPermissionTsobjectSearchRequest;
import localhost.models.TspublicRestV2SecurityShareTsobjectRequest;
import localhost.models.TspublicRestV2SecurityShareVisualizationRequest;
import localhost.models.Type7Enum;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SecurityController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SecurityController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To list the permissions for user and user groups on an object, use this endpoint. The
     * response will include only those users and groups with have either VIEW OR MODIFY permission.
     * You can optionally see the permission on the dependent objects as well by enabling
     * includeDependent field.
     * @param  id  Required parameter: GUID of the metadata object for which the permission needs to
     *         be obtained.
     * @param  type  Required parameter: Type of metadata object. Valid values:
     *         Liveboard|Answer|DataObject|Column
     * @param  includeDependent  Optional parameter: When this field is set to true, the API returns
     *         the permission details for the dependent objects for the the object included in the
     *         request
     * @return    Returns the SecurityPermissionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SecurityPermissionResponse restapiV2GetPermissionOnObject(
            final String id,
            final Type7Enum type,
            final Boolean includeDependent) throws ApiException, IOException {
        return prepareRestapiV2GetPermissionOnObjectRequest(id, type, includeDependent).execute();
    }

    /**
     * To list the permissions for user and user groups on an object, use this endpoint. The
     * response will include only those users and groups with have either VIEW OR MODIFY permission.
     * You can optionally see the permission on the dependent objects as well by enabling
     * includeDependent field.
     * @param  id  Required parameter: GUID of the metadata object for which the permission needs to
     *         be obtained.
     * @param  type  Required parameter: Type of metadata object. Valid values:
     *         Liveboard|Answer|DataObject|Column
     * @param  includeDependent  Optional parameter: When this field is set to true, the API returns
     *         the permission details for the dependent objects for the the object included in the
     *         request
     * @return    Returns the SecurityPermissionResponse response from the API call
     */
    public CompletableFuture<SecurityPermissionResponse> restapiV2GetPermissionOnObjectAsync(
            final String id,
            final Type7Enum type,
            final Boolean includeDependent) {
        try { 
            return prepareRestapiV2GetPermissionOnObjectRequest(id, type, includeDependent).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetPermissionOnObject.
     */
    private ApiCall<SecurityPermissionResponse, ApiException> prepareRestapiV2GetPermissionOnObjectRequest(
            final String id,
            final Type7Enum type,
            final Boolean includeDependent) throws IOException {
        return new ApiCall.Builder<SecurityPermissionResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/security/permission/tsobject")
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("includeDependent")
                                .value(includeDependent).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SecurityPermissionResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * Use this endpoint to list the objects on which a user or user group has permission. The
     * response will include only those objects on which the user or user group has either VIEW OR
     * MODIFY permission. Requires administration privilege.
     * @param  id  Optional parameter: GUID of the user or user group for which the object
     *         permission needs to be obtained
     * @param  name  Optional parameter: Name of the ser or user group for which the object
     *         permission needs to be obtained
     * @return    Returns the PrincipalSearchResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public PrincipalSearchResponse restapiV2GetPermissionForPrincipal(
            final String id,
            final String name) throws ApiException, IOException {
        return prepareRestapiV2GetPermissionForPrincipalRequest(id, name).execute();
    }

    /**
     * Use this endpoint to list the objects on which a user or user group has permission. The
     * response will include only those objects on which the user or user group has either VIEW OR
     * MODIFY permission. Requires administration privilege.
     * @param  id  Optional parameter: GUID of the user or user group for which the object
     *         permission needs to be obtained
     * @param  name  Optional parameter: Name of the ser or user group for which the object
     *         permission needs to be obtained
     * @return    Returns the PrincipalSearchResponse response from the API call
     */
    public CompletableFuture<PrincipalSearchResponse> restapiV2GetPermissionForPrincipalAsync(
            final String id,
            final String name) {
        try { 
            return prepareRestapiV2GetPermissionForPrincipalRequest(id, name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetPermissionForPrincipal.
     */
    private ApiCall<PrincipalSearchResponse, ApiException> prepareRestapiV2GetPermissionForPrincipalRequest(
            final String id,
            final String name) throws IOException {
        return new ApiCall.Builder<PrincipalSearchResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/security/permission/principal")
                        .queryParam(param -> param.key("id")
                                .value(id).isRequired(false))
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, PrincipalSearchResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically share ThoughtSpot objects with another user or user group, use this
     * endpoint. When you share an object like a Liveboard or visualization, a notification with a
     * live link is sent to the user. When the users access this object, they can view the last
     * saved version of the object.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2ShareObject(
            final TspublicRestV2SecurityShareTsobjectRequest body) throws ApiException, IOException {
        return prepareRestapiV2ShareObjectRequest(body).execute();
    }

    /**
     * To programmatically share ThoughtSpot objects with another user or user group, use this
     * endpoint. When you share an object like a Liveboard or visualization, a notification with a
     * live link is sent to the user. When the users access this object, they can view the last
     * saved version of the object.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2ShareObjectAsync(
            final TspublicRestV2SecurityShareTsobjectRequest body) {
        try { 
            return prepareRestapiV2ShareObjectRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ShareObject.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2ShareObjectRequest(
            final TspublicRestV2SecurityShareTsobjectRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/security/share/tsobject")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * If you want to share a specific visualization from a Liveboard with another user or user
     * group, then use this endpoint. Requires privilege to share the visualization.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2ShareVisualization(
            final TspublicRestV2SecurityShareVisualizationRequest body) throws ApiException, IOException {
        return prepareRestapiV2ShareVisualizationRequest(body).execute();
    }

    /**
     * If you want to share a specific visualization from a Liveboard with another user or user
     * group, then use this endpoint. Requires privilege to share the visualization.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2ShareVisualizationAsync(
            final TspublicRestV2SecurityShareVisualizationRequest body) {
        try { 
            return prepareRestapiV2ShareVisualizationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ShareVisualization.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2ShareVisualizationRequest(
            final TspublicRestV2SecurityShareVisualizationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/security/share/visualization")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To list the permissions for user and user groups on a list of objects, use this endpoint. The
     * response will include only those users and groups with have either VIEW OR MODIFY permission.
     * You can either provide list of object ids or type of objects to list the permissions for. One
     * of these inputs is mandatory. If both are provided then only object ids will be considred.
     * You can optionally provide users or user groups for which the persmission needs to be
     * displayed. You can optionally see the permission on the dependent objects as well by enabling
     * includeDependent field. Requires administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of SecurityPermissionResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<SecurityPermissionResponse> restapiV2SearchPermissionOnObjects(
            final TspublicRestV2SecurityPermissionTsobjectSearchRequest body) throws ApiException, IOException {
        return prepareRestapiV2SearchPermissionOnObjectsRequest(body).execute();
    }

    /**
     * To list the permissions for user and user groups on a list of objects, use this endpoint. The
     * response will include only those users and groups with have either VIEW OR MODIFY permission.
     * You can either provide list of object ids or type of objects to list the permissions for. One
     * of these inputs is mandatory. If both are provided then only object ids will be considred.
     * You can optionally provide users or user groups for which the persmission needs to be
     * displayed. You can optionally see the permission on the dependent objects as well by enabling
     * includeDependent field. Requires administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of SecurityPermissionResponse response from the API call
     */
    public CompletableFuture<List<SecurityPermissionResponse>> restapiV2SearchPermissionOnObjectsAsync(
            final TspublicRestV2SecurityPermissionTsobjectSearchRequest body) {
        try { 
            return prepareRestapiV2SearchPermissionOnObjectsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SearchPermissionOnObjects.
     */
    private ApiCall<List<SecurityPermissionResponse>, ApiException> prepareRestapiV2SearchPermissionOnObjectsRequest(
            final TspublicRestV2SecurityPermissionTsobjectSearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<List<SecurityPermissionResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/security/permission/tsobject/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SecurityPermissionResponse[].class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To list the permissions for user and user groups on a list of objects, use this endpoint. The
     * response will include only those users and groups with have either VIEW OR MODIFY permission.
     * You can either provide list of object ids or type of objects to list the permissions for. One
     * of these inputs is mandatory. If both are provided then only object ids will be considred.
     * You can optionally provide users or user groups for which the persmission needs to be
     * displayed. You can optionally see the permission on the dependent objects as well by enabling
     * includeDependent field. Requires administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of PrincipalSearchResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<PrincipalSearchResponse> restapiV2SearchPermissionForPrincipals(
            final TspublicRestV2SecurityPermissionPrincipalSearchRequest body) throws ApiException, IOException {
        return prepareRestapiV2SearchPermissionForPrincipalsRequest(body).execute();
    }

    /**
     * To list the permissions for user and user groups on a list of objects, use this endpoint. The
     * response will include only those users and groups with have either VIEW OR MODIFY permission.
     * You can either provide list of object ids or type of objects to list the permissions for. One
     * of these inputs is mandatory. If both are provided then only object ids will be considred.
     * You can optionally provide users or user groups for which the persmission needs to be
     * displayed. You can optionally see the permission on the dependent objects as well by enabling
     * includeDependent field. Requires administration privilege.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of PrincipalSearchResponse response from the API call
     */
    public CompletableFuture<List<PrincipalSearchResponse>> restapiV2SearchPermissionForPrincipalsAsync(
            final TspublicRestV2SecurityPermissionPrincipalSearchRequest body) {
        try { 
            return prepareRestapiV2SearchPermissionForPrincipalsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SearchPermissionForPrincipals.
     */
    private ApiCall<List<PrincipalSearchResponse>, ApiException> prepareRestapiV2SearchPermissionForPrincipalsRequest(
            final TspublicRestV2SecurityPermissionPrincipalSearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<List<PrincipalSearchResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/security/permission/principal/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        PrincipalSearchResponse[].class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}