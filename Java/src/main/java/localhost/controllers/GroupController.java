/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.GroupResponse;
import localhost.models.TspublicRestV2GroupAddgroupRequest;
import localhost.models.TspublicRestV2GroupAddprivilegeRequest;
import localhost.models.TspublicRestV2GroupAdduserRequest;
import localhost.models.TspublicRestV2GroupCreateRequest;
import localhost.models.TspublicRestV2GroupRemovegroupRequest;
import localhost.models.TspublicRestV2GroupRemoveprivilegeRequest;
import localhost.models.TspublicRestV2GroupRemoveuserRequest;
import localhost.models.TspublicRestV2GroupSearchRequest;
import localhost.models.TspublicRestV2GroupUpdateRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class GroupController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public GroupController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To get the details of a specific group by name or id, use this endpoint. At Least one value
     * needed. When both are given id will be considered to fetch user information.
     * @param  name  Optional parameter: Name of the group
     * @param  id  Optional parameter: The GUID of the group to query.
     * @return    Returns the GroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GroupResponse restapiV2GetGroup(
            final String name,
            final String id) throws ApiException, IOException {
        return prepareRestapiV2GetGroupRequest(name, id).execute();
    }

    /**
     * To get the details of a specific group by name or id, use this endpoint. At Least one value
     * needed. When both are given id will be considered to fetch user information.
     * @param  name  Optional parameter: Name of the group
     * @param  id  Optional parameter: The GUID of the group to query.
     * @return    Returns the GroupResponse response from the API call
     */
    public CompletableFuture<GroupResponse> restapiV2GetGroupAsync(
            final String name,
            final String id) {
        try { 
            return prepareRestapiV2GetGroupRequest(name, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetGroup.
     */
    private ApiCall<GroupResponse, ApiException> prepareRestapiV2GetGroupRequest(
            final String name,
            final String id) throws IOException {
        return new ApiCall.Builder<GroupResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group")
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .queryParam(param -> param.key("id")
                                .value(id).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GroupResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically create a group in the ThoughtSpot system, use this API endpoint. Using
     * this API, you can create a group and assign privileges and users. For ease of user management
     * and access control, ThoughtSpot administrators can create groups and assign privileges to
     * these groups. The privileges determine the actions that the users belonging to a group are
     * allowed to do. ThoughtSpot also has a default group called ALL_GROUP. When you create new
     * group in ThoughtSpot, they are automatically added to ALL_GROUP. You cannot delete the
     * ALL_GROUP or remove members from it.
     * @param  body  Required parameter: Example:
     * @return    Returns the GroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GroupResponse restapiV2CreateGroup(
            final TspublicRestV2GroupCreateRequest body) throws ApiException, IOException {
        return prepareRestapiV2CreateGroupRequest(body).execute();
    }

    /**
     * To programmatically create a group in the ThoughtSpot system, use this API endpoint. Using
     * this API, you can create a group and assign privileges and users. For ease of user management
     * and access control, ThoughtSpot administrators can create groups and assign privileges to
     * these groups. The privileges determine the actions that the users belonging to a group are
     * allowed to do. ThoughtSpot also has a default group called ALL_GROUP. When you create new
     * group in ThoughtSpot, they are automatically added to ALL_GROUP. You cannot delete the
     * ALL_GROUP or remove members from it.
     * @param  body  Required parameter: Example:
     * @return    Returns the GroupResponse response from the API call
     */
    public CompletableFuture<GroupResponse> restapiV2CreateGroupAsync(
            final TspublicRestV2GroupCreateRequest body) {
        try { 
            return prepareRestapiV2CreateGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2CreateGroup.
     */
    private ApiCall<GroupResponse, ApiException> prepareRestapiV2CreateGroupRequest(
            final TspublicRestV2GroupCreateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GroupResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/create")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GroupResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * You can use this endpoint to programmatically modify an existing user account. To modify a
     * user, you require admin user privileges. At least one of User Id or username is mandatory.
     * When both are given, then user id will be considered and username will be updated.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2UpdateGroup(
            final TspublicRestV2GroupUpdateRequest body) throws ApiException, IOException {
        return prepareRestapiV2UpdateGroupRequest(body).execute();
    }

    /**
     * You can use this endpoint to programmatically modify an existing user account. To modify a
     * user, you require admin user privileges. At least one of User Id or username is mandatory.
     * When both are given, then user id will be considered and username will be updated.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2UpdateGroupAsync(
            final TspublicRestV2GroupUpdateRequest body) {
        try { 
            return prepareRestapiV2UpdateGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2UpdateGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2UpdateGroupRequest(
            final TspublicRestV2GroupUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/update")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To remove a group from the ThoughtSpot system, send a DELETE request to this endpoint. At
     * Least one value needed. When both are given user id will be considered to fetch user
     * information.
     * @param  name  Optional parameter: Name of the group.
     * @param  id  Optional parameter: The GUID of the group
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2DeleteGroup(
            final String name,
            final String id) throws ApiException, IOException {
        return prepareRestapiV2DeleteGroupRequest(name, id).execute();
    }

    /**
     * To remove a group from the ThoughtSpot system, send a DELETE request to this endpoint. At
     * Least one value needed. When both are given user id will be considered to fetch user
     * information.
     * @param  name  Optional parameter: Name of the group.
     * @param  id  Optional parameter: The GUID of the group
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2DeleteGroupAsync(
            final String name,
            final String id) {
        try { 
            return prepareRestapiV2DeleteGroupRequest(name, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2DeleteGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2DeleteGroupRequest(
            final String name,
            final String id) throws IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/delete")
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .queryParam(param -> param.key("id")
                                .value(id).isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically add privileges to an existing group, use API endpoint. When you assign
     * privileges to a group, all the users under to this group inherits the privileges assigned to
     * that group. At least one of id or name of group is required. When both are given user id will
     * be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AddPrivilegesToGroup(
            final TspublicRestV2GroupAddprivilegeRequest body) throws ApiException, IOException {
        return prepareRestapiV2AddPrivilegesToGroupRequest(body).execute();
    }

    /**
     * To programmatically add privileges to an existing group, use API endpoint. When you assign
     * privileges to a group, all the users under to this group inherits the privileges assigned to
     * that group. At least one of id or name of group is required. When both are given user id will
     * be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AddPrivilegesToGroupAsync(
            final TspublicRestV2GroupAddprivilegeRequest body) {
        try { 
            return prepareRestapiV2AddPrivilegesToGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AddPrivilegesToGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AddPrivilegesToGroupRequest(
            final TspublicRestV2GroupAddprivilegeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/addprivilege")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically remove privileges from a group, use API endpoint. The API removes only
     * the privilege association. It does not delete the privilege or group from the Thoughtspot
     * system. At least one of id or name of group is required. When both are given user id will be
     * considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2RemovePrivilegesFromGroup(
            final TspublicRestV2GroupRemoveprivilegeRequest body) throws ApiException, IOException {
        return prepareRestapiV2RemovePrivilegesFromGroupRequest(body).execute();
    }

    /**
     * To programmatically remove privileges from a group, use API endpoint. The API removes only
     * the privilege association. It does not delete the privilege or group from the Thoughtspot
     * system. At least one of id or name of group is required. When both are given user id will be
     * considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2RemovePrivilegesFromGroupAsync(
            final TspublicRestV2GroupRemoveprivilegeRequest body) {
        try { 
            return prepareRestapiV2RemovePrivilegesFromGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2RemovePrivilegesFromGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2RemovePrivilegesFromGroupRequest(
            final TspublicRestV2GroupRemoveprivilegeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/removeprivilege")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically add existing ThoughtSpot users to a group, use this API endpoint. When
     * you assign users to a group, the users inherits the privileges assigned to that group. At
     * least one of id or name of the group is required. When both are given user id will be
     * considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AddUsersToGroup(
            final TspublicRestV2GroupAdduserRequest body) throws ApiException, IOException {
        return prepareRestapiV2AddUsersToGroupRequest(body).execute();
    }

    /**
     * To programmatically add existing ThoughtSpot users to a group, use this API endpoint. When
     * you assign users to a group, the users inherits the privileges assigned to that group. At
     * least one of id or name of the group is required. When both are given user id will be
     * considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AddUsersToGroupAsync(
            final TspublicRestV2GroupAdduserRequest body) {
        try { 
            return prepareRestapiV2AddUsersToGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AddUsersToGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AddUsersToGroupRequest(
            final TspublicRestV2GroupAdduserRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/adduser")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically remove users from a group, use API endpoint.The API removes only the user
     * association. It does not delete the users or group from the Thoughtspot system. At least one
     * of id or name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2RemoveUsersFromGroup(
            final TspublicRestV2GroupRemoveuserRequest body) throws ApiException, IOException {
        return prepareRestapiV2RemoveUsersFromGroupRequest(body).execute();
    }

    /**
     * To programmatically remove users from a group, use API endpoint.The API removes only the user
     * association. It does not delete the users or group from the Thoughtspot system. At least one
     * of id or name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2RemoveUsersFromGroupAsync(
            final TspublicRestV2GroupRemoveuserRequest body) {
        try { 
            return prepareRestapiV2RemoveUsersFromGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2RemoveUsersFromGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2RemoveUsersFromGroupRequest(
            final TspublicRestV2GroupRemoveuserRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/removeuser")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically add existing groups to a group, use API endpoint. When you assign groups
     * to a group, the group inherits the privileges assigned to those groups. At least one of id or
     * name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AddGroupsToGroup(
            final TspublicRestV2GroupAddgroupRequest body) throws ApiException, IOException {
        return prepareRestapiV2AddGroupsToGroupRequest(body).execute();
    }

    /**
     * To programmatically add existing groups to a group, use API endpoint. When you assign groups
     * to a group, the group inherits the privileges assigned to those groups. At least one of id or
     * name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AddGroupsToGroupAsync(
            final TspublicRestV2GroupAddgroupRequest body) {
        try { 
            return prepareRestapiV2AddGroupsToGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AddGroupsToGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AddGroupsToGroupRequest(
            final TspublicRestV2GroupAddgroupRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/addgroup")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically remove groups from a group, use API endpoint.The API removes only the
     * group association. It does not delete the group from the Thoughtspot system. At least one of
     * id or name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2RemoveGroupsFromGroup(
            final TspublicRestV2GroupRemovegroupRequest body) throws ApiException, IOException {
        return prepareRestapiV2RemoveGroupsFromGroupRequest(body).execute();
    }

    /**
     * To programmatically remove groups from a group, use API endpoint.The API removes only the
     * group association. It does not delete the group from the Thoughtspot system. At least one of
     * id or name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2RemoveGroupsFromGroupAsync(
            final TspublicRestV2GroupRemovegroupRequest body) {
        try { 
            return prepareRestapiV2RemoveGroupsFromGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2RemoveGroupsFromGroup.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2RemoveGroupsFromGroupRequest(
            final TspublicRestV2GroupRemovegroupRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/removegroup")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To get the details of a specific group account or all groups in the ThoughtSpot system, use
     * this end point.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2SearchGroups(
            final TspublicRestV2GroupSearchRequest body) throws ApiException, IOException {
        return prepareRestapiV2SearchGroupsRequest(body).execute();
    }

    /**
     * To get the details of a specific group account or all groups in the ThoughtSpot system, use
     * this end point.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2SearchGroupsAsync(
            final TspublicRestV2GroupSearchRequest body) {
        try { 
            return prepareRestapiV2SearchGroupsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SearchGroups.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2SearchGroupsRequest(
            final TspublicRestV2GroupSearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/group/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}