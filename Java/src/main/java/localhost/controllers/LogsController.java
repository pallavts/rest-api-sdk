/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.LogsResponse;
import localhost.models.TopicEnum;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LogsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LogsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Note: This endpoint is applicable only for SAAS deployments. The ThoughtSpot log streaming
     * service API allows you to programmatically get a security audit event log from the
     * ThoughtSpot system. To use this API, make sure you have admin user privileges. ThoughtSpot
     * cloud deployments allow you to collect security audit events and send them to your Security
     * information and event management (SIEM) application in real-time. These events can help your
     * security operations personnel to detect potential security threats or compromised user
     * accounts in your organization.
     * @param  topic  Required parameter: Type of the log
     * @param  fromEpoch  Optional parameter: The EPOCH time in milliseconds to set the start time
     *         for streaming logs. Example: To set the timestamp as June 1, 2021 8 am, specify
     *         1622534400000.
     * @param  toEpoch  Optional parameter: The EPOCH time in milliseconds to set the end time for
     *         streaming logs. Example: To set the timestamp as July 1, 2021, 8 am, specify
     *         1625126400000.
     * @return    Returns the LogsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LogsResponse restapiV2GetLogEvents(
            final TopicEnum topic,
            final String fromEpoch,
            final String toEpoch) throws ApiException, IOException {
        return prepareRestapiV2GetLogEventsRequest(topic, fromEpoch, toEpoch).execute();
    }

    /**
     * Note: This endpoint is applicable only for SAAS deployments. The ThoughtSpot log streaming
     * service API allows you to programmatically get a security audit event log from the
     * ThoughtSpot system. To use this API, make sure you have admin user privileges. ThoughtSpot
     * cloud deployments allow you to collect security audit events and send them to your Security
     * information and event management (SIEM) application in real-time. These events can help your
     * security operations personnel to detect potential security threats or compromised user
     * accounts in your organization.
     * @param  topic  Required parameter: Type of the log
     * @param  fromEpoch  Optional parameter: The EPOCH time in milliseconds to set the start time
     *         for streaming logs. Example: To set the timestamp as June 1, 2021 8 am, specify
     *         1622534400000.
     * @param  toEpoch  Optional parameter: The EPOCH time in milliseconds to set the end time for
     *         streaming logs. Example: To set the timestamp as July 1, 2021, 8 am, specify
     *         1625126400000.
     * @return    Returns the LogsResponse response from the API call
     */
    public CompletableFuture<LogsResponse> restapiV2GetLogEventsAsync(
            final TopicEnum topic,
            final String fromEpoch,
            final String toEpoch) {
        try { 
            return prepareRestapiV2GetLogEventsRequest(topic, fromEpoch, toEpoch).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetLogEvents.
     */
    private ApiCall<LogsResponse, ApiException> prepareRestapiV2GetLogEventsRequest(
            final TopicEnum topic,
            final String fromEpoch,
            final String toEpoch) throws IOException {
        return new ApiCall.Builder<LogsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/logs/events")
                        .queryParam(param -> param.key("topic")
                                .value((topic != null) ? topic.value() : null))
                        .queryParam(param -> param.key("fromEpoch")
                                .value(fromEpoch).isRequired(false))
                        .queryParam(param -> param.key("toEpoch")
                                .value(toEpoch).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LogsResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}