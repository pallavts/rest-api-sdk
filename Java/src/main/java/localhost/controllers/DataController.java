/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.AnswerQueryResponse;
import localhost.models.LiveboardQueryResponse;
import localhost.models.TspublicRestV2DataAnswerRequest;
import localhost.models.TspublicRestV2DataLiveboardRequest;
import localhost.models.TspublicRestV2DataSearchRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DataController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DataController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To programmatically retrieve data from ThoughtSpot using search query string, use this
     * endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2SearchQueryData(
            final TspublicRestV2DataSearchRequest body) throws ApiException, IOException {
        return prepareRestapiV2SearchQueryDataRequest(body).execute();
    }

    /**
     * To programmatically retrieve data from ThoughtSpot using search query string, use this
     * endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2SearchQueryDataAsync(
            final TspublicRestV2DataSearchRequest body) {
        try { 
            return prepareRestapiV2SearchQueryDataRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SearchQueryData.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2SearchQueryDataRequest(
            final TspublicRestV2DataSearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/data/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To retrieve data related to a Liveboard or visualization from the ThoughtSpot system, you can
     * use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2LiveboardData(
            final TspublicRestV2DataLiveboardRequest body) throws ApiException, IOException {
        return prepareRestapiV2LiveboardDataRequest(body).execute();
    }

    /**
     * To retrieve data related to a Liveboard or visualization from the ThoughtSpot system, you can
     * use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2LiveboardDataAsync(
            final TspublicRestV2DataLiveboardRequest body) {
        try { 
            return prepareRestapiV2LiveboardDataRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2LiveboardData.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2LiveboardDataRequest(
            final TspublicRestV2DataLiveboardRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/data/liveboard")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To retrieve data related to a Answer from the ThoughtSpot system, you can use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2AnswerData(
            final TspublicRestV2DataAnswerRequest body) throws ApiException, IOException {
        return prepareRestapiV2AnswerDataRequest(body).execute();
    }

    /**
     * To retrieve data related to a Answer from the ThoughtSpot system, you can use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2AnswerDataAsync(
            final TspublicRestV2DataAnswerRequest body) {
        try { 
            return prepareRestapiV2AnswerDataRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AnswerData.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2AnswerDataRequest(
            final TspublicRestV2DataAnswerRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/data/answer")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To retrieve the query SQL related to an Answer that is run on the data platform, you can use
     * this endpoint.
     * @param  id  Required parameter: The GUID of the Answer
     * @return    Returns the AnswerQueryResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AnswerQueryResponse restapiV2AnswerQuerySql(
            final String id) throws ApiException, IOException {
        return prepareRestapiV2AnswerQuerySqlRequest(id).execute();
    }

    /**
     * To retrieve the query SQL related to an Answer that is run on the data platform, you can use
     * this endpoint.
     * @param  id  Required parameter: The GUID of the Answer
     * @return    Returns the AnswerQueryResponse response from the API call
     */
    public CompletableFuture<AnswerQueryResponse> restapiV2AnswerQuerySqlAsync(
            final String id) {
        try { 
            return prepareRestapiV2AnswerQuerySqlRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AnswerQuerySql.
     */
    private ApiCall<AnswerQueryResponse, ApiException> prepareRestapiV2AnswerQuerySqlRequest(
            final String id) throws IOException {
        return new ApiCall.Builder<AnswerQueryResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/data/answer/querysql")
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AnswerQueryResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To retrieve the query SQL related to a Visualization in a Liveboard that is run on the data
     * platform, you can use this endpoint.
     * @param  id  Required parameter: The GUID of the Answer
     * @param  vizId  Optional parameter: A JSON array of GUIDs of the visualizations in the
     *         Liveboard.
     * @return    Returns the LiveboardQueryResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LiveboardQueryResponse restapiV2LiveboardQuerySql(
            final String id,
            final List<String> vizId) throws ApiException, IOException {
        return prepareRestapiV2LiveboardQuerySqlRequest(id, vizId).execute();
    }

    /**
     * To retrieve the query SQL related to a Visualization in a Liveboard that is run on the data
     * platform, you can use this endpoint.
     * @param  id  Required parameter: The GUID of the Answer
     * @param  vizId  Optional parameter: A JSON array of GUIDs of the visualizations in the
     *         Liveboard.
     * @return    Returns the LiveboardQueryResponse response from the API call
     */
    public CompletableFuture<LiveboardQueryResponse> restapiV2LiveboardQuerySqlAsync(
            final String id,
            final List<String> vizId) {
        try { 
            return prepareRestapiV2LiveboardQuerySqlRequest(id, vizId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2LiveboardQuerySql.
     */
    private ApiCall<LiveboardQueryResponse, ApiException> prepareRestapiV2LiveboardQuerySqlRequest(
            final String id,
            final List<String> vizId) throws IOException {
        return new ApiCall.Builder<LiveboardQueryResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/data/liveboard/querysql")
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .queryParam(param -> param.key("vizId")
                                .value(vizId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LiveboardQueryResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}