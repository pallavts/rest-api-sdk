/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost.ApiHelper;
import localhost.AuthManager;
import localhost.Configuration;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.Headers;
import localhost.http.client.HttpCallback;
import localhost.http.client.HttpClient;
import localhost.http.client.HttpContext;
import localhost.http.request.HttpRequest;
import localhost.http.response.HttpResponse;
import localhost.http.response.HttpStringResponse;
import localhost.models.TspublicRestV2CustomactionAssociationUpdateRequest;
import localhost.models.TspublicRestV2CustomactionCreateRequest;
import localhost.models.TspublicRestV2CustomactionSearchRequest;
import localhost.models.TspublicRestV2CustomactionUpdateRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CustomActionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public CustomActionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public CustomActionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * To get details of a specific custom action configured in the ThoughtSpot system, use this
     * endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object getCustomAction(
            final String id) throws ApiException, IOException {
        HttpRequest request = buildGetCustomActionRequest(id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCustomActionResponse(context);
    }

    /**
     * To get details of a specific custom action configured in the ThoughtSpot system, use this
     * endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> getCustomActionAsync(
            final String id) {
        return makeHttpCallAsync(() -> buildGetCustomActionRequest(id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetCustomActionResponse(context));
    }

    /**
     * Builds the HttpRequest object for getCustomAction.
     */
    private HttpRequest buildGetCustomActionRequest(
            final String id) {
        //validating required parameters
        if (null == id) {
            throw new NullPointerException("The parameter \"id\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getCustomAction.
     * @return An object of type Object
     */
    private Object handleGetCustomActionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * To programmatically create custom actions on ThoughtSpot clusters that support embedding
     * configuration, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object createCustomAction(
            final TspublicRestV2CustomactionCreateRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateCustomActionRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateCustomActionResponse(context);
    }

    /**
     * To programmatically create custom actions on ThoughtSpot clusters that support embedding
     * configuration, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> createCustomActionAsync(
            final TspublicRestV2CustomactionCreateRequest body) {
        return makeHttpCallAsync(() -> buildCreateCustomActionRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateCustomActionResponse(context));
    }

    /**
     * Builds the HttpRequest object for createCustomAction.
     */
    private HttpRequest buildCreateCustomActionRequest(
            final TspublicRestV2CustomactionCreateRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction/create");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createCustomAction.
     * @return An object of type Object
     */
    private Object handleCreateCustomActionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * To programmatically edit an existing custom action, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object updateCustomAction(
            final TspublicRestV2CustomactionUpdateRequest body) throws ApiException, IOException {
        HttpRequest request = buildUpdateCustomActionRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateCustomActionResponse(context);
    }

    /**
     * To programmatically edit an existing custom action, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> updateCustomActionAsync(
            final TspublicRestV2CustomactionUpdateRequest body) {
        return makeHttpCallAsync(() -> buildUpdateCustomActionRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateCustomActionResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateCustomAction.
     */
    private HttpRequest buildUpdateCustomActionRequest(
            final TspublicRestV2CustomactionUpdateRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction/update");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateCustomAction.
     * @return An object of type Object
     */
    private Object handleUpdateCustomActionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * To programmatically delete a custom action, use this endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object deleteCustomAction(
            final String id) throws ApiException, IOException {
        HttpRequest request = buildDeleteCustomActionRequest(id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteCustomActionResponse(context);
    }

    /**
     * To programmatically delete a custom action, use this endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> deleteCustomActionAsync(
            final String id) {
        return makeHttpCallAsync(() -> buildDeleteCustomActionRequest(id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteCustomActionResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteCustomAction.
     */
    private HttpRequest buildDeleteCustomActionRequest(
            final String id) {
        //validating required parameters
        if (null == id) {
            throw new NullPointerException("The parameter \"id\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction/delete");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteCustomAction.
     * @return An object of type Object
     */
    private Object handleDeleteCustomActionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * To search custom actions available on a ThoughtSpot instance, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object searchCustomAction(
            final TspublicRestV2CustomactionSearchRequest body) throws ApiException, IOException {
        HttpRequest request = buildSearchCustomActionRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSearchCustomActionResponse(context);
    }

    /**
     * To search custom actions available on a ThoughtSpot instance, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> searchCustomActionAsync(
            final TspublicRestV2CustomactionSearchRequest body) {
        return makeHttpCallAsync(() -> buildSearchCustomActionRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleSearchCustomActionResponse(context));
    }

    /**
     * Builds the HttpRequest object for searchCustomAction.
     */
    private HttpRequest buildSearchCustomActionRequest(
            final TspublicRestV2CustomactionSearchRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction/search");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for searchCustomAction.
     * @return An object of type Object
     */
    private Object handleSearchCustomActionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * ThoughtSpot supports associating custom actions to Liveboards, answers, and worksheets. To
     * get the details of the ThoughtSpot objects associated with a custom action, use this
     * endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object getCustomActionAssociation(
            final String id) throws ApiException, IOException {
        HttpRequest request = buildGetCustomActionAssociationRequest(id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCustomActionAssociationResponse(context);
    }

    /**
     * ThoughtSpot supports associating custom actions to Liveboards, answers, and worksheets. To
     * get the details of the ThoughtSpot objects associated with a custom action, use this
     * endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> getCustomActionAssociationAsync(
            final String id) {
        return makeHttpCallAsync(() -> buildGetCustomActionAssociationRequest(id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetCustomActionAssociationResponse(context));
    }

    /**
     * Builds the HttpRequest object for getCustomActionAssociation.
     */
    private HttpRequest buildGetCustomActionAssociationRequest(
            final String id) {
        //validating required parameters
        if (null == id) {
            throw new NullPointerException("The parameter \"id\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction/association");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getCustomActionAssociation.
     * @return An object of type Object
     */
    private Object handleGetCustomActionAssociationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * To programmatically associate a custom action to a ThoughtSpot object, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object updateCustomActionAssociation(
            final TspublicRestV2CustomactionAssociationUpdateRequest body) throws ApiException, IOException {
        HttpRequest request = buildUpdateCustomActionAssociationRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateCustomActionAssociationResponse(context);
    }

    /**
     * To programmatically associate a custom action to a ThoughtSpot object, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> updateCustomActionAssociationAsync(
            final TspublicRestV2CustomactionAssociationUpdateRequest body) {
        return makeHttpCallAsync(() -> buildUpdateCustomActionAssociationRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateCustomActionAssociationResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateCustomActionAssociation.
     */
    private HttpRequest buildUpdateCustomActionAssociationRequest(
            final TspublicRestV2CustomactionAssociationUpdateRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customaction/association/update");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateCustomActionAssociation.
     * @return An object of type Object
     */
    private Object handleUpdateCustomActionAssociationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

    /**
     * To remove custom action associations to ThoughtSpot objects, use this endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @param  association  Required parameter: A JSON map of the attributes with association of the
     *         action to ThoughtSpot object ID Example:
     *         {"id":"0dbd5b3a-84c1-4407-9803-cf07d67e6fcf","name":"My worksheet
     *         action","version":"v2","type":"URL","detail":{"link":"https://unpkg.com
     *         ","function":"my-worksheet-action","authSelect":"NONE","authToken":"","encodeUser":"","apiKey":"X-API-KEY","apiValue":"","additionalUrlHeaders":"{}"},"actionAssociationMap":{"WORKSHEET":{"2b9d083a-275c-4984-9cfe-90b036affa17":{"enabled":"true","context":"PRIMARY"}}},"context":"NONE","availability":[
     *         ],"userGroupList":["d0326b56-ef23-4c8a-8327-a30e99bcc72b"]}
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object deleteCustomActionAssociation(
            final String id,
            final String association) throws ApiException, IOException {
        HttpRequest request = buildDeleteCustomActionAssociationRequest(id, association);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteCustomActionAssociationResponse(context);
    }

    /**
     * To remove custom action associations to ThoughtSpot objects, use this endpoint.
     * @param  id  Required parameter: GUID of the custom action
     * @param  association  Required parameter: A JSON map of the attributes with association of the
     *         action to ThoughtSpot object ID Example:
     *         {"id":"0dbd5b3a-84c1-4407-9803-cf07d67e6fcf","name":"My worksheet
     *         action","version":"v2","type":"URL","detail":{"link":"https://unpkg.com
     *         ","function":"my-worksheet-action","authSelect":"NONE","authToken":"","encodeUser":"","apiKey":"X-API-KEY","apiValue":"","additionalUrlHeaders":"{}"},"actionAssociationMap":{"WORKSHEET":{"2b9d083a-275c-4984-9cfe-90b036affa17":{"enabled":"true","context":"PRIMARY"}}},"context":"NONE","availability":[
     *         ],"userGroupList":["d0326b56-ef23-4c8a-8327-a30e99bcc72b"]}
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> deleteCustomActionAssociationAsync(
            final String id,
            final String association) {
        return makeHttpCallAsync(() -> buildDeleteCustomActionAssociationRequest(id, association),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteCustomActionAssociationResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteCustomActionAssociation.
     */
    private HttpRequest buildDeleteCustomActionAssociationRequest(
            final String id,
            final String association) {
        //validating required parameters
        if (null == id) {
            throw new NullPointerException("The parameter \"id\" is a required parameter and cannot be null.");
        }

        if (null == association) {
            throw new NullPointerException("The parameter \"association\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/customactions/association/delete");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);
        queryParameters.put("association", association);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteCustomActionAssociation.
     * @return An object of type Object
     */
    private Object handleDeleteCustomActionAssociationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

}