/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.PdfOptionsInput;
import localhost.models.Type16Enum;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ReportController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ReportController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To programmatically download Answer data as a file, use this endpoint. The PDF will download
     * data in the tabular format even if Answer is saved as chart.
     * @param  id  Required parameter: GUID of the Answer to download.
     * @param  type  Required parameter: Type of file to be generated.
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2AnswerReport(
            final String id,
            final Type16Enum type) throws ApiException, IOException {
        return prepareRestapiV2AnswerReportRequest(id, type).execute();
    }

    /**
     * To programmatically download Answer data as a file, use this endpoint. The PDF will download
     * data in the tabular format even if Answer is saved as chart.
     * @param  id  Required parameter: GUID of the Answer to download.
     * @param  type  Required parameter: Type of file to be generated.
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2AnswerReportAsync(
            final String id,
            final Type16Enum type) {
        try { 
            return prepareRestapiV2AnswerReportRequest(id, type).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AnswerReport.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2AnswerReportRequest(
            final String id,
            final Type16Enum type) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/report/answer")
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically download Liveboard data or specific Visualization data from Liveboard as
     * a file, use this endpoint.
     * @param  type  Required parameter: Type of file to be generated. Valid values:
     *         CSV/XLSX/PDF/PNG.
     * @param  id  Optional parameter: GUID of the Liveboard to download. This field is considered
     *         only when no input is provided for transientContent field.
     * @param  vizId  Optional parameter: JSON Array of GUIDs of the visualizations in the Liveboard
     *         to be included in the downloaded file. For CSV, XLSX and PNG file download,
     *         visualization id is mandatory. CSV and XLSX is valid only for visualization of type
     *         table and PNG is valid for charts. Only one value will be accepted for these formats.
     *         If multiple values are provided then first value in the array will be considered.
     * @param  transientContent  Optional parameter: If you have embedded ThoughtSpot in your host
     *         application, and you want to download Liveboards with unsaved changes as a file, pass
     *         the transient content from the browser fetch request, using the
     *         getExportRequestForCurrentPinboard method. For more information, see
     *         https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard.
     * @param  runtimeFilter  Optional parameter: If you have embedded ThoughtSpot in your host
     *         application, and you want to download Liveboards with unsaved changes as a file, pass
     *         the transient content from the browser fetch request, using the
     *         getExportRequestForCurrentPinboard method. For more information, see
     *         https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard
     *         .
     * @param  runtimeSort  Optional parameter: JSON object which provides columns to sort the data
     *         at the time of data retrieval. Example:
     *         {"sortCol1":"region","asc1":true,"sortCol2":"date"} For more information, see
     *         https://developers.thoughtspot.com/docs/?pageid=runtime-filters
     * @param  pdfOptions  Optional parameter: Additional options that are applicable for PDF type.
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2LiveboardReport(
            final Type16Enum type,
            final String id,
            final List<String> vizId,
            final String transientContent,
            final String runtimeFilter,
            final String runtimeSort,
            final PdfOptionsInput pdfOptions) throws ApiException, IOException {
        return prepareRestapiV2LiveboardReportRequest(type, id, vizId, transientContent,
                runtimeFilter, runtimeSort, pdfOptions).execute();
    }

    /**
     * To programmatically download Liveboard data or specific Visualization data from Liveboard as
     * a file, use this endpoint.
     * @param  type  Required parameter: Type of file to be generated. Valid values:
     *         CSV/XLSX/PDF/PNG.
     * @param  id  Optional parameter: GUID of the Liveboard to download. This field is considered
     *         only when no input is provided for transientContent field.
     * @param  vizId  Optional parameter: JSON Array of GUIDs of the visualizations in the Liveboard
     *         to be included in the downloaded file. For CSV, XLSX and PNG file download,
     *         visualization id is mandatory. CSV and XLSX is valid only for visualization of type
     *         table and PNG is valid for charts. Only one value will be accepted for these formats.
     *         If multiple values are provided then first value in the array will be considered.
     * @param  transientContent  Optional parameter: If you have embedded ThoughtSpot in your host
     *         application, and you want to download Liveboards with unsaved changes as a file, pass
     *         the transient content from the browser fetch request, using the
     *         getExportRequestForCurrentPinboard method. For more information, see
     *         https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard.
     * @param  runtimeFilter  Optional parameter: If you have embedded ThoughtSpot in your host
     *         application, and you want to download Liveboards with unsaved changes as a file, pass
     *         the transient content from the browser fetch request, using the
     *         getExportRequestForCurrentPinboard method. For more information, see
     *         https://developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-pinboard
     *         .
     * @param  runtimeSort  Optional parameter: JSON object which provides columns to sort the data
     *         at the time of data retrieval. Example:
     *         {"sortCol1":"region","asc1":true,"sortCol2":"date"} For more information, see
     *         https://developers.thoughtspot.com/docs/?pageid=runtime-filters
     * @param  pdfOptions  Optional parameter: Additional options that are applicable for PDF type.
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2LiveboardReportAsync(
            final Type16Enum type,
            final String id,
            final List<String> vizId,
            final String transientContent,
            final String runtimeFilter,
            final String runtimeSort,
            final PdfOptionsInput pdfOptions) {
        try { 
            return prepareRestapiV2LiveboardReportRequest(type, id, vizId, transientContent, runtimeFilter,
            runtimeSort, pdfOptions).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2LiveboardReport.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2LiveboardReportRequest(
            final Type16Enum type,
            final String id,
            final List<String> vizId,
            final String transientContent,
            final String runtimeFilter,
            final String runtimeSort,
            final PdfOptionsInput pdfOptions) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/report/liveboard")
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("id")
                                .value(id).isRequired(false))
                        .queryParam(param -> param.key("vizId")
                                .value(vizId).isRequired(false))
                        .queryParam(param -> param.key("transientContent")
                                .value(transientContent).isRequired(false))
                        .queryParam(param -> param.key("runtimeFilter")
                                .value(runtimeFilter).isRequired(false))
                        .queryParam(param -> param.key("runtimeSort")
                                .value(runtimeSort).isRequired(false))
                        .queryParam(param -> param.key("pdfOptions")
                                .value(pdfOptions).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}