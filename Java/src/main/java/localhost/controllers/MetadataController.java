/*
 * ThoughtSpotPublicRESTAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost.ApiHelper;
import localhost.Server;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.request.HttpMethod;
import localhost.models.HomeLiveboardResponse;
import localhost.models.MetadataTagResponse;
import localhost.models.TspublicRestV2MetadataDependencyRequest;
import localhost.models.TspublicRestV2MetadataDetailSearchRequest;
import localhost.models.TspublicRestV2MetadataFavoriteAssignRequest;
import localhost.models.TspublicRestV2MetadataFavoriteUnassignRequest;
import localhost.models.TspublicRestV2MetadataHeaderSearchRequest;
import localhost.models.TspublicRestV2MetadataHomeliveboardAssignRequest;
import localhost.models.TspublicRestV2MetadataHomeliveboardUnassignRequest;
import localhost.models.TspublicRestV2MetadataTagAssignRequest;
import localhost.models.TspublicRestV2MetadataTagCreateRequest;
import localhost.models.TspublicRestV2MetadataTagUnassignRequest;
import localhost.models.TspublicRestV2MetadataTagUpdateRequest;
import localhost.models.TspublicRestV2MetadataTmlExportRequest;
import localhost.models.TspublicRestV2MetadataTmlImportRequest;
import localhost.models.Type4Enum;
import localhost.models.Type5Enum;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MetadataController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public MetadataController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * To get details of a specific tag, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @param  name  Optional parameter: Name of the tag
     * @param  id  Optional parameter: The GUID of the tag
     * @return    Returns the MetadataTagResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MetadataTagResponse restapiV2GetTag(
            final String name,
            final String id) throws ApiException, IOException {
        return prepareRestapiV2GetTagRequest(name, id).execute();
    }

    /**
     * To get details of a specific tag, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @param  name  Optional parameter: Name of the tag
     * @param  id  Optional parameter: The GUID of the tag
     * @return    Returns the MetadataTagResponse response from the API call
     */
    public CompletableFuture<MetadataTagResponse> restapiV2GetTagAsync(
            final String name,
            final String id) {
        try { 
            return prepareRestapiV2GetTagRequest(name, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetTag.
     */
    private ApiCall<MetadataTagResponse, ApiException> prepareRestapiV2GetTagRequest(
            final String name,
            final String id) throws IOException {
        return new ApiCall.Builder<MetadataTagResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tag")
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .queryParam(param -> param.key("id")
                                .value(id).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, MetadataTagResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To get the name and id of liveboard that is set as a home liveboard for a user, use this
     * endpoint. At least one of user id or username is required. When both are given, then id will
     * be considered.
     * @param  userName  Optional parameter: Name of the tag
     * @param  userId  Optional parameter: The GUID of the tag
     * @return    Returns the HomeLiveboardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public HomeLiveboardResponse restapiV2GetHomeLiveboard(
            final String userName,
            final String userId) throws ApiException, IOException {
        return prepareRestapiV2GetHomeLiveboardRequest(userName, userId).execute();
    }

    /**
     * To get the name and id of liveboard that is set as a home liveboard for a user, use this
     * endpoint. At least one of user id or username is required. When both are given, then id will
     * be considered.
     * @param  userName  Optional parameter: Name of the tag
     * @param  userId  Optional parameter: The GUID of the tag
     * @return    Returns the HomeLiveboardResponse response from the API call
     */
    public CompletableFuture<HomeLiveboardResponse> restapiV2GetHomeLiveboardAsync(
            final String userName,
            final String userId) {
        try { 
            return prepareRestapiV2GetHomeLiveboardRequest(userName, userId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetHomeLiveboard.
     */
    private ApiCall<HomeLiveboardResponse, ApiException> prepareRestapiV2GetHomeLiveboardRequest(
            final String userName,
            final String userId) throws IOException {
        return new ApiCall.Builder<HomeLiveboardResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/homeliveboard")
                        .queryParam(param -> param.key("userName")
                                .value(userName).isRequired(false))
                        .queryParam(param -> param.key("userId")
                                .value(userId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, HomeLiveboardResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To get header details for metadata objects, use this endpoint. You can provide as input
     * selective fields to get the data for.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2SearchObjectHeader(
            final TspublicRestV2MetadataHeaderSearchRequest body) throws ApiException, IOException {
        return prepareRestapiV2SearchObjectHeaderRequest(body).execute();
    }

    /**
     * To get header details for metadata objects, use this endpoint. You can provide as input
     * selective fields to get the data for.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2SearchObjectHeaderAsync(
            final TspublicRestV2MetadataHeaderSearchRequest body) {
        try { 
            return prepareRestapiV2SearchObjectHeaderRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SearchObjectHeader.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2SearchObjectHeaderRequest(
            final TspublicRestV2MetadataHeaderSearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/header/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * Use this endpoint to get header details of visualization charts for a given liveboard or
     * answer. At least one of id or name of liveboard or answer is required. When both are given,
     * then id will be considered.
     * @param  id  Required parameter: The GUID of the liveboard or answer
     * @return    Returns the List of Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Object> restapiV2GetObjectVisualizationHeader(
            final String id) throws ApiException, IOException {
        return prepareRestapiV2GetObjectVisualizationHeaderRequest(id).execute();
    }

    /**
     * Use this endpoint to get header details of visualization charts for a given liveboard or
     * answer. At least one of id or name of liveboard or answer is required. When both are given,
     * then id will be considered.
     * @param  id  Required parameter: The GUID of the liveboard or answer
     * @return    Returns the List of Object response from the API call
     */
    public CompletableFuture<List<Object>> restapiV2GetObjectVisualizationHeaderAsync(
            final String id) {
        try { 
            return prepareRestapiV2GetObjectVisualizationHeaderRequest(id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetObjectVisualizationHeader.
     */
    private ApiCall<List<Object>, ApiException> prepareRestapiV2GetObjectVisualizationHeaderRequest(
            final String id) throws IOException {
        return new ApiCall.Builder<List<Object>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/vizheader")
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Object[].class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * Use this endpoint to get full details of metadata objects.
     * @param  type  Required parameter: Type of the metadata object being searched.
     * @param  id  Required parameter: A JSON array of GUIDs of the objects.
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2GetObjectDetail(
            final Type4Enum type,
            final List<String> id) throws ApiException, IOException {
        return prepareRestapiV2GetObjectDetailRequest(type, id).execute();
    }

    /**
     * Use this endpoint to get full details of metadata objects.
     * @param  type  Required parameter: Type of the metadata object being searched.
     * @param  id  Required parameter: A JSON array of GUIDs of the objects.
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2GetObjectDetailAsync(
            final Type4Enum type,
            final List<String> id) {
        try { 
            return prepareRestapiV2GetObjectDetailRequest(type, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetObjectDetail.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2GetObjectDetailRequest(
            final Type4Enum type,
            final List<String> id) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/detail")
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To get header detail of a metadata object, use this endpoint. You can provide as input
     * selective fields to get the data for.
     * @param  type  Required parameter: Type of the metadata object being searched.
     * @param  id  Required parameter: GUID of the metadata object
     * @param  outputFields  Optional parameter: Array of header field names that need to be
     *         included in the header response
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2GetObjectHeader(
            final Type5Enum type,
            final String id,
            final List<String> outputFields) throws ApiException, IOException {
        return prepareRestapiV2GetObjectHeaderRequest(type, id, outputFields).execute();
    }

    /**
     * To get header detail of a metadata object, use this endpoint. You can provide as input
     * selective fields to get the data for.
     * @param  type  Required parameter: Type of the metadata object being searched.
     * @param  id  Required parameter: GUID of the metadata object
     * @param  outputFields  Optional parameter: Array of header field names that need to be
     *         included in the header response
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2GetObjectHeaderAsync(
            final Type5Enum type,
            final String id,
            final List<String> outputFields) {
        try { 
            return prepareRestapiV2GetObjectHeaderRequest(type, id, outputFields).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetObjectHeader.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2GetObjectHeaderRequest(
            final Type5Enum type,
            final String id,
            final List<String> outputFields) throws IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/header")
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .queryParam(param -> param.key("outputFields")
                                .value(outputFields).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * Use this endpoint to get full details of metadata objects.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2SearchObjectDetail(
            final TspublicRestV2MetadataDetailSearchRequest body) throws ApiException, IOException {
        return prepareRestapiV2SearchObjectDetailRequest(body).execute();
    }

    /**
     * Use this endpoint to get full details of metadata objects.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2SearchObjectDetailAsync(
            final TspublicRestV2MetadataDetailSearchRequest body) {
        try { 
            return prepareRestapiV2SearchObjectDetailRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2SearchObjectDetail.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2SearchObjectDetailRequest(
            final TspublicRestV2MetadataDetailSearchRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/detail/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically create tags, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the MetadataTagResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MetadataTagResponse restapiV2CreateTag(
            final TspublicRestV2MetadataTagCreateRequest body) throws ApiException, IOException {
        return prepareRestapiV2CreateTagRequest(body).execute();
    }

    /**
     * To programmatically create tags, use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the MetadataTagResponse response from the API call
     */
    public CompletableFuture<MetadataTagResponse> restapiV2CreateTagAsync(
            final TspublicRestV2MetadataTagCreateRequest body) {
        try { 
            return prepareRestapiV2CreateTagRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2CreateTag.
     */
    private ApiCall<MetadataTagResponse, ApiException> prepareRestapiV2CreateTagRequest(
            final TspublicRestV2MetadataTagCreateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<MetadataTagResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tag/create")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, MetadataTagResponse.class))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically update tags, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2UpdateTag(
            final TspublicRestV2MetadataTagUpdateRequest body) throws ApiException, IOException {
        return prepareRestapiV2UpdateTagRequest(body).execute();
    }

    /**
     * To programmatically update tags, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2UpdateTagAsync(
            final TspublicRestV2MetadataTagUpdateRequest body) {
        try { 
            return prepareRestapiV2UpdateTagRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2UpdateTag.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2UpdateTagRequest(
            final TspublicRestV2MetadataTagUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tag/update")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically delete tags, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @param  name  Optional parameter: Name of the tag
     * @param  id  Optional parameter: The GUID of the tag
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2DeleteTag(
            final String name,
            final String id) throws ApiException, IOException {
        return prepareRestapiV2DeleteTagRequest(name, id).execute();
    }

    /**
     * To programmatically delete tags, use this endpoint. At least one of id or name of tag is
     * required. When both are given, then id will be considered.
     * @param  name  Optional parameter: Name of the tag
     * @param  id  Optional parameter: The GUID of the tag
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2DeleteTagAsync(
            final String name,
            final String id) {
        try { 
            return prepareRestapiV2DeleteTagRequest(name, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2DeleteTag.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2DeleteTagRequest(
            final String name,
            final String id) throws IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tag/delete")
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .queryParam(param -> param.key("id")
                                .value(id).isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically assign tags to a metadata object, such as a liveboard, search answer,
     * table, worksheet, or view, use this endpoint. At least one of id or name of tag is required.
     * When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AssignTag(
            final TspublicRestV2MetadataTagAssignRequest body) throws ApiException, IOException {
        return prepareRestapiV2AssignTagRequest(body).execute();
    }

    /**
     * To programmatically assign tags to a metadata object, such as a liveboard, search answer,
     * table, worksheet, or view, use this endpoint. At least one of id or name of tag is required.
     * When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AssignTagAsync(
            final TspublicRestV2MetadataTagAssignRequest body) {
        try { 
            return prepareRestapiV2AssignTagRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AssignTag.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AssignTagRequest(
            final TspublicRestV2MetadataTagAssignRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tag/assign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically unassign tags to a metadata object, such as a liveboard, search answer,
     * table, worksheet, or view, use this endpoint. At least one of id or name of tag is required.
     * When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2UnassignTag(
            final TspublicRestV2MetadataTagUnassignRequest body) throws ApiException, IOException {
        return prepareRestapiV2UnassignTagRequest(body).execute();
    }

    /**
     * To programmatically unassign tags to a metadata object, such as a liveboard, search answer,
     * table, worksheet, or view, use this endpoint. At least one of id or name of tag is required.
     * When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2UnassignTagAsync(
            final TspublicRestV2MetadataTagUnassignRequest body) {
        try { 
            return prepareRestapiV2UnassignTagRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2UnassignTag.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2UnassignTagRequest(
            final TspublicRestV2MetadataTagUnassignRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tag/unassign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically assign objects to favorites for a given user account, use this endpoint.
     * At least one of user id or username is required. When both are given, then id will be
     * considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AssignFavorite(
            final TspublicRestV2MetadataFavoriteAssignRequest body) throws ApiException, IOException {
        return prepareRestapiV2AssignFavoriteRequest(body).execute();
    }

    /**
     * To programmatically assign objects to favorites for a given user account, use this endpoint.
     * At least one of user id or username is required. When both are given, then id will be
     * considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AssignFavoriteAsync(
            final TspublicRestV2MetadataFavoriteAssignRequest body) {
        try { 
            return prepareRestapiV2AssignFavoriteRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AssignFavorite.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AssignFavoriteRequest(
            final TspublicRestV2MetadataFavoriteAssignRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/favorite/assign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To programmatically unassign objects to favorites for a given user account, use this
     * endpoint. At least one of user id or username is required. When both are given, then id will
     * be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2UnassignFavorite(
            final TspublicRestV2MetadataFavoriteUnassignRequest body) throws ApiException, IOException {
        return prepareRestapiV2UnassignFavoriteRequest(body).execute();
    }

    /**
     * To programmatically unassign objects to favorites for a given user account, use this
     * endpoint. At least one of user id or username is required. When both are given, then id will
     * be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2UnassignFavoriteAsync(
            final TspublicRestV2MetadataFavoriteUnassignRequest body) {
        try { 
            return prepareRestapiV2UnassignFavoriteRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2UnassignFavorite.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2UnassignFavoriteRequest(
            final TspublicRestV2MetadataFavoriteUnassignRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/favorite/unassign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To assign a specific liveboard as a home liveboard for a user, use this endpoint. At least
     * one of user id or username is required. When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2AssignHomeLiveboard(
            final TspublicRestV2MetadataHomeliveboardAssignRequest body) throws ApiException, IOException {
        return prepareRestapiV2AssignHomeLiveboardRequest(body).execute();
    }

    /**
     * To assign a specific liveboard as a home liveboard for a user, use this endpoint. At least
     * one of user id or username is required. When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2AssignHomeLiveboardAsync(
            final TspublicRestV2MetadataHomeliveboardAssignRequest body) {
        try { 
            return prepareRestapiV2AssignHomeLiveboardRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2AssignHomeLiveboard.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2AssignHomeLiveboardRequest(
            final TspublicRestV2MetadataHomeliveboardAssignRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/homeliveboard/assign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To unassign the home liveboard set for a user, use this endpoint. At least one of user id or
     * username is required. When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2UnassignHomeLiveboard(
            final TspublicRestV2MetadataHomeliveboardUnassignRequest body) throws ApiException, IOException {
        return prepareRestapiV2UnassignHomeLiveboardRequest(body).execute();
    }

    /**
     * To unassign the home liveboard set for a user, use this endpoint. At least one of user id or
     * username is required. When both are given, then id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2UnassignHomeLiveboardAsync(
            final TspublicRestV2MetadataHomeliveboardUnassignRequest body) {
        try { 
            return prepareRestapiV2UnassignHomeLiveboardRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2UnassignHomeLiveboard.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2UnassignHomeLiveboardRequest(
            final TspublicRestV2MetadataHomeliveboardUnassignRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/homeliveboard/unassign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To export ThoughtSpot objects represented in ThoughtSpot Modeling Language (TML), use this
     * endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2ExportObjectTML(
            final TspublicRestV2MetadataTmlExportRequest body) throws ApiException, IOException {
        return prepareRestapiV2ExportObjectTMLRequest(body).execute();
    }

    /**
     * To export ThoughtSpot objects represented in ThoughtSpot Modeling Language (TML), use this
     * endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2ExportObjectTMLAsync(
            final TspublicRestV2MetadataTmlExportRequest body) {
        try { 
            return prepareRestapiV2ExportObjectTMLRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ExportObjectTML.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2ExportObjectTMLRequest(
            final TspublicRestV2MetadataTmlExportRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tml/export")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To import ThoughtSpot objects represented in ThoughtSpot Modeling Language (TML), use this
     * endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2ImportObjectTML(
            final TspublicRestV2MetadataTmlImportRequest body) throws ApiException, IOException {
        return prepareRestapiV2ImportObjectTMLRequest(body).execute();
    }

    /**
     * To import ThoughtSpot objects represented in ThoughtSpot Modeling Language (TML), use this
     * endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2ImportObjectTMLAsync(
            final TspublicRestV2MetadataTmlImportRequest body) {
        try { 
            return prepareRestapiV2ImportObjectTMLRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2ImportObjectTML.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2ImportObjectTMLRequest(
            final TspublicRestV2MetadataTmlImportRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/tml/import")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * Use this endpoint to delete the metadata objects.
     * @param  type  Required parameter: Type of the metadata object being searched
     * @param  id  Required parameter: A JSON array of GUIDs of the objects
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean restapiV2DeleteObject(
            final Type4Enum type,
            final List<String> id) throws ApiException, IOException {
        return prepareRestapiV2DeleteObjectRequest(type, id).execute();
    }

    /**
     * Use this endpoint to delete the metadata objects.
     * @param  type  Required parameter: Type of the metadata object being searched
     * @param  id  Required parameter: A JSON array of GUIDs of the objects
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> restapiV2DeleteObjectAsync(
            final Type4Enum type,
            final List<String> id) {
        try { 
            return prepareRestapiV2DeleteObjectRequest(type, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2DeleteObject.
     */
    private ApiCall<Boolean, ApiException> prepareRestapiV2DeleteObjectRequest(
            final Type4Enum type,
            final List<String> id) throws IOException {
        return new ApiCall.Builder<Boolean, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/delete")
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("id")
                                .value(id))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> Boolean.parseBoolean(response))
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }

    /**
     * To query the details of dependent objects and associate objects as dependents, you can use
     * this API. Dependency is defined as relation between referenced and referencing objects. A
     * referencing object is said to have a dependency on a referenced object, if the referenced
     * object cannot be deleted without first deleting the referencing object. For example, consider
     * a worksheet 'W1' that has a derived logical column 'C1' that has a reference to a base
     * logical column 'C2'. This can be shown diagramatically as: W1--&gt;C1--&gt;C2. W1 has a dependency
     * on C2 i.e. W1 is a referencing object and C2 is a referenced object. It is not possible to
     * delete C2 without first deleting W1 because deletion of C2 will be prevented by the
     * relationship between W1's column C1 and C2. Similarly C1 is said to have a dependency on C2
     * i.e. C1 is a referencing object and C2 is a referenced object. It is not possible to delete
     * C2 without first deleting C1.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object restapiV2GetObjectDependency(
            final TspublicRestV2MetadataDependencyRequest body) throws ApiException, IOException {
        return prepareRestapiV2GetObjectDependencyRequest(body).execute();
    }

    /**
     * To query the details of dependent objects and associate objects as dependents, you can use
     * this API. Dependency is defined as relation between referenced and referencing objects. A
     * referencing object is said to have a dependency on a referenced object, if the referenced
     * object cannot be deleted without first deleting the referencing object. For example, consider
     * a worksheet 'W1' that has a derived logical column 'C1' that has a reference to a base
     * logical column 'C2'. This can be shown diagramatically as: W1--&gt;C1--&gt;C2. W1 has a dependency
     * on C2 i.e. W1 is a referencing object and C2 is a referenced object. It is not possible to
     * delete C2 without first deleting W1 because deletion of C2 will be prevented by the
     * relationship between W1's column C1 and C2. Similarly C1 is said to have a dependency on C2
     * i.e. C1 is a referencing object and C2 is a referenced object. It is not possible to delete
     * C2 without first deleting C1.
     * @param  body  Required parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> restapiV2GetObjectDependencyAsync(
            final TspublicRestV2MetadataDependencyRequest body) {
        try { 
            return prepareRestapiV2GetObjectDependencyRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restapiV2GetObjectDependency.
     */
    private ApiCall<Object, ApiException> prepareRestapiV2GetObjectDependencyRequest(
            final TspublicRestV2MetadataDependencyRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tspublic/rest/v2/metadata/dependency")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("500",
                                 ErrorCase.create("Operation failed",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .endpointConfiguration(param -> param
                                .arraySerializationFormat(ArraySerializationFormat.PLAIN
))
                .build();
    }
}