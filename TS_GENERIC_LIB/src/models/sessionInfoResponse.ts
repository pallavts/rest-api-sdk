/**
 * TS Public RestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  SessionDateTimeFormat,
  sessionDateTimeFormatSchema,
} from './sessionDateTimeFormat';
import {
  SessionUserProperties,
  sessionUserPropertiesSchema,
} from './sessionUserProperties';

/** Session Info */
export interface SessionInfoResponse {
  /** Username of the user account for which the session information is returned */
  userName?: string;
  /** A unique display name string for the user */
  userDisplayName?: string;
  /** Email of the user account */
  userEmail?: string;
  /** Date and time of creation of the user account */
  userCreatedTime?: number;
  /** GUID of the user account */
  userGUID?: string;
  /** Indicates if the user account can change the password */
  canChangePassword?: boolean;
  /** Indicates if the user account is system or external user */
  isSystemUser?: boolean;
  /** Group mask of the user account */
  userGroupMask?: number;
  /** Privileges assigned to the user account */
  privileges?: string[];
  /** Expiration time of the token for the user account */
  expirationTime?: number;
  /** Auth token for the user account */
  authToken?: string;
  /** Locale of the token for the user account */
  locale?: string;
  /** Timezone assigned to the user account */
  timezone?: string;
  dateFormat?: SessionDateTimeFormat;
  timeFormat?: SessionDateTimeFormat;
  dateTimeFormat?: SessionDateTimeFormat;
  /** Partial GUID of the user account */
  partialJSessionGUID?: string;
  /** Indicates if the user account is logging in for the first time */
  isFirstLogin?: boolean;
  /** Date on which the user account logged in for the first time */
  firstLoginDate?: number;
  userProperties?: SessionUserProperties;
  /** Indicates if the user account is active or inactive */
  state?: string;
}

export const sessionInfoResponseSchema: Schema<SessionInfoResponse> = object({
  userName: ['userName', optional(string())],
  userDisplayName: ['userDisplayName', optional(string())],
  userEmail: ['userEmail', optional(string())],
  userCreatedTime: ['userCreatedTime', optional(number())],
  userGUID: ['userGUID', optional(string())],
  canChangePassword: ['canChangePassword', optional(boolean())],
  isSystemUser: ['isSystemUser', optional(boolean())],
  userGroupMask: ['userGroupMask', optional(number())],
  privileges: ['privileges', optional(array(string()))],
  expirationTime: ['expirationTime', optional(number())],
  authToken: ['authToken', optional(string())],
  locale: ['locale', optional(string())],
  timezone: ['timezone', optional(string())],
  dateFormat: ['dateFormat', optional(lazy(() => sessionDateTimeFormatSchema))],
  timeFormat: ['timeFormat', optional(lazy(() => sessionDateTimeFormatSchema))],
  dateTimeFormat: [
    'dateTimeFormat',
    optional(lazy(() => sessionDateTimeFormatSchema)),
  ],
  partialJSessionGUID: ['partialJSessionGUID', optional(string())],
  isFirstLogin: ['isFirstLogin', optional(boolean())],
  firstLoginDate: ['firstLoginDate', optional(number())],
  userProperties: [
    'userProperties',
    optional(lazy(() => sessionUserPropertiesSchema)),
  ],
  state: ['state', optional(string())],
});
