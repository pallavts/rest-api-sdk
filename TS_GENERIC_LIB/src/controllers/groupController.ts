/**
 * TS Public RestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  ApiRestV2GroupAddgroupRequest,
  apiRestV2GroupAddgroupRequestSchema,
} from '../models/apiRestV2GroupAddgroupRequest';
import {
  ApiRestV2GroupAddprivilegeRequest,
  apiRestV2GroupAddprivilegeRequestSchema,
} from '../models/apiRestV2GroupAddprivilegeRequest';
import {
  ApiRestV2GroupAdduserRequest,
  apiRestV2GroupAdduserRequestSchema,
} from '../models/apiRestV2GroupAdduserRequest';
import {
  ApiRestV2GroupCreateRequest,
  apiRestV2GroupCreateRequestSchema,
} from '../models/apiRestV2GroupCreateRequest';
import {
  ApiRestV2GroupRemovegroupRequest,
  apiRestV2GroupRemovegroupRequestSchema,
} from '../models/apiRestV2GroupRemovegroupRequest';
import {
  ApiRestV2GroupRemoveprivilegeRequest,
  apiRestV2GroupRemoveprivilegeRequestSchema,
} from '../models/apiRestV2GroupRemoveprivilegeRequest';
import {
  ApiRestV2GroupRemoveuserRequest,
  apiRestV2GroupRemoveuserRequestSchema,
} from '../models/apiRestV2GroupRemoveuserRequest';
import {
  ApiRestV2GroupSearchRequest,
  apiRestV2GroupSearchRequestSchema,
} from '../models/apiRestV2GroupSearchRequest';
import {
  ApiRestV2GroupUpdateRequest,
  apiRestV2GroupUpdateRequestSchema,
} from '../models/apiRestV2GroupUpdateRequest';
import { GroupResponse, groupResponseSchema } from '../models/groupResponse';
import { array, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class GroupController extends BaseController {
  /**
   * To get the details of a specific group by name or id, use this endpoint. At Least one value needed.
   * When both are given id will be considered to fetch user information.
   *
   * @param name Name of the group
   * @param id   The GUID of the group
   * @return Response from the API call
   */
  async getGroup(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GroupResponse>> {
    const req = this.createRequest('GET', '/api/rest/v2/group');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(groupResponseSchema, requestOptions);
  }

  /**
   * To programmatically create a group in the ThoughtSpot system, use this API endpoint. Using this API,
   * you can create a group and assign privileges and users. For ease of user management and access
   * control, ThoughtSpot administrators can create groups and assign privileges to these groups. The
   * privileges determine the actions that the users belonging to a group are allowed to do. ThoughtSpot
   * also has a default group called ALL_GROUP. When you create new group in ThoughtSpot, they are
   * automatically added to ALL_GROUP. You cannot delete the ALL_GROUP or remove members from it.
   *
   * @param body
   * @return Response from the API call
   */
  async createGroup(
    body: ApiRestV2GroupCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GroupResponse>> {
    const req = this.createRequest('POST', '/api/rest/v2/group/create');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupCreateRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(groupResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing group.  To modify a group, you
   * require admin user privileges.At least one of id or name is required to update the group. When both
   * are given, then id will be considered and group name will be updated.
   *
   * @param body
   * @return Response from the API call
   */
  async updateGroup(
    body: ApiRestV2GroupUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/update');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupUpdateRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To remove a group from the ThoughtSpot system, send a DELETE request to this endpoint. At Least one
   * value needed.  When both are given user id will be considered to fetch user information.
   *
   * @param name Name of the group.
   * @param id   The GUID of the group
   * @return Response from the API call
   */
  async deleteGroup(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('DELETE', '/api/rest/v2/group/delete');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add privileges to an existing group, use API endpoint. When you assign
   * privileges to a group,  all the users under to this group inherits the privileges assigned to that
   * group. At least one of id or name of group is required. When both are given user id will be
   * considered.
   *
   * @param body
   * @return Response from the API call
   */
  async addPrivilegesToGroup(
    body: ApiRestV2GroupAddprivilegeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/addprivilege');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupAddprivilegeRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove privileges from a group, use API endpoint. The API removes only the
   * privilege association. It does not delete the privilege or group from the Thoughtspot system. At
   * least one of id or name of group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async removePrivilegesFromGroup(
    body: ApiRestV2GroupRemoveprivilegeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/removeprivilege');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupRemoveprivilegeRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add existing ThoughtSpot users to a group, use this API endpoint. When you
   * assign users to a group, the users inherits the privileges assigned to that group. At least one of
   * id or name of the group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async addUsersToGroup(
    body: ApiRestV2GroupAdduserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/adduser');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupAdduserRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove users from a group, use API endpoint.The API removes only the user
   * association. It does not delete the users or group from the Thoughtspot system. At least one of id
   * or name of group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async removeUsersFromGroup(
    body: ApiRestV2GroupRemoveuserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/removeuser');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupRemoveuserRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add existing groups to a group, use API endpoint. When you assign groups to a
   * group, the group inherits the privileges assigned to those groups. At least one of id or name of
   * group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async addGroupsToGroup(
    body: ApiRestV2GroupAddgroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/addgroup');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupAddgroupRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove groups from a group, use API endpoint.The API removes only the group
   * association. It does not delete the group from the Thoughtspot system. At least one of id or name of
   * group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async removeGroupsFromGroup(
    body: ApiRestV2GroupRemovegroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/group/removegroup');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupRemovegroupRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific group account or all groups in the ThoughtSpot system, use this end
   * point.
   *
   * @param body
   * @return Response from the API call
   */
  async searchGroups(
    body: ApiRestV2GroupSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GroupResponse[]>> {
    const req = this.createRequest('POST', '/api/rest/v2/group/search');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2GroupSearchRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(groupResponseSchema), requestOptions);
  }
}
