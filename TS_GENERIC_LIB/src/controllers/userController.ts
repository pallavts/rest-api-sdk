/**
 * TS Public RestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  ApiRestV2UserAddgroupRequest,
  apiRestV2UserAddgroupRequestSchema,
} from '../models/apiRestV2UserAddgroupRequest';
import {
  ApiRestV2UserCreateRequest,
  apiRestV2UserCreateRequestSchema,
} from '../models/apiRestV2UserCreateRequest';
import {
  ApiRestV2UserRemovegroupRequest,
  apiRestV2UserRemovegroupRequestSchema,
} from '../models/apiRestV2UserRemovegroupRequest';
import {
  ApiRestV2UserSearchRequest,
  apiRestV2UserSearchRequestSchema,
} from '../models/apiRestV2UserSearchRequest';
import {
  ApiRestV2UserUpdateRequest,
  apiRestV2UserUpdateRequestSchema,
} from '../models/apiRestV2UserUpdateRequest';
import { UserResponse, userResponseSchema } from '../models/userResponse';
import { array, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class UserController extends BaseController {
  /**
   * To get the details of a specific user account by username or user id, use this endpoint.  At Least
   * one value is needed.  When both are given, user id will be considered to fetch user information
   *
   * @param name Username of the user that you want to query
   * @param id   The GUID of the user account to query
   * @return Response from the API call
   */
  async getUser(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('GET', '/api/rest/v2/user');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * To programmatically create a user account in the ThoughtSpot system use this API endpoint.  Using
   * this API, you can create a user and assign groups. To create a user, you require admin user
   * privileges. All users created in the ThoughtSpot system are added to ALL_GROUP
   *
   * @param body
   * @return Response from the API call
   */
  async createUser(
    body: ApiRestV2UserCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('POST', '/api/rest/v2/user/create');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2UserCreateRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing user account.   To modify a user,
   * you require admin user privileges. At least one of User Id or username is mandatory. When both are
   * given, then user id will be considered and username will be updated
   *
   * @param body
   * @return Response from the API call
   */
  async updateUser(
    body: ApiRestV2UserUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/user/update');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2UserUpdateRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To remove a user from the ThoughtSpot system, use this endpoint.  At Least one value needed.  When
   * both are given user id will be considered to delete user.
   *
   * @param name Username of the user that you want to query.
   * @param id   The GUID of the user account to query.
   * @return Response from the API call
   */
  async deleteUser(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('DELETE', '/api/rest/v2/user/delete');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add groups to an existing ThoughtSpot user use this endpoint. When you assign
   * groups to a user, the user inherits the privileges assigned to those groups. At least one of User Id
   * or username is mandatory. When both are given, then user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async addGroupsToUser(
    body: ApiRestV2UserAddgroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/user/addgroup');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2UserAddgroupRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove groups from an existing ThoughtSpot user, use this API endpoint. The API
   * removes only the user association. It does not delete the user or group from the Thoughtspot system
   * At least one of User Id or username is mandatory. When both are given, then user id will be
   * considered.
   *
   * @param body
   * @return Response from the API call
   */
  async removeGroupsFromUser(
    body: ApiRestV2UserRemovegroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/api/rest/v2/user/removegroup');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2UserRemovegroupRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific user account or all users in the ThoughtSpot system use this end
   * point.  If no inputs are provided, then all user are included in the response.
   *
   * @param body
   * @return Response from the API call
   */
  async searchUsers(
    body: ApiRestV2UserSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse[]>> {
    const req = this.createRequest('POST', '/api/rest/v2/user/search');
    const mapped = req.prepareArgs({
      body: [body, apiRestV2UserSearchRequestSchema],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(userResponseSchema), requestOptions);
  }
}
