/*
 * TSPublicRestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost.ApiHelper;
import localhost.AuthManager;
import localhost.Configuration;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.Headers;
import localhost.http.client.HttpCallback;
import localhost.http.client.HttpClient;
import localhost.http.client.HttpContext;
import localhost.http.request.HttpRequest;
import localhost.http.response.HttpResponse;
import localhost.http.response.HttpStringResponse;
import localhost.models.ApiRestV2UserCreateRequest;
import localhost.models.ApiRestV2UserUpdateRequest;
import localhost.models.CreateUserResponce;
import localhost.models.RestAPIUserDetail;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UserController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public UserController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public UserController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * To get the details of a specific user account by username or user id, use this endpoint. At
     * Least one value is needed. When both are given, user id will be considered to fetch user
     * information.
     * @param  name  Optional parameter: Example:
     * @param  id  Optional parameter: Example:
     * @return    Returns the RestAPIUserDetail response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RestAPIUserDetail getUser(
            final String name,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildGetUserRequest(name, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetUserResponse(context);
    }

    /**
     * To get the details of a specific user account by username or user id, use this endpoint. At
     * Least one value is needed. When both are given, user id will be considered to fetch user
     * information.
     * @param  name  Optional parameter: Example:
     * @param  id  Optional parameter: Example:
     * @return    Returns the RestAPIUserDetail response from the API call
     */
    public CompletableFuture<RestAPIUserDetail> getUserAsync(
            final String name,
            final String id) {
        return makeHttpCallAsync(() -> buildGetUserRequest(name, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for getUser.
     */
    private HttpRequest buildGetUserRequest(
            final String name,
            final String id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/user");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getUser.
     * @return An object of type RestAPIUserDetail
     */
    private RestAPIUserDetail handleGetUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unautherized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        RestAPIUserDetail result = ApiHelper.deserialize(responseBody,
                RestAPIUserDetail.class);

        return result;
    }

    /**
     * To programmatically create a user account in the ThoughtSpot system use this API endpoint.
     * Using this API, you can create a user and assign groups. To create a user, you require admin
     * user privileges. All users created in the ThoughtSpot system are added to ALL_GROUP.
     * @param  body  Optional parameter: Example:
     * @return    Returns the CreateUserResponce response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CreateUserResponce createUser(
            final ApiRestV2UserCreateRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateUserRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateUserResponse(context);
    }

    /**
     * To programmatically create a user account in the ThoughtSpot system use this API endpoint.
     * Using this API, you can create a user and assign groups. To create a user, you require admin
     * user privileges. All users created in the ThoughtSpot system are added to ALL_GROUP.
     * @param  body  Optional parameter: Example:
     * @return    Returns the CreateUserResponce response from the API call
     */
    public CompletableFuture<CreateUserResponce> createUserAsync(
            final ApiRestV2UserCreateRequest body) {
        return makeHttpCallAsync(() -> buildCreateUserRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for createUser.
     */
    private HttpRequest buildCreateUserRequest(
            final ApiRestV2UserCreateRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/user/create");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createUser.
     * @return An object of type CreateUserResponce
     */
    private CreateUserResponce handleCreateUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unautherized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        CreateUserResponce result = ApiHelper.deserialize(responseBody,
                CreateUserResponce.class);

        return result;
    }

    /**
     * You can use this endpoint to programmatically modify an existing user account. To modify a
     * user, you require admin user privileges. This API allows the following modifications to a
     * user profile: User name modifications Password reset User visibility for sharing objects User
     * preferences, such as viewing onboarding experience, subscribing to or unsubscribing from
     * email notifications, and so on.
     * @param  body  Optional parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String updateUser(
            final ApiRestV2UserUpdateRequest body) throws ApiException, IOException {
        HttpRequest request = buildUpdateUserRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateUserResponse(context);
    }

    /**
     * You can use this endpoint to programmatically modify an existing user account. To modify a
     * user, you require admin user privileges. This API allows the following modifications to a
     * user profile: User name modifications Password reset User visibility for sharing objects User
     * preferences, such as viewing onboarding experience, subscribing to or unsubscribing from
     * email notifications, and so on.
     * @param  body  Optional parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> updateUserAsync(
            final ApiRestV2UserUpdateRequest body) {
        return makeHttpCallAsync(() -> buildUpdateUserRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateUser.
     */
    private HttpRequest buildUpdateUserRequest(
            final ApiRestV2UserUpdateRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/user/update");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateUser.
     * @return An object of type String
     */
    private String handleUpdateUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unautherized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

    /**
     * To remove a user from the ThoughtSpot system, send a DELETE request to this endpoint. At
     * Least one value needed. When both are given user id will be considered to fetch user
     * information.
     * @param  name  Optional parameter: Example:
     * @param  id  Optional parameter: Example:
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object deleteUser(
            final String name,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildDeleteUserRequest(name, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteUserResponse(context);
    }

    /**
     * To remove a user from the ThoughtSpot system, send a DELETE request to this endpoint. At
     * Least one value needed. When both are given user id will be considered to fetch user
     * information.
     * @param  name  Optional parameter: Example:
     * @param  id  Optional parameter: Example:
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> deleteUserAsync(
            final String name,
            final String id) {
        return makeHttpCallAsync(() -> buildDeleteUserRequest(name, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteUser.
     */
    private HttpRequest buildDeleteUserRequest(
            final String name,
            final String id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/user/delete");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteUser.
     * @return An object of type Object
     */
    private Object handleDeleteUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unautherized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Object result = responseBody;

        return result;
    }

}