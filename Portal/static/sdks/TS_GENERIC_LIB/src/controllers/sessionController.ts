/**
 * TS Public RestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  ApiRestV2SessionLoginRequest,
  apiRestV2SessionLoginRequestSchema,
} from '../models/apiRestV2SessionLoginRequest';
import {
  RestAPISessionInfo,
  restAPISessionInfoSchema,
} from '../models/restAPISessionInfo';
import {
  SessionAuthTokenResponse,
  sessionAuthTokenResponseSchema,
} from '../models/sessionAuthTokenResponse';
import { boolean, optional } from '../schema';
import { BaseController } from './baseController';

export class SessionController extends BaseController {
  /**
   * Get Session object information
   *
   * @return Response from the API call
   */
  async sessionInfo(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RestAPISessionInfo>> {
    const req = this.createRequest('GET', '/api/rest/v2/session');
    req.throwOn(500, ErrorResponseError, 'Operation failed or unautherized request');
    return req.callAsJson(restAPISessionInfoSchema, requestOptions);
  }

  /**
   * You can programmatically login a user to ThoughtSpot
   *
   * @param body
   * @return Response from the API call
   */
  async login(
    body?: ApiRestV2SessionLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SessionAuthTokenResponse>> {
    const req = this.createRequest('POST', '/api/rest/v2/session/login');
    const mapped = req.prepareArgs({
      body: [body, optional(apiRestV2SessionLoginRequestSchema)],
    });
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unautherized request');
    req.authenticate(false);
    return req.callAsJson(sessionAuthTokenResponseSchema, requestOptions);
  }

  /**
   * To log a user out of the current session, use this endpoint
   *
   * @return Response from the API call
   */
  async logout(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('POST', '/api/rest/v2/session/logout');
    req.throwOn(500, ErrorResponseError, 'Operation failed or unautherized request');
    return req.callAsJson(boolean(), requestOptions);
  }
}
