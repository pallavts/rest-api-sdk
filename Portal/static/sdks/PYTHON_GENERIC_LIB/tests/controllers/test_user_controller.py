# -*- coding: utf-8 -*-

"""
tspublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from tests.test_helper import TestHelper
from tests.http_response_catcher import HttpResponseCatcher
from tspublicrestapi.api_helper import APIHelper
from tspublicrestapi.controllers.user_controller import UserController
from tspublicrestapi.models.api_rest_v_2_user_create_request import ApiRestV2UserCreateRequest
from tspublicrestapi.models.api_rest_v_2_user_update_request import ApiRestV2UserUpdateRequest


class UserControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(UserControllerTests, cls).setUpClass()
        cls.response_catcher = HttpResponseCatcher()
        cls.controller = UserController(cls.config, cls.response_catcher)

    # To get the details of a specific user account by username or user id, use this endpoint. At Least one value is needed.  When both are given, user id will be considered to fetch user information
    def test_get_user(self):
        # Parameters for the API call
        name = None
        id = None

        # Perform the API call through the SDK function
        result = self.controller.get_user(name, id)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # To programmatically create a user account in the ThoughtSpot system use this API endpoint. Using this API, you can create a user and assign groups.
    #To create a user, you require admin user privileges.
    #All users created in the ThoughtSpot system are added to ALL_GROUP
    def test_create_user(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_user(body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # You can use this endpoint to programmatically modify an existing user account.  To modify a user, you require admin user privileges.
    #This API allows the following modifications to a user profile:
    #User name modifications
    #Password reset
    #User visibility for sharing objects
    #User preferences, such as viewing onboarding experience, subscribing to or unsubscribing from email notifications, and so on.
    def test_update_user(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_user(body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # To remove a user from the ThoughtSpot system, send a DELETE request to this endpoint. At Least one value needed.  When both are given user id will be considered to fetch user information.
    def test_delete_user(self):
        # Parameters for the API call
        name = None
        id = None

        # Perform the API call through the SDK function
        result = self.controller.delete_user(name, id)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


