# -*- coding: utf-8 -*-

"""
tspublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ApiRestV2UserCreateRequest(object):

    """Implementation of the 'Api Rest V2 User Create Request' model.

    TODO: type model description here.

    Attributes:
        name (string): TODO: type description here.
        display_name (string): TODO: type description here.
        visibility (string): TODO: type description here.
        mail (string): TODO: type description here.
        password (string): TODO: type description here.
        groups (list of string): TODO: type description here.
        state (string): TODO: type description here.
        notify_on_share (bool): TODO: type description here.
        show_walk_me (bool): TODO: type description here.
        analyst_onboarding_complete (bool): TODO: type description here.
        mtype (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "display_name": 'displayName',
        "password": 'password',
        "visibility": 'visibility',
        "mail": 'mail',
        "groups": 'groups',
        "state": 'state',
        "notify_on_share": 'notifyOnShare',
        "show_walk_me": 'showWalkMe',
        "analyst_onboarding_complete": 'analystOnboardingComplete',
        "mtype": 'type'
    }

    def __init__(self,
                 name=None,
                 display_name=None,
                 password=None,
                 visibility=None,
                 mail=None,
                 groups=None,
                 state=None,
                 notify_on_share=None,
                 show_walk_me=None,
                 analyst_onboarding_complete=None,
                 mtype=None):
        """Constructor for the ApiRestV2UserCreateRequest class"""

        # Initialize members of the class
        self.name = name
        self.display_name = display_name
        self.visibility = visibility
        self.mail = mail
        self.password = password
        self.groups = groups
        self.state = state
        self.notify_on_share = notify_on_share
        self.show_walk_me = show_walk_me
        self.analyst_onboarding_complete = analyst_onboarding_complete
        self.mtype = mtype

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get('name')
        display_name = dictionary.get('displayName')
        password = dictionary.get('password')
        visibility = dictionary.get('visibility')
        mail = dictionary.get('mail')
        groups = dictionary.get('groups')
        state = dictionary.get('state')
        notify_on_share = dictionary.get('notifyOnShare')
        show_walk_me = dictionary.get('showWalkMe')
        analyst_onboarding_complete = dictionary.get('analystOnboardingComplete')
        mtype = dictionary.get('type')

        # Return an object of this model
        return cls(name,
                   display_name,
                   password,
                   visibility,
                   mail,
                   groups,
                   state,
                   notify_on_share,
                   show_walk_me,
                   analyst_onboarding_complete,
                   mtype)
