# -*- coding: utf-8 -*-

"""
tspublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from tspublicrestapi.api_helper import APIHelper
from tspublicrestapi.configuration import Server
from tspublicrestapi.controllers.base_controller import BaseController
from tspublicrestapi.http.auth.o_auth_2 import OAuth2
from tspublicrestapi.models.rest_api_session_info import RestAPISessionInfo
from tspublicrestapi.models.session_auth_token_response import SessionAuthTokenResponse
from tspublicrestapi.exceptions.error_response_exception import ErrorResponseException


class SessionController(BaseController):

    """A Controller to access Endpoints in the tspublicrestapi API."""

    def __init__(self, config, call_back=None):
        super(SessionController, self).__init__(config, call_back)

    def session_info(self):
        """Does a GET request to /api/rest/v2/session.

        Get Session object information

        Returns:
            RestAPISessionInfo: Response from the API. Get Session object
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/session'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RestAPISessionInfo.from_dictionary)

        return decoded

    def login(self,
              body=None):
        """Does a POST request to /api/rest/v2/session/login.

        You can programmatically login a user to ThoughtSpot

        Args:
            body (ApiRestV2SessionLoginRequest, optional): TODO: type
                description here.

        Returns:
            SessionAuthTokenResponse: Response from the API. You can
                programmatically login a user to ThoughtSpot

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/session/login'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SessionAuthTokenResponse.from_dictionary)

        return decoded

    def logout(self):
        """Does a POST request to /api/rest/v2/session/logout.

        To log a user out of the current session, use this endpoint

        Returns:
            bool: Response from the API. To log a user out of the current
                session, use this endpoint

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/session/logout'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = _response.text == 'true'

        return decoded
