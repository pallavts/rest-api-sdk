# -*- coding: utf-8 -*-

"""
tspublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from tspublicrestapi.api_helper import APIHelper
from tspublicrestapi.configuration import Server
from tspublicrestapi.controllers.base_controller import BaseController
from tspublicrestapi.http.auth.o_auth_2 import OAuth2
from tspublicrestapi.models.rest_api_user_detail import RestAPIUserDetail
from tspublicrestapi.models.create_user_responce import CreateUserResponce
from tspublicrestapi.exceptions.error_response_exception import ErrorResponseException


class UserController(BaseController):

    """A Controller to access Endpoints in the tspublicrestapi API."""

    def __init__(self, config, call_back=None):
        super(UserController, self).__init__(config, call_back)

    def get_user(self,
                 name=None,
                 id=None):
        """Does a GET request to /api/rest/v2/user.

        To get the details of a specific user account by username or user id,
        use this endpoint. At Least one value is needed.  When both are given,
        user id will be considered to fetch user information

        Args:
            name (string, optional): TODO: type description here.
            id (string, optional): TODO: type description here.

        Returns:
            RestAPIUserDetail: Response from the API. To get the details of a
                specific user account by username or user id, use this
                endpoint. At Least one value is needed.  When both are given,
                user id will be considered to fetch user information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/user'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'name': name,
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RestAPIUserDetail.from_dictionary)

        return decoded

    def create_user(self,
                    body=None):
        """Does a POST request to /api/rest/v2/user/create.

        To programmatically create a user account in the ThoughtSpot system
        use this API endpoint. Using this API, you can create a user and
        assign groups.
        To create a user, you require admin user privileges.
        All users created in the ThoughtSpot system are added to ALL_GROUP

        Args:
            body (ApiRestV2UserCreateRequest, optional): TODO: type
                description here.

        Returns:
            CreateUserResponce: Response from the API. To programmatically
                create a user account in the ThoughtSpot system use this API
                endpoint. Using this API, you can create a user and assign
                groups.
To create a user, you require admin user
                privileges.
All users created in the ThoughtSpot system are
                added to ALL_GROUP

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/user/create'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreateUserResponce.from_dictionary)

        return decoded

    def update_user(self,
                    body=None):
        """Does a PUT request to /api/rest/v2/user/update.

        You can use this endpoint to programmatically modify an existing user
        account.  To modify a user, you require admin user privileges.
        This API allows the following modifications to a user profile:
        User name modifications
        Password reset
        User visibility for sharing objects
        User preferences, such as viewing onboarding experience, subscribing
        to or unsubscribing from email notifications, and so on.

        Args:
            body (ApiRestV2UserUpdateRequest, optional): TODO: type
                description here.

        Returns:
            string: Response from the API. You can use this endpoint to
                programmatically modify an existing user account.  To modify a
                user, you require admin user privileges.
This API allows the
                following modifications to a user profile:
User name
                modifications
Password reset
User visibility for sharing
                objects
User preferences, such as viewing onboarding
                experience, subscribing to or unsubscribing from email
                notifications, and so on.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/user/update'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def delete_user(self,
                    name=None,
                    id=None):
        """Does a DELETE request to /api/rest/v2/user/delete.

        To remove a user from the ThoughtSpot system, send a DELETE request to
        this endpoint. At Least one value needed.  When both are given user id
        will be considered to fetch user information.

        Args:
            name (string, optional): TODO: type description here.
            id (string, optional): TODO: type description here.

        Returns:
            object: Response from the API. To remove a user from the
                ThoughtSpot system, send a DELETE request to this endpoint. At
                Least one value needed.  When both are given user id will be
                considered to fetch user information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/rest/v2/user/delete'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'name': name,
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        OAuth2.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unautherized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded
