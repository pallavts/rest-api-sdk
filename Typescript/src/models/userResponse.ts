/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { GroupNameAndID, groupNameAndIDSchema } from './groupNameAndID';
import { UserNameAndID, userNameAndIDSchema } from './userNameAndID';

export interface UserResponse {
  /** Username of the user account */
  name?: string;
  /** Display name of the user account */
  displayName?: string;
  /** GUID of the user account */
  id?: string;
  /** Visibility of the user account */
  visibility?: string;
  /** Email of the user account */
  mail?: string;
  /** Name of the group to which user account is added */
  groups?: GroupNameAndID[];
  /** Privileges assigned to user account */
  privileges?: string[];
  /** Tags assigned to the user */
  tags?: string[];
  /** Indicates if the user account is active or inactive */
  state?: string;
  /** Indicates if the email should be sent when object is shared with the user */
  notifyOnShare?: boolean;
  /** Indicates if the walk me should be shown when logging in */
  showWalkMe?: boolean;
  /** Indicates if the onboarding is completed for the user */
  analystOnboardingComplete?: boolean;
  /** Indicates if the use is logging in for the first time */
  firstLogin?: number;
  /** Indicates if the welcome email is sent to email associated with the user account */
  welcomeEmailSent?: boolean;
  /** Indicates if the user account is deleted */
  isDeleted?: boolean;
  /** Indicates if the user account is hidden */
  isHidden?: boolean;
  /**
   * Indicates if the user account is from external system
   * isDeprecated
   */
  isExternal?: boolean;
  isDeprecated?: boolean;
  /** Indicates if the all the properties of user account is provided */
  complete?: boolean;
  /** Indicates if the user account is super user */
  isSuperUser?: boolean;
  /** Indicates if the user account is system principal */
  isSystemPrincipal?: boolean;
  /** Indicates the type of user account */
  type?: string;
  /** Indicates the type of parent object */
  parenttype?: string;
  /** Tenant id associated with the user account */
  tenantId?: string;
  indexVersion?: number;
  generationNum?: number;
  /** Date and time when user account was created */
  created?: number;
  /** Date and time of last modification of user account */
  modified?: number;
  author?: UserNameAndID;
  modifiedBy?: UserNameAndID;
  owner?: UserNameAndID;
}

export const userResponseSchema: Schema<UserResponse> = object({
  name: ['name', optional(string())],
  displayName: ['displayName', optional(string())],
  id: ['id', optional(string())],
  visibility: ['visibility', optional(string())],
  mail: ['mail', optional(string())],
  groups: ['groups', optional(array(lazy(() => groupNameAndIDSchema)))],
  privileges: ['privileges', optional(array(string()))],
  tags: ['tags', optional(array(string()))],
  state: ['state', optional(string())],
  notifyOnShare: ['notifyOnShare', optional(boolean())],
  showWalkMe: ['showWalkMe', optional(boolean())],
  analystOnboardingComplete: ['analystOnboardingComplete', optional(boolean())],
  firstLogin: ['firstLogin', optional(number())],
  welcomeEmailSent: ['welcomeEmailSent', optional(boolean())],
  isDeleted: ['isDeleted', optional(boolean())],
  isHidden: ['isHidden', optional(boolean())],
  isExternal: ['isExternal', optional(boolean())],
  isDeprecated: ['isDeprecated', optional(boolean())],
  complete: ['complete', optional(boolean())],
  isSuperUser: ['isSuperUser', optional(boolean())],
  isSystemPrincipal: ['isSystemPrincipal', optional(boolean())],
  type: ['type', optional(string())],
  parenttype: ['parenttype', optional(string())],
  tenantId: ['tenantId', optional(string())],
  indexVersion: ['indexVersion', optional(number())],
  generationNum: ['generationNum', optional(number())],
  created: ['created', optional(number())],
  modified: ['modified', optional(number())],
  author: ['author', optional(lazy(() => userNameAndIDSchema))],
  modifiedBy: ['modifiedBy', optional(lazy(() => userNameAndIDSchema))],
  owner: ['owner', optional(lazy(() => userNameAndIDSchema))],
});
