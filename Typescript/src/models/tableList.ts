/**
 * ThoughtSpot Public REST APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { UserNameAndID, userNameAndIDSchema } from './userNameAndID';

export interface TableList {
  /** Name of the table */
  name?: string;
  /** Type of the table */
  type?: string;
  /** GUID of the table */
  id?: string;
  /** Name of the database to which the table belongs */
  databaseStripe?: string;
  /** Name of the schema to which the table belongs */
  schemaStripe?: string;
  isExternal?: boolean;
  /** Indicates if the table is deprecated */
  isDeprecated?: boolean;
  /** Indicates if the table is deleted */
  isDeleted?: boolean;
  /** Indicates if the table is hideen */
  isHidden?: boolean;
  indexVersion?: number;
  generationNum?: number;
  /** Date and time when the table was created */
  created?: string;
  /** Date and time of last modification of the table */
  modified?: string;
  author?: UserNameAndID;
  modifiedBy?: UserNameAndID;
  owner?: UserNameAndID;
  /** List of tags assigned to the table */
  tags?: string[];
}

export const tableListSchema: Schema<TableList> = object({
  name: ['name', optional(string())],
  type: ['type', optional(string())],
  id: ['id', optional(string())],
  databaseStripe: ['databaseStripe', optional(string())],
  schemaStripe: ['schemaStripe', optional(string())],
  isExternal: ['isExternal', optional(boolean())],
  isDeprecated: ['isDeprecated', optional(boolean())],
  isDeleted: ['isDeleted', optional(boolean())],
  isHidden: ['isHidden', optional(boolean())],
  indexVersion: ['indexVersion', optional(number())],
  generationNum: ['generationNum', optional(number())],
  created: ['created', optional(string())],
  modified: ['modified', optional(string())],
  author: ['author', optional(lazy(() => userNameAndIDSchema))],
  modifiedBy: ['modifiedBy', optional(lazy(() => userNameAndIDSchema))],
  owner: ['owner', optional(lazy(() => userNameAndIDSchema))],
  tags: ['tags', optional(array(string()))],
});
