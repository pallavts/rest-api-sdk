/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { GroupNameAndID, groupNameAndIDSchema } from './groupNameAndID';
import {
  LiveboardNameAndID,
  liveboardNameAndIDSchema,
} from './liveboardNameAndID';
import { UserNameAndID, userNameAndIDSchema } from './userNameAndID';

export interface GroupResponse {
  /** Name of the group */
  name?: string;
  /** A unique display name string for the user group */
  displayName?: string;
  /** GUID of the group */
  id?: string;
  /** Visibility of the group */
  visibility?: string;
  /** Description of the group */
  description?: string;
  /** Privileges assigned to the group */
  privileges?: string[];
  /** Name of the group to which is added */
  groups?: GroupNameAndID[];
  /** User Group Information by Id or Name. */
  users?: UserNameAndID[];
  /** Liveboards assigned to the group */
  assignedLiveboards?: LiveboardNameAndID[];
  userGroupContent?: unknown;
  /** Tags assigned to the group */
  tags?: string[];
  /** Indicates if the group is deleted */
  isDeleted?: boolean;
  /** Indicates if the group is hidden */
  isHidden?: boolean;
  /** Indicates if the group is from external system */
  isExternal?: boolean;
  isDeprecated?: boolean;
  /** Indicates if the all the properties of group is provided */
  complete?: boolean;
  /** Indicates if the group is system principal */
  isSystemPrincipal?: boolean;
  /** Indicates the type of group */
  type?: string;
  /** Indicates the type of parent object */
  parenttype?: string;
  groupIdx?: number;
  metadataVersion?: number;
  /** Tenant id associated with the group */
  tenantId?: string;
  indexVersion?: number;
  generationNum?: number;
  /** Date and time when group was created */
  created?: number;
  /** Date and time of last modification of the group */
  modified?: number;
  author?: UserNameAndID;
  modifiedBy?: UserNameAndID;
  owner?: UserNameAndID;
}

export const groupResponseSchema: Schema<GroupResponse> = object({
  name: ['name', optional(string())],
  displayName: ['displayName', optional(string())],
  id: ['id', optional(string())],
  visibility: ['visibility', optional(string())],
  description: ['description', optional(string())],
  privileges: ['privileges', optional(array(string()))],
  groups: ['groups', optional(array(lazy(() => groupNameAndIDSchema)))],
  users: ['users', optional(array(lazy(() => userNameAndIDSchema)))],
  assignedLiveboards: [
    'assignedLiveboards',
    optional(array(lazy(() => liveboardNameAndIDSchema))),
  ],
  userGroupContent: ['userGroupContent', optional(unknown())],
  tags: ['tags', optional(array(string()))],
  isDeleted: ['isDeleted', optional(boolean())],
  isHidden: ['isHidden', optional(boolean())],
  isExternal: ['isExternal', optional(boolean())],
  isDeprecated: ['isDeprecated', optional(boolean())],
  complete: ['complete', optional(boolean())],
  isSystemPrincipal: ['isSystemPrincipal', optional(boolean())],
  type: ['type', optional(string())],
  parenttype: ['parenttype', optional(string())],
  groupIdx: ['groupIdx', optional(number())],
  metadataVersion: ['metadataVersion', optional(number())],
  tenantId: ['tenantId', optional(string())],
  indexVersion: ['indexVersion', optional(number())],
  generationNum: ['generationNum', optional(number())],
  created: ['created', optional(number())],
  modified: ['modified', optional(number())],
  author: ['author', optional(lazy(() => userNameAndIDSchema))],
  modifiedBy: ['modifiedBy', optional(lazy(() => userNameAndIDSchema))],
  owner: ['owner', optional(lazy(() => userNameAndIDSchema))],
});
