/**
 * ThoughtSpot Public REST APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import { OrgsResponse, orgsResponseSchema } from '../models/orgsResponse';
import {
  TspublicRestV2OrgCreateRequest,
  tspublicRestV2OrgCreateRequestSchema,
} from '../models/tspublicRestV2OrgCreateRequest';
import {
  TspublicRestV2OrgSearchRequest,
  tspublicRestV2OrgSearchRequestSchema,
} from '../models/tspublicRestV2OrgSearchRequest';
import {
  TspublicRestV2OrgUpdateRequest,
  tspublicRestV2OrgUpdateRequestSchema,
} from '../models/tspublicRestV2OrgUpdateRequest';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class OrgController extends BaseController {
  /**
   * To get the details of a specific organization by name or id, use this endpoint.
   *
   * At least one value needed. When both are given,then id will be considered to fetch organization
   * information.
   *
   * Requires Administration privilege for tenant.
   *
   * @param name Name of the organization.
   * @param id   The ID of the organization.
   * @return Response from the API call
   */
  async restapiV2GetOrg(
    name?: string,
    id?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrgsResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/org');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(number())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(orgsResponseSchema, requestOptions);
  }

  /**
   * To programmatically create an organization in the ThoughtSpot system, use this API endpoint.
   *
   * Requires Administration privilege for tenant.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2CreateOrg(
    body: TspublicRestV2OrgCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrgsResponse>> {
    const req = this.createRequest('POST', '/tspublic/rest/v2/org/create');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2OrgCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(orgsResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing org.
   *
   * Provide name or id of the organization to update the properties. When both id and name are given,
   * then id will be considered and name of the organization will be updated.
   *
   * Requires Administration privilege for tenant.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2UpdateOrg(
    body: TspublicRestV2OrgUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrgsResponse>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/org/update');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2OrgUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(orgsResponseSchema, requestOptions);
  }

  /**
   * To remove an organization from the ThoughtSpot system, send a DELETE request to this endpoint.
   *
   * At least one value is needed. When both id and name are given, then id will be considered.
   *
   * Requires Administration privilege for tenant.
   *
   * @param name Name of the organization.
   * @param id   The ID of the organization.
   * @return Response from the API call
   */
  async restapiV2DeleteOrg(
    name?: string,
    id?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('DELETE', '/tspublic/rest/v2/org/delete');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(number())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific organization or all organizations in the ThoughtSpot system use
   * this end point.
   *
   * If no input is provided, then all organizations are included in the response.
   *
   * Requires Administration privilege for tenant.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2SearchOrgs(
    body: TspublicRestV2OrgSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OrgsResponse[]>> {
    const req = this.createRequest('POST', '/tspublic/rest/v2/org/search');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2OrgSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(array(orgsResponseSchema), requestOptions);
  }
}
