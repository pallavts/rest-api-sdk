/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  GetLogEventsTopicEnum,
  getLogEventsTopicEnumSchema,
} from '../models/getLogEventsTopicEnum';
import { LogsResponse, logsResponseSchema } from '../models/logsResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class LogsController extends BaseController {
  /**
   * Note: This endpoint is applicable only for SAAS deployments.
   *
   * The ThoughtSpot log streaming service API allows you to programmatically get a security audit event
   * log from the ThoughtSpot system.
   *
   * To use this API, make sure you have admin user privileges.
   *
   * ThoughtSpot cloud deployments allow you to collect security audit events and send them to your
   * Security information and event management (SIEM) application in real-time.
   *
   * These events can help your security operations personnel to detect potential security threats or
   * compromised user accounts in your organization.
   *
   * Permission: Requires administration privilege
   *
   * @param topic     Type of the log.
   * @param fromEpoch The EPOCH time in milliseconds to set the start time for streaming logs.
   *                                           Example: To set the timestamp as June 1, 2021 8 am, specify
   *                                           1622534400000.
   * @param toEpoch   The EPOCH time in milliseconds to set the end time for streaming logs.
   *                                           Example: To set the timestamp as July 1, 2021, 8 am, specify
   *                                           1625126400000.
   * @return Response from the API call
   */
  async getLogEvents(
    topic: GetLogEventsTopicEnum,
    fromEpoch?: string,
    toEpoch?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LogsResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/logs/events');
    const mapped = req.prepareArgs({
      topic: [topic, getLogEventsTopicEnumSchema],
      fromEpoch: [fromEpoch, optional(string())],
      toEpoch: [toEpoch, optional(string())],
    });
    req.query('topic', mapped.topic);
    req.query('fromEpoch', mapped.fromEpoch);
    req.query('toEpoch', mapped.toEpoch);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(logsResponseSchema, requestOptions);
  }
}
