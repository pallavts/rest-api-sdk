/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  HomeLiveboardResponse,
  homeLiveboardResponseSchema,
} from '../models/homeLiveboardResponse';
import {
  MetadataTagResponse,
  metadataTagResponseSchema,
} from '../models/metadataTagResponse';
import {
  TspublicRestV2MetadataDependencyRequest,
  tspublicRestV2MetadataDependencyRequestSchema,
} from '../models/tspublicRestV2MetadataDependencyRequest';
import {
  TspublicRestV2MetadataDetailSearchRequest,
  tspublicRestV2MetadataDetailSearchRequestSchema,
} from '../models/tspublicRestV2MetadataDetailSearchRequest';
import {
  TspublicRestV2MetadataFavoriteAssignRequest,
  tspublicRestV2MetadataFavoriteAssignRequestSchema,
} from '../models/tspublicRestV2MetadataFavoriteAssignRequest';
import {
  TspublicRestV2MetadataFavoriteUnassignRequest,
  tspublicRestV2MetadataFavoriteUnassignRequestSchema,
} from '../models/tspublicRestV2MetadataFavoriteUnassignRequest';
import {
  TspublicRestV2MetadataHeaderSearchRequest,
  tspublicRestV2MetadataHeaderSearchRequestSchema,
} from '../models/tspublicRestV2MetadataHeaderSearchRequest';
import {
  TspublicRestV2MetadataHomeliveboardAssignRequest,
  tspublicRestV2MetadataHomeliveboardAssignRequestSchema,
} from '../models/tspublicRestV2MetadataHomeliveboardAssignRequest';
import {
  TspublicRestV2MetadataHomeliveboardUnassignRequest,
  tspublicRestV2MetadataHomeliveboardUnassignRequestSchema,
} from '../models/tspublicRestV2MetadataHomeliveboardUnassignRequest';
import {
  TspublicRestV2MetadataTagAssignRequest,
  tspublicRestV2MetadataTagAssignRequestSchema,
} from '../models/tspublicRestV2MetadataTagAssignRequest';
import {
  TspublicRestV2MetadataTagCreateRequest,
  tspublicRestV2MetadataTagCreateRequestSchema,
} from '../models/tspublicRestV2MetadataTagCreateRequest';
import {
  TspublicRestV2MetadataTagUnassignRequest,
  tspublicRestV2MetadataTagUnassignRequestSchema,
} from '../models/tspublicRestV2MetadataTagUnassignRequest';
import {
  TspublicRestV2MetadataTagUpdateRequest,
  tspublicRestV2MetadataTagUpdateRequestSchema,
} from '../models/tspublicRestV2MetadataTagUpdateRequest';
import {
  TspublicRestV2MetadataTmlExportRequest,
  tspublicRestV2MetadataTmlExportRequestSchema,
} from '../models/tspublicRestV2MetadataTmlExportRequest';
import {
  TspublicRestV2MetadataTmlImportRequest,
  tspublicRestV2MetadataTmlImportRequestSchema,
} from '../models/tspublicRestV2MetadataTmlImportRequest';
import { Type10Enum, type10EnumSchema } from '../models/type10Enum';
import { Type9Enum, type9EnumSchema } from '../models/type9Enum';
import { array, boolean, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class MetadataController extends BaseController {
  /**
   * To get details of a specific tag, use this endpoint.
   *
   * At least one of id or name of tag is required. When both are given, then id will be considered.
   *
   * @param name Name of the tag
   * @param id   The GUID of the tag
   * @return Response from the API call
   */
  async getTag(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MetadataTagResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/metadata/tag');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(metadataTagResponseSchema, requestOptions);
  }

  /**
   * To programmatically create tags, use this endpoint
   *
   * Permission: Requires administration privilege
   *
   * @param body
   * @return Response from the API call
   */
  async createTag(
    body: TspublicRestV2MetadataTagCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MetadataTagResponse>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/metadata/tag/create'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataTagCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(metadataTagResponseSchema, requestOptions);
  }

  /**
   * To programmatically update tags, use this endpoint.
   *
   * At least one of id or name of tag is required. When both are given, then id will be considered.
   *
   * Permission: Requires administration privilege
   *
   * @param body
   * @return Response from the API call
   */
  async updateTag(
    body: TspublicRestV2MetadataTagUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/tag/update'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataTagUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically delete tags, use this endpoint.
   *
   * At least one of id or name of tag is required. When both are given, then id will be considered.
   *
   * Permission: Requires administration privilege
   *
   * @param name Name of the tag
   * @param id   The GUID of the tag
   * @return Response from the API call
   */
  async deleteTag(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'DELETE',
      '/tspublic/rest/v2/metadata/tag/delete'
    );
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically assign tags to a metadata object, such as a liveboard, search answer, table,
   * worksheet, or view, use this endpoint.
   *
   * At least one of id or name of tag is required. When both are given, then id will be considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async assignTag(
    body: TspublicRestV2MetadataTagAssignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/tag/assign'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataTagAssignRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically unassign tags to a metadata object, such as a liveboard, search answer, table,
   * worksheet, or view, use this endpoint.
   *
   * At least one of id or name of tag is required. When both are given, then id will be considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async unassignTag(
    body: TspublicRestV2MetadataTagUnassignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/tag/unassign'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataTagUnassignRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically assign objects to favorites for a given user account, use this endpoint.
   *
   * At least one of user id or username is required. When both are given, then id will be considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async assignFavorite(
    body: TspublicRestV2MetadataFavoriteAssignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/favorite/assign'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataFavoriteAssignRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically unassign objects to favorites for a given user account, use this endpoint.
   *
   * At least one of user id or username is required. When both are given, then id will be considered.
   * Screen reader support enabled.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async unassignFavorite(
    body: TspublicRestV2MetadataFavoriteUnassignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/favorite/unassign'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataFavoriteUnassignRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the name and id of liveboard that is set as a home liveboard for a user, use this endpoint.
   *
   * At least one of user id or username is required. When both are given, then id will be considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param userName
   * @param userId   The GUID of the user
   * @return Response from the API call
   */
  async getHomeLiveboard(
    userName?: string,
    userId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<HomeLiveboardResponse>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/metadata/homeliveboard'
    );
    const mapped = req.prepareArgs({
      userName: [userName, optional(string())],
      userId: [userId, optional(string())],
    });
    req.query('userName', mapped.userName);
    req.query('userId', mapped.userId);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(homeLiveboardResponseSchema, requestOptions);
  }

  /**
   * To assign a specific liveboard as a home liveboard for a user, use this endpoint.
   *
   * At least one of user id or username is required. When both are given, then id will be considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async assignHomeLiveboard(
    body: TspublicRestV2MetadataHomeliveboardAssignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/homeliveboard/assign'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataHomeliveboardAssignRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To unassign the home liveboard set for a user, use this endpoint.
   *
   * At least one of user id or username is required. When both are given, then id will be considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async unassignHomeLiveboard(
    body: TspublicRestV2MetadataHomeliveboardUnassignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/metadata/homeliveboard/unassign'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataHomeliveboardUnassignRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get a list of objects with incomplete metadata, use this endpoint
   *
   * @return Response from the API call
   */
  async getIncompleteObjects(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/metadata/incomplete'
    );
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To get header detail of a metadata object, use this endpoint. You can provide as input selective
   * fields to get the data for.
   *
   * Permission: Requires administration privilege for USER and USER_GROUP type. Requires datamanagement
   * privilege for CONNECTION type. Requires at least view access for other object types
   *
   * @param type         Type of the metadata object being searched.
   * @param id           GUID of the metadata object
   * @param outputFields Array of header field names that need to be included in the header response
   * @return Response from the API call
   */
  async getObjectHeader(
    type: Type9Enum,
    id: string,
    outputFields?: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/metadata/header');
    const mapped = req.prepareArgs({
      type: [type, type9EnumSchema],
      id: [id, string()],
      outputFields: [outputFields, optional(array(string()))],
    });
    req.query('type', mapped.type);
    req.query('id', mapped.id);
    req.query('outputFields', mapped.outputFields);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Use this endpoint to get full details of metadata objects.
   *
   * Permission: Requires administration privilege for USER and USER_GROUP type. Requires datamanagement
   * privilege for CONNECTION type. Requires at least view access to other object types
   *
   * @param type Type of the metadata object being searched. Valid values
   * @param id   A JSON array of GUIDs of the objects.
   * @return Response from the API call
   */
  async getObjectDetail(
    type: Type10Enum,
    id: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/metadata/detail');
    const mapped = req.prepareArgs({
      type: [type, type10EnumSchema],
      id: [id, array(string())],
    });
    req.query('type', mapped.type);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Use this endpoint to get header details of visualization charts for a given liveboard or answer.
   *
   * At least one of id or name of liveboard or answer is required. When both are given, then id will be
   * considered.
   *
   * Permission: Requires at least view access to the object
   *
   * @param id The GUID of the liveboard or answer
   * @return Response from the API call
   */
  async getObjectVisualizationHeader(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown[]>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/metadata/vizheader'
    );
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(unknown()), requestOptions);
  }

  /**
   * To get header details for metadata objects, use this endpoint. You can provide as input selective
   * fields to get the data for.
   *
   * Permission: Requires administration privilege for USER and USER_GROUP type. Requires datamanagement
   * privilege for CONNECTION type. Requires at least view access for other object types
   *
   * @param body
   * @return Response from the API call
   */
  async searchObjectHeader(
    body: TspublicRestV2MetadataHeaderSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/metadata/header/search'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataHeaderSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Use this endpoint to get full details of metadata objects.
   *
   * Permission: Requires administration privilege for USER and USER_GROUP type. Requires datamanagement
   * privilege for CONNECTION type. Requires at least view access for other object types
   *
   * @param body
   * @return Response from the API call
   */
  async searchObjectDetail(
    body: TspublicRestV2MetadataDetailSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/metadata/detail/search'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataDetailSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Use this endpoint to delete the metadata objects.
   *
   * Permission: Requires modify access to the object
   *
   * @param type Type of the metadata object being searched.
   * @param id   A JSON array of GUIDs of the objects.
   * @return Response from the API call
   */
  async deleteObject(
    type: Type10Enum,
    id: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'DELETE',
      '/tspublic/rest/v2/metadata/delete'
    );
    const mapped = req.prepareArgs({
      type: [type, type10EnumSchema],
      id: [id, array(string())],
    });
    req.query('type', mapped.type);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To query the details of dependent objects and associate objects as dependents, you can use this API.
   *
   * Dependency is defined as relation between referenced and referencing objects. A referencing object
   * is said to have a dependency on a referenced object, if the referenced object cannot be deleted
   * without first deleting the referencing object.
   *
   * Example:
   *
   * Consider a worksheet W1 that has a derived logical column C1 that has a reference to a base logical
   * column C2. This can be shown diagramatically as: W1-->C1-->C2.
   *
   * W1 has a dependency on C2 i.e. W1 is a referencing object and C2 is a referenced object. It is not
   * possible to delete C2 without first deleting W1 because deletion of C2 will be prevented by the
   * relationship between W1s column C1 and C2.
   *
   * Similarly C1 is said to have a dependency on C2 i.e. C1 is a referencing object and C2 is a
   * referenced object. It is not possible to delete C2 without first deleting C1
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async getObjectDependency(
    body: TspublicRestV2MetadataDependencyRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/metadata/dependency'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataDependencyRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To export ThoughtSpot objects represented in ThoughtSpot Modeling Language (TML), use this endpoint.
   *
   * Permission: Requires at least view access to the object
   *
   * @param body
   * @return Response from the API call
   */
  async exportObjectTML(
    body: TspublicRestV2MetadataTmlExportRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/metadata/tml/export'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataTmlExportRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To import ThoughtSpot objects represented in ThoughtSpot Modeling Language (TML), use this endpoint.
   *
   * Permission: Requires datamanagement privilge
   *
   * @param body
   * @return Response from the API call
   */
  async importObjectTML(
    body: TspublicRestV2MetadataTmlImportRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/metadata/tml/import'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2MetadataTmlImportRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }
}
