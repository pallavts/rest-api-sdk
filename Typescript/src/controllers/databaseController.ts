/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  CreateTableResponse,
  createTableResponseSchema,
} from '../models/createTableResponse';
import {
  TspublicRestV2DatabaseTableCreateRequest,
  tspublicRestV2DatabaseTableCreateRequestSchema,
} from '../models/tspublicRestV2DatabaseTableCreateRequest';
import {
  TspublicRestV2DatabaseTableRunqueryRequest,
  tspublicRestV2DatabaseTableRunqueryRequestSchema,
} from '../models/tspublicRestV2DatabaseTableRunqueryRequest';
import { array, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class DatabaseController extends BaseController {
  /**
   * Note: This endpoint is applicable only for on-prem deployments
   *
   * To list all the databases in Falcon, use this endpoint.
   *
   * Permission: Requires administration privilege
   *
   * @return Response from the API call
   */
  async getDatabases(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/database');
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(string()), requestOptions);
  }

  /**
   * Note: This endpoint is applicable only for on-prem deployments
   *
   * To list all the schemas in a database in Falcon, use this endpoint.
   *
   * Permission: Requires administration privilege
   *
   * @param database Name of the Falcon database
   * @return Response from the API call
   */
  async getSchemas(
    database: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/database/schema');
    const mapped = req.prepareArgs({ database: [database, string()] });
    req.query('database', mapped.database);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(string()), requestOptions);
  }

  /**
   * Note: This endpoint is applicable only for on-prem deployments.
   *
   * To list all the tables in a schema of a database in Falcon, use this endpoint.
   *
   * Permission: Requires administration privilege
   *
   * @param database Name of the Falcon database
   * @param schema   Name of the schema in Falcon database
   * @return Response from the API call
   */
  async getTables(
    database: string,
    schema: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/database/table');
    const mapped = req.prepareArgs({
      database: [database, string()],
      schema: [schema, string()],
    });
    req.query('database', mapped.database);
    req.query('schema', mapped.schema);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(string()), requestOptions);
  }

  /**
   * Note: This endpoint is applicable only for on-prem deployments.
   *
   * To create a table in Falcon, use this endpoint.
   *
   * Permission: Requires administration privilege
   *
   * @param body
   * @return Response from the API call
   */
  async createTable(
    body: TspublicRestV2DatabaseTableCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateTableResponse>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/database/table/create'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2DatabaseTableCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(createTableResponseSchema, requestOptions);
  }

  /**
   * Note: This endpoint is applicable only for on-prem deployments.
   *
   * To run a TQL statement in Falcon, use this endpoint.
   *
   * You can run only following type of statements - Table DDL alter and Table rows update and delete.
   *
   * Permission: Requires administration privilege
   *
   * @param body
   * @return Response from the API call
   */
  async runQuery(
    body: TspublicRestV2DatabaseTableRunqueryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown[]>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/database/table/runquery'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2DatabaseTableRunqueryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(unknown()), requestOptions);
  }
}
