/**
 * ThoughtSpot Public REST APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  PrincipalSearchResponse,
  principalSearchResponseSchema,
} from '../models/principalSearchResponse';
import {
  SecurityPermissionResponse,
  securityPermissionResponseSchema,
} from '../models/securityPermissionResponse';
import {
  TspublicRestV2SecurityPermissionPrincipalSearchRequest,
  tspublicRestV2SecurityPermissionPrincipalSearchRequestSchema,
} from '../models/tspublicRestV2SecurityPermissionPrincipalSearchRequest';
import {
  TspublicRestV2SecurityPermissionTsobjectSearchRequest,
  tspublicRestV2SecurityPermissionTsobjectSearchRequestSchema,
} from '../models/tspublicRestV2SecurityPermissionTsobjectSearchRequest';
import {
  TspublicRestV2SecurityShareTsobjectRequest,
  tspublicRestV2SecurityShareTsobjectRequestSchema,
} from '../models/tspublicRestV2SecurityShareTsobjectRequest';
import {
  TspublicRestV2SecurityShareVisualizationRequest,
  tspublicRestV2SecurityShareVisualizationRequestSchema,
} from '../models/tspublicRestV2SecurityShareVisualizationRequest';
import { Type7Enum, type7EnumSchema } from '../models/type7Enum';
import { array, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SecurityController extends BaseController {
  /**
   * To list the permissions for user and user groups on an object, use this endpoint. The response will
   * include only those users and groups with have either VIEW OR MODIFY permission.
   *
   * You can optionally see the permission on the dependent objects as well by enabling includeDependent
   * field.
   *
   * @param id               GUID of the metadata object for which the permission needs to be obtained.
   * @param type             Type of metadata object. Valid values: Liveboard|Answer|DataObject|Column
   * @param includeDependent When this field is set to true, the API returns the permission details for
   *                                      the dependent objects for the the object included in the request
   * @return Response from the API call
   */
  async restapiV2GetPermissionOnObject(
    id: string,
    type: Type7Enum,
    includeDependent?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SecurityPermissionResponse>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/security/permission/tsobject'
    );
    const mapped = req.prepareArgs({
      id: [id, string()],
      type: [type, type7EnumSchema],
      includeDependent: [includeDependent, optional(boolean())],
    });
    req.query('id', mapped.id);
    req.query('type', mapped.type);
    req.query('includeDependent', mapped.includeDependent);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(securityPermissionResponseSchema, requestOptions);
  }

  /**
   * Use this endpoint to list the objects on which a user or user group has permission. The response
   * will include only those objects on which the user or user group has either VIEW OR MODIFY permission.
   *
   *
   * Requires administration privilege
   *
   * @param id   GUID of the user or user group for which the object permission needs to be obtained
   * @param name Name of the ser or user group for which the object permission needs to be obtained
   * @return Response from the API call
   */
  async restapiV2GetPermissionForPrincipal(
    id?: string,
    name?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PrincipalSearchResponse>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/security/permission/principal'
    );
    const mapped = req.prepareArgs({
      id: [id, optional(string())],
      name: [name, optional(string())],
    });
    req.query('id', mapped.id);
    req.query('name', mapped.name);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(principalSearchResponseSchema, requestOptions);
  }

  /**
   * To programmatically share ThoughtSpot objects with another user or user group, use this endpoint.
   *
   * When you share an object like a Liveboard or visualization, a notification with a live link is sent
   * to the user. When the users access this object, they can view the last saved version of the object.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2ShareObject(
    body: TspublicRestV2SecurityShareTsobjectRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/security/share/tsobject'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2SecurityShareTsobjectRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * If you want to share a specific visualization from a Liveboard with another user or user group, then
   * use this endpoint.
   *
   * Requires privilege to share the visualization
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2ShareVisualization(
    body: TspublicRestV2SecurityShareVisualizationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/security/share/visualization'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2SecurityShareVisualizationRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To list the permissions for user and user groups on a list of objects, use this endpoint. The
   * response will include only those users and groups with have either VIEW OR MODIFY permission.
   *
   * You can either provide list of object ids or type of objects to list the permissions for. One of
   * these inputs is mandatory. If both are provided then only object ids will be considred.
   *
   * You can optionally provide users or user groups for which the persmission needs to be displayed.
   *
   * You can optionally see the permission on the dependent objects as well by enabling includeDependent
   * field.
   *
   * Requires administration privilege
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2SearchPermissionOnObjects(
    body: TspublicRestV2SecurityPermissionTsobjectSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SecurityPermissionResponse[]>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/security/permission/tsobject/search'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2SecurityPermissionTsobjectSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(
      array(securityPermissionResponseSchema),
      requestOptions
    );
  }

  /**
   * To list the permissions for user and user groups on a list of objects, use this endpoint. The
   * response will include only those users and groups with have either VIEW OR MODIFY permission.
   *
   * You can either provide list of object ids or type of objects to list the permissions for. One of
   * these inputs is mandatory. If both are provided then only object ids will be considred.
   *
   * You can optionally provide users or user groups for which the persmission needs to be displayed.
   *
   * You can optionally see the permission on the dependent objects as well by enabling includeDependent
   * field.
   *
   * Requires administration privilege
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2SearchPermissionForPrincipals(
    body: TspublicRestV2SecurityPermissionPrincipalSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PrincipalSearchResponse[]>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/security/permission/principal/search'
    );
    const mapped = req.prepareArgs({
      body: [
        body,
        tspublicRestV2SecurityPermissionPrincipalSearchRequestSchema,
      ],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(array(principalSearchResponseSchema), requestOptions);
  }
}
