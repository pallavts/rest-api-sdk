/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  ConnectionResponse,
  connectionResponseSchema,
} from '../models/connectionResponse';
import {
  ConnectionTableColumnsResponse,
  connectionTableColumnsResponseSchema,
} from '../models/connectionTableColumnsResponse';
import {
  ConnectionTableResponse,
  connectionTableResponseSchema,
} from '../models/connectionTableResponse';
import {
  CreateConnectionResponse,
  createConnectionResponseSchema,
} from '../models/createConnectionResponse';
import {
  TspublicRestV2ConnectionAddtableRequest,
  tspublicRestV2ConnectionAddtableRequestSchema,
} from '../models/tspublicRestV2ConnectionAddtableRequest';
import {
  TspublicRestV2ConnectionCreateRequest,
  tspublicRestV2ConnectionCreateRequestSchema,
} from '../models/tspublicRestV2ConnectionCreateRequest';
import {
  TspublicRestV2ConnectionRemovetableRequest,
  tspublicRestV2ConnectionRemovetableRequestSchema,
} from '../models/tspublicRestV2ConnectionRemovetableRequest';
import {
  TspublicRestV2ConnectionSearchRequest,
  tspublicRestV2ConnectionSearchRequestSchema,
} from '../models/tspublicRestV2ConnectionSearchRequest';
import {
  TspublicRestV2ConnectionTablecoloumnRequest,
  tspublicRestV2ConnectionTablecoloumnRequestSchema,
} from '../models/tspublicRestV2ConnectionTablecoloumnRequest';
import {
  TspublicRestV2ConnectionTableRequest,
  tspublicRestV2ConnectionTableRequestSchema,
} from '../models/tspublicRestV2ConnectionTableRequest';
import {
  TspublicRestV2ConnectionUpdateRequest,
  tspublicRestV2ConnectionUpdateRequestSchema,
} from '../models/tspublicRestV2ConnectionUpdateRequest';
import { array, boolean, string } from '../schema';
import { BaseController } from './baseController';

export class ConnectionController extends BaseController {
  /**
   * To get the details of a specific connection use this endpoint.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param id The GUID of the connection to query
   * @return Response from the API call
   */
  async getConnection(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/connection');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(connectionResponseSchema, requestOptions);
  }

  /**
   * To get the list of databases for a connection, use this endpoint.
   *
   * The response will include databases from the data platform corresponding to the connection id
   * provided.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param id The GUID of the connection
   * @return Response from the API call
   */
  async getConnectionDatabase(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string[]>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/connection/database'
    );
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(string()), requestOptions);
  }

  /**
   * To get the details of tables from a connection, use this endpoint.
   *
   * You can get the details of tables in the data platform for the connection id provided.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async getConnectionTables(
    body: TspublicRestV2ConnectionTableRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionTableResponse>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/connection/table'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionTableRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(connectionTableResponseSchema, requestOptions);
  }

  /**
   * To get the details of columns in a table associated to a connection, use this endpoint.
   *
   * You can get the columns of any table available in the data platform for the connection id provided.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async getConnectionTableColumns(
    body: TspublicRestV2ConnectionTablecoloumnRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionTableColumnsResponse>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/connection/tablecoloumn'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionTablecoloumnRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(connectionTableColumnsResponseSchema, requestOptions);
  }

  /**
   * To programmatically create a connection in the ThoughtSpot system use this API endpoint.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async createConnection(
    body: TspublicRestV2ConnectionCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateConnectionResponse>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/connection/create'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(createConnectionResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing connection
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async updateConnection(
    body: TspublicRestV2ConnectionUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/connection/update'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To remove a connection from the ThoughtSpot system, use this endpoint.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param id A JSON array of GUIDs of the connection
   * @return Response from the API call
   */
  async deleteConnection(
    id: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'DELETE',
      '/tspublic/rest/v2/connection/delete'
    );
    const mapped = req.prepareArgs({ id: [id, array(string())] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add table to an existing connection, use this endpoint
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async addTableToConnection(
    body: TspublicRestV2ConnectionAddtableRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/connection/addtable'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionAddtableRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove a table from a connection, use API endpoint.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async removeTableFromConnection(
    body: TspublicRestV2ConnectionRemovetableRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/connection/removetable'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionRemovetableRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific connection or all connections in the ThoughtSpot system use this
   * end point.
   *
   * Permission: Requires datamanagement privilege
   *
   * @param body
   * @return Response from the API call
   */
  async searchConnection(
    body: TspublicRestV2ConnectionSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectionResponse[]>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/connection/search'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ConnectionSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(array(connectionResponseSchema), requestOptions);
  }
}
