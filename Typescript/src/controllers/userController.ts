/**
 * ThoughtSpot Public REST APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import { StateEnum, stateEnumSchema } from '../models/stateEnum';
import {
  TspublicRestV2UserAddgroupRequest,
  tspublicRestV2UserAddgroupRequestSchema,
} from '../models/tspublicRestV2UserAddgroupRequest';
import {
  TspublicRestV2UserAddorgRequest,
  tspublicRestV2UserAddorgRequestSchema,
} from '../models/tspublicRestV2UserAddorgRequest';
import {
  TspublicRestV2UserChangepasswordRequest,
  tspublicRestV2UserChangepasswordRequestSchema,
} from '../models/tspublicRestV2UserChangepasswordRequest';
import {
  TspublicRestV2UserRemovegroupRequest,
  tspublicRestV2UserRemovegroupRequestSchema,
} from '../models/tspublicRestV2UserRemovegroupRequest';
import {
  TspublicRestV2UserSearchRequest,
  tspublicRestV2UserSearchRequestSchema,
} from '../models/tspublicRestV2UserSearchRequest';
import {
  TspublicRestV2UserUpdateRequest,
  tspublicRestV2UserUpdateRequestSchema,
} from '../models/tspublicRestV2UserUpdateRequest';
import { Type8Enum, type8EnumSchema } from '../models/type8Enum';
import { UserResponse, userResponseSchema } from '../models/userResponse';
import { VisibilityEnum, visibilityEnumSchema } from '../models/visibilityEnum';
import { array, boolean, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class UserController extends BaseController {
  /**
   * To get the details of a specific user account by username or user id, use this endpoint. At Least
   * one value is needed.  When both are given, user id will be considered to fetch user information
   *
   * @param name Username of the user that you want to query.
   * @param id   The GUID of the user account to query
   * @return Response from the API call
   */
  async restapiV2GetUser(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/user');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * To programmatically create a user account in the ThoughtSpot system use this API endpoint. Using
   * this API, you can create a user and assign groups.
   * To create a user, you require admin user privileges.
   * All users created in the ThoughtSpot system are added to ALL_GROUP
   *
   * @param name                      Name of the user. The username string must be unique.
   * @param displayName               A unique display name string for the user account, usually
   *                                                    their first and last name
   * @param password                  Password for the user account.
   * @param visibility                Visibility of the user. The visibility attribute is set to
   *                                                    DEFAULT when creating a user. The DEFAULT attribute makes a
   *                                                    user visible to other users and user groups, and this allows
   *                                                    them to share objects
   * @param mail                      Email of the user account
   * @param orgIds                    Array of org identifiers. If no value is provided then user
   *                                                    will be created in the organization associated with the login
   *                                                    session.
   * @param state                     Status of user account. acitve or inactive.
   * @param notifyOnShare             User preference for receiving email notifications when another
   *                                                    ThoughtSpot user shares answers or pinboards.
   * @param showWalkMe                The user preference for revisiting the onboarding experience.
   * @param analystOnboardingComplete ThoughtSpot provides an interactive guided walkthrough to
   *                                                    onboard new users. The onboarding experience leads users
   *                                                    through a set of actions to help users get started and
   *                                                    accomplish their tasks quickly. The users can turn off the
   *                                                    Onboarding experience and access it again when they need
   *                                                    assistance with the ThoughtSpot UI.
   * @param type                      Type of user. LOCAL_USER indicates that the user is created
   *                                                    locally in the ThoughtSpot system.
   * @return Response from the API call
   */
  async restapiV2CreateUser(
    name: string,
    displayName: string,
    password: string,
    visibility?: VisibilityEnum,
    mail?: string,
    orgIds?: number[],
    state?: StateEnum,
    notifyOnShare?: boolean,
    showWalkMe?: boolean,
    analystOnboardingComplete?: boolean,
    type?: Type8Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/user/create');
    const mapped = req.prepareArgs({
      name: [name, string()],
      displayName: [displayName, string()],
      password: [password, string()],
      visibility: [visibility, optional(visibilityEnumSchema)],
      mail: [mail, optional(string())],
      orgIds: [orgIds, optional(array(number()))],
      state: [state, optional(stateEnumSchema)],
      notifyOnShare: [notifyOnShare, optional(boolean())],
      showWalkMe: [showWalkMe, optional(boolean())],
      analystOnboardingComplete: [
        analystOnboardingComplete,
        optional(boolean()),
      ],
      type: [type, optional(type8EnumSchema)],
    });
    req.query('name', mapped.name);
    req.query('displayName', mapped.displayName);
    req.query('password', mapped.password);
    req.query('visibility', mapped.visibility);
    req.query('mail', mapped.mail);
    req.query('orgIds', mapped.orgIds);
    req.query('state', mapped.state);
    req.query('notifyOnShare', mapped.notifyOnShare);
    req.query('showWalkMe', mapped.showWalkMe);
    req.query('analystOnboardingComplete', mapped.analystOnboardingComplete);
    req.query('type', mapped.type);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(userResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing user account.  To modify a user,
   * you require admin user privileges.
   * At least one of User Id or username is mandatory. When both are given, then user id will be
   * considered and username will be updated
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2UpdateUser(
    body: TspublicRestV2UserUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/user/update');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2UserUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To remove a user from the ThoughtSpot system, use this endpoint.
   * At Least one value needed.  When both are given user id will be considered to delete user.
   *
   * @param name  Username of the user that you want to query.
   * @param id    The GUID of the user account to query
   * @param orgId Unique identifier of the organization from which the user would be deleted. If no value is
   *                        provided then user will be deleted from the organization associated with the login session.
   * @return Response from the API call
   */
  async restapiV2DeleteUser(
    name?: string,
    id?: string,
    orgId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('DELETE', '/tspublic/rest/v2/user/delete');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
      orgId: [orgId, optional(number())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.query('orgId', mapped.orgId);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add groups to an existing ThoughtSpot user use this endpoint.
   * When you assign groups to a user, the user inherits the privileges assigned to those groups.
   * At least one of User Id or username is mandatory. When both are given, then user id will be
   * considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2AddUserToGroups(
    body: TspublicRestV2UserAddgroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/user/addgroup');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2UserAddgroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove groups from an existing ThoughtSpot user, use this API endpoint.
   * The API removes only the user association. It does not delete the user or group from the Thoughtspot
   * system
   * At least one of User Id or username is mandatory. When both are given, then user id will be
   * considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2RemoveUserFromGroups(
    body: TspublicRestV2UserRemovegroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/user/removegroup');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2UserRemovegroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific user account or all users in the ThoughtSpot system use this end
   * point.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2SearchUsers(
    body: TspublicRestV2UserSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/tspublic/rest/v2/user/search');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2UserSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To change the password of a ThoughtSpot user account, use this endpoint.
   *
   * At least one of id or name of user is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2ChangePasswordOfUser(
    body: TspublicRestV2UserChangepasswordRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/user/changepassword'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2UserChangepasswordRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add existing ThoughtSpot users to an organization, use this API endpoint.
   *
   * At least one of id or name of the organization is required. When both are given, then organization
   * id will be considered.
   *
   * Requires Administration access for the organization to which users need to be added.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2AddUserToOrgs(
    body: TspublicRestV2UserAddorgRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/user/addorg');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2UserAddorgRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }
}
