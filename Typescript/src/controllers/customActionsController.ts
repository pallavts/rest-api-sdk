/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  TspublicRestV2CustomactionAssociationUpdateRequest,
  tspublicRestV2CustomactionAssociationUpdateRequestSchema,
} from '../models/tspublicRestV2CustomactionAssociationUpdateRequest';
import {
  TspublicRestV2CustomactionCreateRequest,
  tspublicRestV2CustomactionCreateRequestSchema,
} from '../models/tspublicRestV2CustomactionCreateRequest';
import {
  TspublicRestV2CustomactionSearchRequest,
  tspublicRestV2CustomactionSearchRequestSchema,
} from '../models/tspublicRestV2CustomactionSearchRequest';
import {
  TspublicRestV2CustomactionUpdateRequest,
  tspublicRestV2CustomactionUpdateRequestSchema,
} from '../models/tspublicRestV2CustomactionUpdateRequest';
import { string, unknown } from '../schema';
import { BaseController } from './baseController';

export class CustomActionsController extends BaseController {
  /**
   * To get details of a specific custom action configured in the ThoughtSpot system, use this endpoint
   *
   * @param id GUID of the custom action
   * @return Response from the API call
   */
  async getCustomAction(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/customaction');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To programmatically create custom actions on ThoughtSpot clusters that support embedding
   * configuration, use this endpoint
   *
   * @param body
   * @return Response from the API call
   */
  async createCustomAction(
    body: TspublicRestV2CustomactionCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/customaction/create'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2CustomactionCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To programmatically edit an existing custom action, use this endpoint
   *
   * @param body
   * @return Response from the API call
   */
  async updateCustomAction(
    body: TspublicRestV2CustomactionUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/customaction/update'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2CustomactionUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To programmatically delete a custom action, use this endpoint
   *
   * @param id GUID of the custom action
   * @return Response from the API call
   */
  async deleteCustomAction(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'DELETE',
      '/tspublic/rest/v2/customaction/delete'
    );
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To search custom actions available on a ThoughtSpot instance, use this endpoint
   *
   * @param body
   * @return Response from the API call
   */
  async searchCustomAction(
    body: TspublicRestV2CustomactionSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/customaction/search'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2CustomactionSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * ThoughtSpot supports associating custom actions to Liveboards, answers, and worksheets. To get the
   * details of the ThoughtSpot objects associated with a custom action, use this endpoint.
   *
   * @param id GUID of the custom action
   * @return Response from the API call
   */
  async getCustomActionAssociation(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'GET',
      '/tspublic/rest/v2/customaction/association'
    );
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To programmatically associate a custom action to a ThoughtSpot object, use this endpoint
   *
   * @param body
   * @return Response from the API call
   */
  async updateCustomActionAssociation(
    body: TspublicRestV2CustomactionAssociationUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/customaction/association/update'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2CustomactionAssociationUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To remove custom action associations to ThoughtSpot objects, use this endpoint
   *
   * @param id          GUID of the custom action
   * @param association A JSON map of the attributes with association of the action to ThoughtSpot object ID
   *                              Example:    {"id":"0dbd5b3a-84c1-4407-9803-cf07d67e6fcf","name":"My worksheet
   *                              action","version":"v2","type":"URL","detail":{"link":"https://unpkg.com ","function":
   *                              "my-worksheet-action","authSelect":"NONE","authToken":"","encodeUser":"","apiKey":"X-
   *                              API-KEY","apiValue":"","additionalUrlHeaders":"{}"},"actionAssociationMap":
   *                              {"WORKSHEET":{"2b9d083a-275c-4984-9cfe-90b036affa17":{"enabled":"true","context":
   *                              "PRIMARY"}}},"context":"NONE","availability":[ ],"userGroupList":["d0326b56-ef23-4c8a-
   *                              8327-a30e99bcc72b"]}
   * @return Response from the API call
   */
  async deleteCustomActionAssociation(
    id: string,
    association: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'DELETE',
      '/tspublic/rest/v2/customactions/association/delete'
    );
    const mapped = req.prepareArgs({
      id: [id, string()],
      association: [association, string()],
    });
    req.query('id', mapped.id);
    req.query('association', mapped.association);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsJson(unknown(), requestOptions);
  }
}
