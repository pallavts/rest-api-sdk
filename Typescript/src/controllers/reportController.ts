/**
 * RESTAPI SDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import {
  TspublicRestV2ReportAnswerRequest,
  tspublicRestV2ReportAnswerRequestSchema,
} from '../models/tspublicRestV2ReportAnswerRequest';
import {
  TspublicRestV2ReportLiveboardRequest,
  tspublicRestV2ReportLiveboardRequestSchema,
} from '../models/tspublicRestV2ReportLiveboardRequest';
import { BaseController } from './baseController';

export class ReportController extends BaseController {
  /**
   * To programmatically download Answer data as a file, use this endpoint.
   *
   * The PDF will download data in the tabular format even if Answer is saved as chart.
   *
   * Permission: Requires at least view access to the object and datadownloading privilege
   *
   * @param body
   * @return Response from the API call
   */
  async answerReport(
    body: TspublicRestV2ReportAnswerRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('POST', '/tspublic/rest/v2/report/answer');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ReportAnswerRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsStream(requestOptions);
  }

  /**
   * To programmatically download Liveboard data or specific Visualization data from Liveboard as a file,
   * use this endpoint
   *
   * Permission: Requires at least view access to the object and datadownloading privilege
   *
   * @param body
   * @return Response from the API call
   */
  async liveboardReport(
    body: TspublicRestV2ReportLiveboardRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest(
      'POST',
      '/tspublic/rest/v2/report/liveboard'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2ReportLiveboardRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed or unauthorized request');
    return req.callAsStream(requestOptions);
  }
}
