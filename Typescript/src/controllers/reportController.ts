/**
 * ThoughtSpot Public REST APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import { Type16Enum, type16EnumSchema } from '../models/type16Enum';
import { array, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class ReportController extends BaseController {
  /**
   * To programmatically download Answer data as a file, use this endpoint.
   *
   * The PDF will download data in the tabular format even if Answer is saved as chart.
   *
   * @param id   GUID of the Answer to download.
   * @param type Type of file to be generated.
   * @return Response from the API call
   */
  async restapiV2AnswerReport(
    id: string,
    type: Type16Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/report/answer');
    const mapped = req.prepareArgs({
      id: [id, string()],
      type: [type, type16EnumSchema],
    });
    req.query('id', mapped.id);
    req.query('type', mapped.type);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To programmatically download Liveboard data or specific Visualization data from Liveboard as a file,
   * use this endpoint
   *
   * @param type             Type of file to be generated. Valid values: CSV/XLSX/PDF/PNG.
   * @param id               GUID of the Liveboard to download.   This field is considered only when no
   *                                       input is provided for transientContent field.
   * @param vizId            JSON Array of GUIDs of the visualizations in the Liveboard to be included
   *                                       in the downloaded file.   For CSV, XLSX and PNG file download, visualization
   *                                       id is mandatory. CSV and XLSX is valid only for visualization of type table
   *                                       and PNG is valid for charts.   Only one value will be accepted for these
   *                                       formats. If multiple values are provided then first value in the array will
   *                                       be considered.
   * @param transientContent If you have embedded ThoughtSpot in your host application, and you want to
   *                                       download Liveboards with unsaved changes as a file, pass the transient
   *                                       content from the browser fetch request, using the
   *                                       getExportRequestForCurrentPinboard method. For more information, see https:
   *                                       //developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-
   *                                       pinboard.
   * @param runtimeFilter    If you have embedded ThoughtSpot in your host application, and you want to
   *                                       download Liveboards with unsaved changes as a file, pass the transient
   *                                       content from the browser fetch request, using the
   *                                       getExportRequestForCurrentPinboard method. For more information, see https:
   *                                       //developers.thoughtspot.com/docs/?pageid=liveboard-export-api#transient-
   *                                       pinboard .
   * @param runtimeSort      JSON object which provides columns to sort the data at the time of data
   *                                       retrieval.   Example: {"sortCol1":"region","asc1":true,"sortCol2":"date"}
   *                                       For more information, see https://developers.thoughtspot.com/docs/?
   *                                       pageid=runtime-filters
   * @return Response from the API call
   */
  async restapiV2LiveboardReport(
    type: Type16Enum,
    id?: string,
    vizId?: string[],
    transientContent?: string,
    runtimeFilter?: string,
    runtimeSort?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/report/liveboard');
    const mapped = req.prepareArgs({
      type: [type, type16EnumSchema],
      id: [id, optional(string())],
      vizId: [vizId, optional(array(string()))],
      transientContent: [transientContent, optional(string())],
      runtimeFilter: [runtimeFilter, optional(string())],
      runtimeSort: [runtimeSort, optional(string())],
    });
    req.query('type', mapped.type);
    req.query('id', mapped.id);
    req.query('vizId', mapped.vizId);
    req.query('transientContent', mapped.transientContent);
    req.query('runtimeFilter', mapped.runtimeFilter);
    req.query('runtimeSort', mapped.runtimeSort);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(unknown(), requestOptions);
  }
}
