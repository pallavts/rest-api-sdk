/**
 * ThoughtSpot Public REST APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import { GroupResponse, groupResponseSchema } from '../models/groupResponse';
import {
  TspublicRestV2GroupAddgroupRequest,
  tspublicRestV2GroupAddgroupRequestSchema,
} from '../models/tspublicRestV2GroupAddgroupRequest';
import {
  TspublicRestV2GroupAddprivilegeRequest,
  tspublicRestV2GroupAddprivilegeRequestSchema,
} from '../models/tspublicRestV2GroupAddprivilegeRequest';
import {
  TspublicRestV2GroupAdduserRequest,
  tspublicRestV2GroupAdduserRequestSchema,
} from '../models/tspublicRestV2GroupAdduserRequest';
import {
  TspublicRestV2GroupCreateRequest,
  tspublicRestV2GroupCreateRequestSchema,
} from '../models/tspublicRestV2GroupCreateRequest';
import {
  TspublicRestV2GroupRemovegroupRequest,
  tspublicRestV2GroupRemovegroupRequestSchema,
} from '../models/tspublicRestV2GroupRemovegroupRequest';
import {
  TspublicRestV2GroupRemoveprivilegeRequest,
  tspublicRestV2GroupRemoveprivilegeRequestSchema,
} from '../models/tspublicRestV2GroupRemoveprivilegeRequest';
import {
  TspublicRestV2GroupRemoveuserRequest,
  tspublicRestV2GroupRemoveuserRequestSchema,
} from '../models/tspublicRestV2GroupRemoveuserRequest';
import {
  TspublicRestV2GroupSearchRequest,
  tspublicRestV2GroupSearchRequestSchema,
} from '../models/tspublicRestV2GroupSearchRequest';
import {
  TspublicRestV2GroupUpdateRequest,
  tspublicRestV2GroupUpdateRequestSchema,
} from '../models/tspublicRestV2GroupUpdateRequest';
import { boolean, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class GroupController extends BaseController {
  /**
   * To get the details of a specific group by name or id, use this endpoint.
   * At Least one value needed.  When both are given id will be considered to fetch user information.
   *
   * @param name Name of the group
   * @param id   The GUID of the group to query.
   * @return Response from the API call
   */
  async restapiV2GetGroup(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GroupResponse>> {
    const req = this.createRequest('GET', '/tspublic/rest/v2/group');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(groupResponseSchema, requestOptions);
  }

  /**
   * To programmatically create a group in the ThoughtSpot system, use this API endpoint. Using this API,
   * you can create a group and assign privileges and users. For ease of user management and access
   * control, ThoughtSpot administrators can create groups and assign privileges to these groups. The
   * privileges determine the actions that the users belonging to a group are allowed to do. ThoughtSpot
   * also has a default group called ALL_GROUP. When you create new group in ThoughtSpot, they are
   * automatically added to ALL_GROUP. You cannot delete the ALL_GROUP or remove members from it.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2CreateGroup(
    body: TspublicRestV2GroupCreateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GroupResponse>> {
    const req = this.createRequest('POST', '/tspublic/rest/v2/group/create');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupCreateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(groupResponseSchema, requestOptions);
  }

  /**
   * You can use this endpoint to programmatically modify an existing user account.
   * To modify a user, you require admin user privileges.
   * At least one of User Id or username is mandatory. When both are given, then user id will be
   * considered and username will be updated
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2UpdateGroup(
    body: TspublicRestV2GroupUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/group/update');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To remove a group from the ThoughtSpot system, send a DELETE request to this endpoint. At Least one
   * value needed.  When both are given user id will be considered to fetch user information.
   *
   * @param name Name of the group.
   * @param id   The GUID of the group
   * @return Response from the API call
   */
  async restapiV2DeleteGroup(
    name?: string,
    id?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('DELETE', '/tspublic/rest/v2/group/delete');
    const mapped = req.prepareArgs({
      name: [name, optional(string())],
      id: [id, optional(string())],
    });
    req.query('name', mapped.name);
    req.query('id', mapped.id);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add privileges to an existing group, use API endpoint.
   * When you assign privileges to a group,  all the users under to this group inherits the privileges
   * assigned to that group.
   * At least one of id or name of group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2AddPrivilegesToGroup(
    body: TspublicRestV2GroupAddprivilegeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/group/addprivilege'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupAddprivilegeRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove privileges from a group, use API endpoint. The API removes only the
   * privilege association. It does not delete the privilege or group from the Thoughtspot system. At
   * least one of id or name of group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2RemovePrivilegesFromGroup(
    body: TspublicRestV2GroupRemoveprivilegeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/group/removeprivilege'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupRemoveprivilegeRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add existing ThoughtSpot users to a group, use this API endpoint. When you
   * assign users to a group, the users inherits the privileges assigned to that group. At least one of
   * id or name of the group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2AddUsersToGroup(
    body: TspublicRestV2GroupAdduserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/group/adduser');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupAdduserRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove users from a group, use API endpoint.The API removes only the user
   * association. It does not delete the users or group from the Thoughtspot system. At least one of id
   * or name of group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2RemoveUsersFromGroup(
    body: TspublicRestV2GroupRemoveuserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/group/removeuser');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupRemoveuserRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically add existing groups to a group, use API endpoint. When you assign groups to a
   * group, the group inherits the privileges assigned to those groups. At least one of id or name of
   * group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2AddGroupsToGroup(
    body: TspublicRestV2GroupAddgroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest('PUT', '/tspublic/rest/v2/group/addgroup');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupAddgroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To programmatically remove groups from a group, use API endpoint.The API removes only the group
   * association. It does not delete the group from the Thoughtspot system. At least one of id or name of
   * group is required. When both are given user id will be considered.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2RemoveGroupsFromGroup(
    body: TspublicRestV2GroupRemovegroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<boolean>> {
    const req = this.createRequest(
      'PUT',
      '/tspublic/rest/v2/group/removegroup'
    );
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupRemovegroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(boolean(), requestOptions);
  }

  /**
   * To get the details of a specific group account or all groups in the ThoughtSpot system, use this end
   * point.
   *
   * @param body
   * @return Response from the API call
   */
  async restapiV2SearchGroups(
    body: TspublicRestV2GroupSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/tspublic/rest/v2/group/search');
    const mapped = req.prepareArgs({
      body: [body, tspublicRestV2GroupSearchRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ErrorResponseError, 'Operation failed');
    return req.callAsJson(unknown(), requestOptions);
  }
}
