/*
 * TSPublicRestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost.ApiHelper;
import localhost.AuthManager;
import localhost.Configuration;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.Headers;
import localhost.http.client.HttpCallback;
import localhost.http.client.HttpClient;
import localhost.http.client.HttpContext;
import localhost.http.request.HttpRequest;
import localhost.http.response.HttpResponse;
import localhost.http.response.HttpStringResponse;
import localhost.models.ApiRestV2GroupAddprivilegeRequest;
import localhost.models.ApiRestV2GroupAdduserRequest;
import localhost.models.ApiRestV2GroupCreateRequest;
import localhost.models.ApiRestV2GroupRemoveuserRequest;
import localhost.models.ApiRestV2GroupSearchRequest;
import localhost.models.GroupResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class GroupController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public GroupController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public GroupController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * To get the details of a specific group by name or id, use this endpoint. At Least one value
     * needed. When both are given id will be considered to fetch user information.
     * @param  name  Optional parameter: Name of the group
     * @param  id  Optional parameter: The GUID of the group to query
     * @return    Returns the GroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GroupResponse getGroup(
            final String name,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildGetGroupRequest(name, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetGroupResponse(context);
    }

    /**
     * To get the details of a specific group by name or id, use this endpoint. At Least one value
     * needed. When both are given id will be considered to fetch user information.
     * @param  name  Optional parameter: Name of the group
     * @param  id  Optional parameter: The GUID of the group to query
     * @return    Returns the GroupResponse response from the API call
     */
    public CompletableFuture<GroupResponse> getGroupAsync(
            final String name,
            final String id) {
        return makeHttpCallAsync(() -> buildGetGroupRequest(name, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetGroupResponse(context));
    }

    /**
     * Builds the HttpRequest object for getGroup.
     */
    private HttpRequest buildGetGroupRequest(
            final String name,
            final String id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getGroup.
     * @return An object of type GroupResponse
     */
    private GroupResponse handleGetGroupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GroupResponse result = ApiHelper.deserialize(responseBody,
                GroupResponse.class);

        return result;
    }

    /**
     * To programmatically create a group in the ThoughtSpot system use this API endpoint. Using
     * this API, you can create a group and assign privileges and users. For ease of user management
     * and access control, ThoughtSpot administrators can create groups and assign privileges to
     * these groups. The privileges determine the actions that the users belonging to a group are
     * allowed to do. ThoughtSpot also has a default group called ALL_GROUP. When you create new
     * group in ThoughtSpot, they are automatically added to ALL_GROUP. You cannot delete the
     * ALL_GROUP or remove members from it.
     * @param  body  Required parameter: Example:
     * @return    Returns the GroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GroupResponse createGroup(
            final ApiRestV2GroupCreateRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateGroupRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateGroupResponse(context);
    }

    /**
     * To programmatically create a group in the ThoughtSpot system use this API endpoint. Using
     * this API, you can create a group and assign privileges and users. For ease of user management
     * and access control, ThoughtSpot administrators can create groups and assign privileges to
     * these groups. The privileges determine the actions that the users belonging to a group are
     * allowed to do. ThoughtSpot also has a default group called ALL_GROUP. When you create new
     * group in ThoughtSpot, they are automatically added to ALL_GROUP. You cannot delete the
     * ALL_GROUP or remove members from it.
     * @param  body  Required parameter: Example:
     * @return    Returns the GroupResponse response from the API call
     */
    public CompletableFuture<GroupResponse> createGroupAsync(
            final ApiRestV2GroupCreateRequest body) {
        return makeHttpCallAsync(() -> buildCreateGroupRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateGroupResponse(context));
    }

    /**
     * Builds the HttpRequest object for createGroup.
     */
    private HttpRequest buildCreateGroupRequest(
            final ApiRestV2GroupCreateRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group/create");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createGroup.
     * @return An object of type GroupResponse
     */
    private GroupResponse handleCreateGroupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GroupResponse result = ApiHelper.deserialize(responseBody,
                GroupResponse.class);

        return result;
    }

    /**
     * To remove a group from the ThoughtSpot system, use this endpoint. At least one value of name
     * or id is needed. When both are given group id will be considered to delete.
     * @param  name  Optional parameter: Name of the group that you want to delete.
     * @param  id  Optional parameter: The GUID of the group to delete.
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean deleteGroup(
            final String name,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildDeleteGroupRequest(name, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteGroupResponse(context);
    }

    /**
     * To remove a group from the ThoughtSpot system, use this endpoint. At least one value of name
     * or id is needed. When both are given group id will be considered to delete.
     * @param  name  Optional parameter: Name of the group that you want to delete.
     * @param  id  Optional parameter: The GUID of the group to delete.
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> deleteGroupAsync(
            final String name,
            final String id) {
        return makeHttpCallAsync(() -> buildDeleteGroupRequest(name, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteGroupResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteGroup.
     */
    private HttpRequest buildDeleteGroupRequest(
            final String name,
            final String id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group/delete");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("name", name);
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteGroup.
     * @return An object of type boolean
     */
    private Boolean handleDeleteGroupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        boolean result = Boolean.parseBoolean(responseBody);

        return result;
    }

    /**
     * To programmatically add existing ThoughtSpot users to a group use API endpoint. When you
     * assign users to a group, the users inherits the privileges assigned to that group. At least
     * one of id or name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean addUsersToGroup(
            final ApiRestV2GroupAdduserRequest body) throws ApiException, IOException {
        HttpRequest request = buildAddUsersToGroupRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleAddUsersToGroupResponse(context);
    }

    /**
     * To programmatically add existing ThoughtSpot users to a group use API endpoint. When you
     * assign users to a group, the users inherits the privileges assigned to that group. At least
     * one of id or name of group is required. When both are given user id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> addUsersToGroupAsync(
            final ApiRestV2GroupAdduserRequest body) {
        return makeHttpCallAsync(() -> buildAddUsersToGroupRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleAddUsersToGroupResponse(context));
    }

    /**
     * Builds the HttpRequest object for addUsersToGroup.
     */
    private HttpRequest buildAddUsersToGroupRequest(
            final ApiRestV2GroupAdduserRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group/adduser");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for addUsersToGroup.
     * @return An object of type boolean
     */
    private Boolean handleAddUsersToGroupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        boolean result = Boolean.parseBoolean(responseBody);

        return result;
    }

    /**
     * To programmatically remove users from a group, use this API endpoint. The API removes only
     * the user association. It does not delete the users or group from the Thoughtspot system. At
     * least one of id or name of group is required. When both are given, id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean removeUsersFromGroup(
            final ApiRestV2GroupRemoveuserRequest body) throws ApiException, IOException {
        HttpRequest request = buildRemoveUsersFromGroupRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRemoveUsersFromGroupResponse(context);
    }

    /**
     * To programmatically remove users from a group, use this API endpoint. The API removes only
     * the user association. It does not delete the users or group from the Thoughtspot system. At
     * least one of id or name of group is required. When both are given, id will be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> removeUsersFromGroupAsync(
            final ApiRestV2GroupRemoveuserRequest body) {
        return makeHttpCallAsync(() -> buildRemoveUsersFromGroupRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRemoveUsersFromGroupResponse(context));
    }

    /**
     * Builds the HttpRequest object for removeUsersFromGroup.
     */
    private HttpRequest buildRemoveUsersFromGroupRequest(
            final ApiRestV2GroupRemoveuserRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group/removeuser");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for removeUsersFromGroup.
     * @return An object of type boolean
     */
    private Boolean handleRemoveUsersFromGroupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        boolean result = Boolean.parseBoolean(responseBody);

        return result;
    }

    /**
     * To programmatically add privileges to an existing group, use API endpoint. When you assign
     * privileges to a group, all the users under to this group inherits the privileges assigned
     * from this group. At least one of id or name of group is required. When both are given id will
     * be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Boolean addPrivilegesToGroup(
            final ApiRestV2GroupAddprivilegeRequest body) throws ApiException, IOException {
        HttpRequest request = buildAddPrivilegesToGroupRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleAddPrivilegesToGroupResponse(context);
    }

    /**
     * To programmatically add privileges to an existing group, use API endpoint. When you assign
     * privileges to a group, all the users under to this group inherits the privileges assigned
     * from this group. At least one of id or name of group is required. When both are given id will
     * be considered.
     * @param  body  Required parameter: Example:
     * @return    Returns the Boolean response from the API call
     */
    public CompletableFuture<Boolean> addPrivilegesToGroupAsync(
            final ApiRestV2GroupAddprivilegeRequest body) {
        return makeHttpCallAsync(() -> buildAddPrivilegesToGroupRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleAddPrivilegesToGroupResponse(context));
    }

    /**
     * Builds the HttpRequest object for addPrivilegesToGroup.
     */
    private HttpRequest buildAddPrivilegesToGroupRequest(
            final ApiRestV2GroupAddprivilegeRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group/addprivilege");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for addPrivilegesToGroup.
     * @return An object of type boolean
     */
    private Boolean handleAddPrivilegesToGroupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        boolean result = Boolean.parseBoolean(responseBody);

        return result;
    }

    /**
     * To get the details of a specific group account or all groups in the ThoughtSpot system use
     * this end point. If no inputs are provided, then all groups are included in the response.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of GroupResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GroupResponse> searchGroups(
            final ApiRestV2GroupSearchRequest body) throws ApiException, IOException {
        HttpRequest request = buildSearchGroupsRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSearchGroupsResponse(context);
    }

    /**
     * To get the details of a specific group account or all groups in the ThoughtSpot system use
     * this end point. If no inputs are provided, then all groups are included in the response.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of GroupResponse response from the API call
     */
    public CompletableFuture<List<GroupResponse>> searchGroupsAsync(
            final ApiRestV2GroupSearchRequest body) {
        return makeHttpCallAsync(() -> buildSearchGroupsRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleSearchGroupsResponse(context));
    }

    /**
     * Builds the HttpRequest object for searchGroups.
     */
    private HttpRequest buildSearchGroupsRequest(
            final ApiRestV2GroupSearchRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/rest/v2/group/search");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", config.getContentType());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for searchGroups.
     * @return An object of type List of GroupResponse
     */
    private List<GroupResponse> handleSearchGroupsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GroupResponse> result = ApiHelper.deserializeArray(responseBody,
                GroupResponse[].class);
        return result;
    }

}