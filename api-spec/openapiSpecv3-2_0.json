{
  "openapi": "3.0.0",
  "info": {
    "title": "ThoughtSpot Public REST API",
    "version": "2.0"
  },
  "x-roles": [
    {
      "name": "9.2.0.cl",
      "id": "9.2.0.cl",
      "tags": [
        "9.2.0.cl"
      ],
      "description": "Roles for version 9.2.0.cl"
    }
  ],
  "tags": [],
  "paths": {
    "/api/rest/2.0/auth/session/user": {
      "get": {
        "operationId": "getCurrentUserInfo",
        "description": "Get session information for the currently logged-in user.\n\nAll users can view their session information. The API response varies according to user's access permissions and group privilege.\n\nundefined",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetch current session user detail successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "name": "tsadmin",
                      "display_name": "Administrator",
                      "visibility": "SHARABLE",
                      "author_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                      "can_change_password": true,
                      "complete_detail": true,
                      "creation_time_in_millis": 1354006445722,
                      "current_org": {
                        "id": 0,
                        "name": "Primary"
                      },
                      "deleted": false,
                      "deprecated": false,
                      "account_type": "LOCAL_USER",
                      "account_status": "ACTIVE",
                      "email": "",
                      "expiration_time_in_millis": 1684921846,
                      "external": false,
                      "favorite_metadata": [],
                      "first_login_time_in_millis": 1638322388839,
                      "group_mask": 6,
                      "hidden": false,
                      "home_liveboard": null,
                      "incomplete_details": [],
                      "is_first_login": false,
                      "modification_time_in_millis": 1624978046809,
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "notify_on_share": true,
                      "onboarding_experience_completed": false,
                      "orgs": null,
                      "owner_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "parent_type": "USER",
                      "privileges": [
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "SHAREWITHALL",
                        "A3ANALYSIS",
                        "DATAMANAGEMENT",
                        "DATADOWNLOADING",
                        "ADMINISTRATION"
                      ],
                      "show_onboarding_experience": true,
                      "super_user": false,
                      "system_user": true,
                      "tags": [],
                      "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                      "user_groups": [
                        {
                          "id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                          "name": "Administrator"
                        }
                      ],
                      "user_inherited_groups": [
                        {
                          "id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                          "name": "Administrator"
                        }
                      ],
                      "welcome_email_sent": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/token": {
      "get": {
        "operationId": "getCurrentUserToken",
        "description": "Get token for the currently logged-in user.",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching token for current user successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "token": "dHNhZG1pbjpKSE5vYVhKdk1TUlRTRUV0TWpVMkpEVXdNREF3TUNRMmNVZEJUbmw0YldsdVZXVnZURXBOWkZjMVVWcEJQVDBrVEZCMldYQldWR016Y1VGRlkwNXVibXRNZEZsbGFtcHdSVmRPV20wek1uZDFWRVo2T1hnNVowMVBPRDA=",
                      "creation_time_in_millis": 1684929916303,
                      "expiration_time_in_millis": 1685016316303,
                      "valid_for_user_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "valid_for_username": "tsadmin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/search": {
      "post": {
        "operationId": "searchUsers",
        "description": "Gets user details.To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, user preference settings, userâ€™s favorite objects, or home Liveboard setting.\n\nAvailable to all users. Users with `ADMINISTRATION` (Can administer ThoughtSpot) privileges can view all users properties.\n\n**Note**: If you are querying users by Org, user privileges may show null values in the API response.\n\nundefined",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to search",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "GUID or name of the group to which the user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding walkthrough.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "org_identifiers": {
                    "description": "IDs or names of the Orgs to which the user belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "Unique ID or name of the users home liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects which are assigned as favorites of the user.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptions",
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Filter with list of role assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "include_favorite_metadata": {
                    "description": "Indicates if the user's favorite objects should be displayed.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "su",
                        "display_name": "Administrator Super-User",
                        "visibility": "SHARABLE",
                        "author_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 14,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "parent_type": "USER",
                        "privileges": [
                          "SHAREWITHALL",
                          "DATADOWNLOADING",
                          "AUTHORING",
                          "USERDATAUPLOADING",
                          "DATAMANAGEMENT",
                          "A3ANALYSIS",
                          "ADMINISTRATION"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": true,
                        "system_user": true,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                            "name": "System"
                          },
                          {
                            "id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                            "name": "Administrator"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                            "name": "System"
                          },
                          {
                            "id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                            "name": "Administrator"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "4391d676-2dd8-4248-b6db-d973811f0122",
                        "name": "guest",
                        "display_name": "Guest",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "4391d676-2dd8-4248-b6db-d973811f0122",
                        "parent_type": "USER",
                        "privileges": [
                          "DATADOWNLOADING",
                          "AUTHORING",
                          "USERDATAUPLOADING"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": true,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          },
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          },
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                        "name": "system",
                        "display_name": "System User",
                        "visibility": "SHARABLE",
                        "author_id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 12,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                        "parent_type": "USER",
                        "privileges": [
                          "AUTHORING",
                          "DATAMANAGEMENT",
                          "A3ANALYSIS"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": true,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                            "name": "System"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                            "name": "System"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "994cdad7-2143-4936-a35f-8dd0f852e4d6",
                        "name": "guest1",
                        "display_name": "Guest 1",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "guest1@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503237890,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "994cdad7-2143-4936-a35f-8dd0f852e4d6",
                        "parent_type": "USER",
                        "privileges": [
                          "SHAREWITHALL",
                          "DATADOWNLOADING",
                          "AUTHORING",
                          "USERDATAUPLOADING",
                          "A3ANALYSIS"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          },
                          {
                            "id": "c241143a-0e2b-44b6-9cbc-c2b3cff8c57d",
                            "name": "Analyst"
                          },
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          },
                          {
                            "id": "c241143a-0e2b-44b6-9cbc-c2b3cff8c57d",
                            "name": "Analyst"
                          },
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "37539499-624a-4d3d-8f88-e9be5653c114",
                        "name": "guest2",
                        "display_name": "Guest 2",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "guest2@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503245288,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "37539499-624a-4d3d-8f88-e9be5653c114",
                        "parent_type": "USER",
                        "privileges": [
                          "SHAREWITHALL",
                          "DATADOWNLOADING",
                          "AUTHORING",
                          "USERDATAUPLOADING",
                          "A3ANALYSIS"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "c241143a-0e2b-44b6-9cbc-c2b3cff8c57d",
                            "name": "Analyst"
                          },
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          },
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          },
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                            "name": "Consumer"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                            "name": "Consumer"
                          },
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          },
                          {
                            "id": "c241143a-0e2b-44b6-9cbc-c2b3cff8c57d",
                            "name": "Analyst"
                          },
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "dd3362d8-713b-4e8c-958e-a542e4b0a3d5",
                        "name": "guest3",
                        "display_name": "Guest 3",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "guest3@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503251321,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "dd3362d8-713b-4e8c-958e-a542e4b0a3d5",
                        "parent_type": "USER",
                        "privileges": [
                          "SHAREWITHALL",
                          "DATADOWNLOADING",
                          "AUTHORING",
                          "USERDATAUPLOADING"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                            "name": "Consumer"
                          },
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          },
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                            "name": "Consumer"
                          },
                          {
                            "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                            "name": "UserDataUploader"
                          },
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                            "name": "DataDownloader"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "f68147b5-9102-4838-a942-24a30122fc6b",
                        "name": "guest4",
                        "display_name": "Guest 4",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1354006445722,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "guest4@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503257613,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "f68147b5-9102-4838-a942-24a30122fc6b",
                        "parent_type": "USER",
                        "privileges": [
                          "SHAREWITHALL",
                          "AUTHORING"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                            "name": "Consumer"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                            "name": "ShareWithAll"
                          },
                          {
                            "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                            "name": "Consumer"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "3b4740ec-3626-4d54-8b7e-ebda45510fb6",
                        "name": "rlsgroup1user",
                        "display_name": "rlsgroup1user",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1459382578646,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "rlsgroup1user@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503265188,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "3b4740ec-3626-4d54-8b7e-ebda45510fb6",
                        "parent_type": "USER",
                        "privileges": [
                          "AUTHORING"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "df3a5cd4-333d-47d8-bec2-12b0e916fed5",
                            "name": "rls-group-1"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "f3649858-e11b-4ddf-ae51-3eea21c9ada5",
                            "name": "rls-group-3"
                          },
                          {
                            "id": "431c458d-cd03-4156-aa67-ea3ccde677a4",
                            "name": "rls-group-5"
                          },
                          {
                            "id": "df3a5cd4-333d-47d8-bec2-12b0e916fed5",
                            "name": "rls-group-1"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "160b8fa4-4028-4ffe-a559-cbaf33c0a9b3",
                        "name": "rlsgroup2user",
                        "display_name": "rlsgroup2user",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1459382594846,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "rlsgroup2user@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 4,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503273002,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "160b8fa4-4028-4ffe-a559-cbaf33c0a9b3",
                        "parent_type": "USER",
                        "privileges": [
                          "AUTHORING"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "cfa01dd9-9605-422d-b7de-a37afff63647",
                            "name": "rls-group-2"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "431c458d-cd03-4156-aa67-ea3ccde677a4",
                            "name": "rls-group-5"
                          },
                          {
                            "id": "ce4feab7-df10-4e28-a733-d3ac646514d8",
                            "name": "rls-group-4"
                          },
                          {
                            "id": "cfa01dd9-9605-422d-b7de-a37afff63647",
                            "name": "rls-group-2"
                          },
                          {
                            "id": "f3649858-e11b-4ddf-ae51-3eea21c9ada5",
                            "name": "rls-group-3"
                          }
                        ],
                        "welcome_email_sent": false
                      },
                      {
                        "id": "5dc626e5-1921-4758-a7bf-8501605aa59f",
                        "name": "rlsgroup3user",
                        "display_name": "rlsgroup3user",
                        "visibility": "SHARABLE",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "can_change_password": true,
                        "complete_detail": true,
                        "creation_time_in_millis": 1459382612187,
                        "current_org": {
                          "id": 0,
                          "name": "Primary"
                        },
                        "deleted": false,
                        "deprecated": false,
                        "account_type": "LOCAL_USER",
                        "account_status": "ACTIVE",
                        "email": "rlsgroup3user@thoughtspot.com",
                        "expiration_time_in_millis": 1684936295,
                        "external": false,
                        "favorite_metadata": [],
                        "first_login_time_in_millis": 0,
                        "group_mask": 36,
                        "hidden": false,
                        "home_liveboard": null,
                        "incomplete_details": [],
                        "is_first_login": false,
                        "modification_time_in_millis": 1561503281328,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "notify_on_share": true,
                        "onboarding_experience_completed": false,
                        "orgs": null,
                        "owner_id": "5dc626e5-1921-4758-a7bf-8501605aa59f",
                        "parent_type": "USER",
                        "privileges": [
                          "AUTHORING"
                        ],
                        "show_onboarding_experience": true,
                        "super_user": false,
                        "system_user": false,
                        "tags": [],
                        "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                        "user_groups": [
                          {
                            "id": "f3649858-e11b-4ddf-ae51-3eea21c9ada5",
                            "name": "rls-group-3"
                          }
                        ],
                        "user_inherited_groups": [
                          {
                            "id": "431c458d-cd03-4156-aa67-ea3ccde677a4",
                            "name": "rls-group-5"
                          },
                          {
                            "id": "f3649858-e11b-4ddf-ae51-3eea21c9ada5",
                            "name": "rls-group-3"
                          }
                        ],
                        "welcome_email_sent": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system": {
      "get": {
        "operationId": "getSystemInformation",
        "description": "Get system details",
        "tags": [
          "System"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "local",
                      "name": "local",
                      "release_version": "test",
                      "time_zone": "America/Los_Angeles",
                      "locale": "",
                      "date_format": "MM/dd/yyyy",
                      "api_version": "v1",
                      "type": "SW",
                      "environment": "DEV",
                      "license": "EAE",
                      "date_time_format": "MM/dd/yyyy h:mm a",
                      "time_format": "HH:mm:ss",
                      "system_user_id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                      "super_user_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                      "hidden_object_id": "31745bb4-defd-4e8b-8de9-8fd01db78827",
                      "system_group_id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                      "tsadmin_user_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "admin_group_id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                      "all_tables_connection_id": "bfc6feb4-8dac-402c-8ae8-78b43d318777",
                      "all_user_group_id": "b25ee394-9d13-49e3-9385-cd97f5b253b4",
                      "accept_language": "undefined",
                      "all_user_group_member_user_count": 13,
                      "logical_model_version": 43
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config": {
      "get": {
        "operationId": "getSystemConfig",
        "description": "Get system config information",
        "tags": [
          "System"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster config information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfig"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "onboarding_content_url": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-overrides": {
      "get": {
        "operationId": "getSystemOverrideInfo",
        "description": "Get cluster override info.",
        "tags": [
          "System"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster configuration which can be overridden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "config_override_info": {
                        "dataPipelineConfig.chunkLength": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "max number of bytes to write in each chunk to seekwell.",
                          "current": 1024
                        },
                        "a3Config.maxPerUserSubscription": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to control max number of subscriptions a user can have",
                          "current": 50
                        },
                        "homepagePinboardFetchBatchSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Batch size to use when fetching pinboards for priority list API.",
                          "current": 10
                        },
                        "emailValidation": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to identify if email validation needs to be done.",
                          "current": true
                        },
                        "customRegionConfig.subDirectory": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "SubDirectory name for custom region file uploading.",
                          "regex": ".*",
                          "current": "custom-region"
                        },
                        "identityServiceUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Configuration for identity service url.",
                          "regex": ".*",
                          "current": "https://identity.dataplane-private.aws-us-west-2.thoughtspotdev.cloud/v1"
                        },
                        "dataGenRules.enableGroupingByGroupAggregateFormulas": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to group by group aggregate formulas.",
                          "current": false
                        },
                        "maxColdStartHeadlinesPerPinboard": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Num headlines to return as cold-start solution to priority list per Pinboard in homepage carousel.",
                          "current": 1
                        },
                        "enableColumnSummariesByDefault": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable column summaries by default from backend",
                          "current": true
                        },
                        "isAnswerV2OnByDefault": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable answer v2 by default from backend",
                          "current": true
                        },
                        "aiAnswerGenerationEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable ai generated answer functionality in Eureka frontend",
                          "current": false
                        },
                        "a3Config.disableObjectRequestCache": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable object request cache while executing a3 requests",
                          "current": false
                        },
                        "sessionConfig.inactiveUserDeviceLifeSec": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Life in seconds for a inactive user device.",
                          "current": 5184000
                        },
                        "dataWorkspace.spotAppEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If spot apps is enabled for ThoughtSpot",
                          "current": true
                        },
                        "countWithNull": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Count Keyword Includes Nulls",
                          "current": false
                        },
                        "analystOnboardingConfig.setupV2Enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If setup v2 is to be enabled.",
                          "current": true
                        },
                        "metadataGenRules.shouldUseAnswerSpecGenerator": {
                          "category": "METADATA",
                          "dataType": "BOOLEAN",
                          "description": "Should use new answer spec generator",
                          "current": true
                        },
                        "webhookConfig": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "Webhook items added by user",
                          "current": []
                        },
                        "demoDataConfiguration.demoPinboardGuids": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "List of demo table guids",
                          "current": []
                        },
                        "disableCopyLink": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disable copy link on the cluster",
                          "current": false
                        },
                        "dataWorkspace.dbtIntEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If dbt Integration is enabled for ThoughtSpot",
                          "current": true
                        },
                        "loginConfig.allowSystemUserLogin": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Allow system user to login",
                          "current": false
                        },
                        "atlasActionObjectUGFeatureEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Action Object Store Atlas User Group Feature Flag.",
                          "current": true
                        },
                        "intercomAppId": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to set intercom app id",
                          "regex": ".*",
                          "current": ""
                        },
                        "dataGenRules.falconPerfSettings.forceDisallowPartialResults": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "If true, partial results are not sent even if the client requests it.",
                          "current": false
                        },
                        "exportConfig.applyColumnCurrencyFormattingInExcel": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to apply column currency formatting applied on logicalColumn in the exported excel",
                          "current": true
                        },
                        "embracev2Experience": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable Embrace V2 Experience",
                          "current": false
                        },
                        "loginConfig.passwordConfig.blacklistedWords": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Blacklisted words that should be avoided in a user's password.",
                          "regex": ".*",
                          "current": "[]"
                        },
                        "dataWorkspace.dataAppV2Enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If dataApp V2 is enabled for ThoughtSpot",
                          "current": true
                        },
                        "a3Config.homepageInsightsFromRepoEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable homepage insights served from a3 repo",
                          "current": true
                        },
                        "dataWorkspace.slackEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If send to slack is enabled for ThoughtSpot",
                          "current": true
                        },
                        "a3Config.enableThresholdBasedAlerts": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable threshold-based alerts in monitor v2",
                          "current": true
                        },
                        "a3Config.addAlertsInTML": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to specify if monitor alerts should show up in TML.",
                          "current": true
                        },
                        "exportConfig.applyColumnLayoutFormattingInExcel": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to apply column formatting in the exported excel",
                          "current": true
                        },
                        "isEverywhereEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show develop module if true.",
                          "current": true
                        },
                        "notificationConfig.asyncShareEmailServiceThreadCount": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Number of threads sending asynchronous email notifications for share.",
                          "current": 10
                        },
                        "dataWorkspace.zendeskEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If zendesk is enabled for ThoughtSpot",
                          "current": false
                        },
                        "cloudExpressConfiguration.contactUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to get contact url for cloud express.",
                          "regex": ".*",
                          "current": "https://www.thoughtspot.com"
                        },
                        "mapboxConfig.accessTokenCreationTimeMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Denotes the time when the mapbox access token was created.",
                          "current": 0
                        },
                        "dataGenRules.answerSpecQueryGenEnable": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to toggle usage of answer/pinboard spec in query generation",
                          "current": true
                        },
                        "explorerBatchSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Result set batch size for data explorer.",
                          "current": 1000
                        },
                        "a3Config.enableMonitorOnTse": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable monitor on TSE",
                          "current": true
                        },
                        "dataWorkspace.createSpotAppEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If spot apps creation is enabled for ThoughtSpot",
                          "current": false
                        },
                        "demoDataConfiguration.demoConnectionGuids": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "List of demo connection guids on the cluster.",
                          "current": []
                        },
                        "exportConfig.disableTSBrandingInPDF": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disables ThoughtSpot branding in exported PDFs",
                          "current": false
                        },
                        "swaggerSpecFilterEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable Swagger API documentation filtering.",
                          "current": true
                        },
                        "samlConfiguration.groupMapping": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "SAML Group mapping in string format.",
                          "regex": ".*",
                          "current": "{}"
                        },
                        "dataWorkspace.dbtSemanticLayerEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If dbt Semantic Layer is enabled for ThoughtSpot",
                          "current": false
                        },
                        "sageIndexingQuerySpecGenTimeoutMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Sage Indexing Query Spec Generation Timeout in Milliseconds.",
                          "current": 10000
                        },
                        "dataWorkspace.answersSyncEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If answer sync is enabled for ThoughtSpot",
                          "current": true
                        },
                        "synonymGenerationNumParallelFetches": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to set number of parallel fetches from llm.",
                          "current": 25
                        },
                        "schemaPollingTimeoutMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Polling timeout for schema changes in milliseconds",
                          "current": 60000
                        },
                        "numGeneratedSynonymsPerColumn": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to number of generated synonyms per column.",
                          "current": 2
                        },
                        "documentationConfig.onlineDocUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "ThoughtSpot online documentation URL.",
                          "regex": ".*",
                          "current": "https://docs.thoughtspot.com/software/"
                        },
                        "hyperLogLogEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to ensure hll extension configured or not.",
                          "current": false
                        },
                        "a3Config.oneTimeTimelyJobsExpiryInSeconds": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Time from creation of a one time Timely job for the job to get GCd. flagOnetimeJobsExpiryInSeconds in Timely must also be updated.",
                          "current": 172800
                        },
                        "customerAdminEmail": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "e-mail address of Admin to send e-mail.",
                          "regex": "[A-Za-z0-9\\.\\-]+\\@([A-Za-z0-9\\-]+\\.)+[A-Za-z]{2,4}",
                          "current": ""
                        },
                        "metadataGenRules.headlineGenRules.maxHeadlines": {
                          "category": "METADATA",
                          "dataType": "INTEGER",
                          "description": "Maximum number of headlines to generate.",
                          "current": 10
                        },
                        "a3Config.enableInsightsWriteToRepo": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable writing of insights to a3 repo",
                          "current": true
                        },
                        "onboardingConfiguration.onboardingVideoURL": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Default URL for Onboarding.",
                          "regex": ".*",
                          "current": "https://fast.wistia.net/embed/iframe/wykwdrk2em"
                        },
                        "onboardingConfiguration.defaultGroups": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "Default group names."
                        },
                        "mapboxAccessToken": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Token for accessing mapbox APIs. Used by blink to render the geo tiles.",
                          "regex": ".*",
                          "current": ""
                        },
                        "a3Config.enableKPIChart": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable KPI chart type",
                          "current": true
                        },
                        "askExpertConfig.maxExpertCount": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Max number of experts to be sent for metadata headers.",
                          "current": 2
                        },
                        "samlConfiguration.updateUserGroupsFromSAML": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Whether to check if update userGroups from SAML is enabled.",
                          "current": false
                        },
                        "signUpConfiguration.signUpButtonLink": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to configure the end point of Sign up button",
                          "regex": ".*",
                          "current": ""
                        },
                        "a3Config.enableMonitorV2Tab": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable explain change on kpi charts",
                          "current": true
                        },
                        "enableDoubleClickDrillDown": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable double click drill down.",
                          "current": false
                        },
                        "enablePendo": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable Pendo.",
                          "current": true
                        },
                        "redesignedHomepage": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control enabling of redesigned homepage",
                          "current": false
                        },
                        "schedulerServiceUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Configuration for scheduler service url.",
                          "regex": ".*",
                          "current": ""
                        },
                        "disableFeedback": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disable send feedback on the cluster",
                          "current": false
                        },
                        "dataGenRules.useApproxUniqueCount": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to toggle usage of approx operators related to UniqueCount",
                          "current": false
                        },
                        "enableInstantSearch": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable instant search (when disabled, we use search-on-enter)",
                          "current": false
                        },
                        "customRegionConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable or disable custom region.",
                          "current": true
                        },
                        "dataWorkspace.mailchimpEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If Mailchimp is enabled for ThoughtSpot",
                          "current": false
                        },
                        "a3Config.enableMonitorV2": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable SpotIQ Monitor feature",
                          "current": true
                        },
                        "emailConfig.welcomeEmailConfig.getStartedLink": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Link to customer's ThoughtSpot application.",
                          "regex": ".*",
                          "current": ""
                        },
                        "walkMeConfiguration.enableTestEnvForWalkme": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable walkme TEST Env on a particular cluster.",
                          "current": false
                        },
                        "exportConfig.writeRowDataFromNewPageInPdf": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to write rows data from new page or to be continued from same page",
                          "current": false
                        },
                        "isPublicUser": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable demo/public user on demo/public cluster",
                          "current": false
                        },
                        "exportConfig.addBOMToCSV": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Add Byte Order Mark(BOM) to CSV export",
                          "current": false
                        },
                        "useFalconHttpAccessTokenCache": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Use access token cache in Falcon Http Connection Pool",
                          "current": true
                        },
                        "synonymGenerationPartitionSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to set  partition size for # of columns in each request to LLM",
                          "current": 25
                        },
                        "notificationBanner.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show whether notificationBanner is enabled.",
                          "current": false
                        },
                        "tseRestApiV2PlaygroundEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse RestApiV2.0 Playground Enabled Flag.",
                          "current": true
                        },
                        "showCommunityLink": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show Community link if true.",
                          "current": true
                        },
                        "tseScheduleFeatureEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse Schedule Feature Enabled Flag.",
                          "current": false
                        },
                        "loginConfig.maxAllowedFailedLoginAttempts": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Set maximum allowed failed login attempts before a user account is locked",
                          "current": 10
                        },
                        "enliteMetricsDisabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disable Enlite Metric collection",
                          "current": false
                        },
                        "tseHideDevelopForOrgs": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to hide the TSE develop tab for org.",
                          "current": true
                        },
                        "loginConfig.passwordConfig.maxPasswordAgeDays": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum age of a user account password",
                          "current": 180
                        },
                        "disableSharing": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disable sharing in the cluster",
                          "current": false
                        },
                        "askExpertConfig.notifyOtherExpertsOnResolution": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Allow sending ack emails to other non-resolving experts for request",
                          "current": true
                        },
                        "a3Config.spotIQV2Experience": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "This flag controls whether SpotIQ V2 is even available on a cluster",
                          "current": true
                        },
                        "exportConfig.zoomedRenderWidthForExport": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to determine the width onwhich print page (/print) is rendered for export",
                          "current": 1920
                        },
                        "askExpertConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Ask Expert feature.",
                          "current": true
                        },
                        "tableAggregatesEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Table Aggregates",
                          "current": true
                        },
                        "dataPipelineConfig.bufferLength": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "default length for buffer, to which data will be read before writing to seekwell.",
                          "current": 102000
                        },
                        "noteTilesConfig.subDirectory": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "SubDirectory name for note tiles file uploading.",
                          "regex": ".*",
                          "current": "note-tiles"
                        },
                        "teams.expiredAccountLifeDays": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Life of expired team edition account",
                          "current": 60
                        },
                        "dataWorkspace.zohoEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If zoho is enabled for ThoughtSpot",
                          "current": true
                        },
                        "intercomEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control Intercom integration",
                          "current": false
                        },
                        "documentationConfig.performFirstSearchDocUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "ThoughtSpot online documentation URL for performing first search.",
                          "regex": ".*",
                          "current": "https://thoughtspot.wistia.com/medias/uf5h6du15r/"
                        },
                        "customRegionConfig.maxFileSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum allowed size of each custom region file.",
                          "current": 104857600
                        },
                        "enableShareV2": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable share v2",
                          "current": false
                        },
                        "dataWorkspace.spotAppAdminEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If spot apps creation is enabled for ThoughtSpot",
                          "current": false
                        },
                        "a3Config.enableAnomalyExplanation": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show/hide Explain Insight option for an anomaly insight",
                          "current": false
                        },
                        "emailConfig.welcomeEmailConfig.customMessage": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Custom message to be sent along with welcome e-mail.",
                          "regex": ".*",
                          "current": ""
                        },
                        "metadataGenRules.regenerateAnswerSpecForDataRequest": {
                          "category": "METADATA",
                          "dataType": "BOOLEAN",
                          "description": "Should regenerate answerSpec while fetching data",
                          "current": true
                        },
                        "analystOnboardingConfig.videoURL": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Default URL for Onboarding.",
                          "regex": ".*",
                          "current": "https://fast.wistia.net/embed/iframe/dmue1pc6fp"
                        },
                        "isPinboardV2OnByDefault": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable pinboard v2 by default on the cluster",
                          "current": true
                        },
                        "enableParameters": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable parameters support by default on the cluster",
                          "current": true
                        },
                        "intercomDevEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control Intercom API key in backend",
                          "current": false
                        },
                        "signUpConfiguration.signUpButtonText": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to configure Sign up Button Text.",
                          "regex": ".*",
                          "current": ""
                        },
                        "exportConfig.removeAttachmentFromScheduledEmails": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to choose if PDF/CSV should be attached to scheduled email",
                          "current": false
                        },
                        "addNullFilterSuggestion": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Add null filter suggestion in filter modal",
                          "current": true
                        },
                        "customRegionConfig.maxFileLimit": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum allowed number of custom region file.",
                          "current": 50
                        },
                        "sendAccessRequestEmailEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable sending of emails to request access to objects.",
                          "current": true
                        },
                        "demoDataConfiguration.demoGroupGuids": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "List of demo group guids on the cluster.",
                          "current": []
                        },
                        "htmlRenderingDisabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable HTML rendering",
                          "current": false
                        },
                        "loginConfig.accountLockoutDurationMin": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Duration in minutes to keep the user account in locked state",
                          "current": 60
                        },
                        "debugConfiguration.sendDebugInfoToUI": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If debug info is enabled or not.",
                          "current": true
                        },
                        "useLegacyEmbeddedPinboardActionConfig": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to indicate whether to use Legacy embedded pinboard action config..",
                          "current": false
                        },
                        "exploreEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Smart Followups",
                          "current": true
                        },
                        "licenseConfig.contactEmail": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Contact email for requesting ThoughtSpot application license.",
                          "regex": ".*",
                          "current": "express@thoughtspot.com"
                        },
                        "pipelineStatusBatchTime": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Pipeline Status Batch Time.",
                          "current": 5
                        },
                        "exportConfig.applyNumberFormattingInExcel": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to apply number formatting in the exported excel",
                          "current": true
                        },
                        "demoUserIdleTimeoutMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Demo User Idle Session Timeout.",
                          "current": 600000
                        },
                        "enableMapTiles": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable maptiles functionality for geomap",
                          "current": false
                        },
                        "customCalendarConfig.allowUniqueNamesAtDatasourceLevel": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Allow unique names at datasource level",
                          "current": false
                        },
                        "enliteEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Enlite",
                          "current": false
                        },
                        "oidcConfiguration.identityDomain": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Identity domain for login",
                          "regex": ".*",
                          "current": ""
                        },
                        "teams.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If Team Edition is enabled for ThoughtSpot",
                          "current": false
                        },
                        "tableRowCountQueryTimeout": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Row count query timeout for all tables in TableService request",
                          "current": 200000
                        },
                        "enableLenientContentDiscoverability": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable answers/pinboards being discoverable for users with data source access",
                          "current": false
                        },
                        "pinboardFilterConfiguratorDisabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disables Configure Filter option on a Pinboard",
                          "current": false
                        },
                        "oidcConfiguration.scope": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "OIDC scope",
                          "regex": ".*",
                          "current": "openid email"
                        },
                        "emailConfig.fromEmail": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Email to send ThoughtSpot emails from.",
                          "regex": ".*",
                          "current": "no-reply@notification.thoughtspot.com"
                        },
                        "customCalendarConfig.useCalendarTableForGregorian": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Use calendar table for Gregorian calendar.",
                          "current": false
                        },
                        "docHiddenInDevelopTab": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to indicate whether to use regular docs or integrated ones.",
                          "current": true
                        },
                        "metadataGenRules.newWorksheetName": {
                          "category": "METADATA",
                          "dataType": "STRING",
                          "description": "Default name to use for newly created worksheets.",
                          "regex": ".*",
                          "current": "Untitled"
                        },
                        "dataWorkspace.blueshiftEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If Blueshift is enabled for ThoughtSpot",
                          "current": false
                        },
                        "enableGlobalNav": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control the new global nav bar experience",
                          "current": false
                        },
                        "askExpertConfig.allowListingAllExperts": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Allow listing all experts bypassing share with all privilege",
                          "current": true
                        },
                        "embraceDependentOnFalcon": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable dummy table creation for embrace tables.",
                          "current": false
                        },
                        "freeTrialActivationEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable new free trial user activation.",
                          "current": false
                        },
                        "dataGenRules.enableFanTrap": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable fan trap.",
                          "current": true
                        },
                        "oidcConfiguration.configUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "OIDC config url.",
                          "regex": ".*",
                          "current": ""
                        },
                        "queryGovernorLimitMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Upper limit check on any query issued to Postgres.",
                          "current": 30000
                        },
                        "askExpertConfig.deprecated": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Deprecate Ask Expert feature.",
                          "current": true
                        },
                        "dataPipelineConfig.seekwellURL": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "when confident vault is disabled, runpipeline uses user specified seekwell URL",
                          "regex": ".*",
                          "current": ""
                        },
                        "a3Config.instantInsightsFeedbackEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable feedback on instant insights",
                          "current": false
                        },
                        "onboardingConfiguration.cloudBusinessOnboardingEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If cloud Business onboarding is enabled or not.",
                          "current": false
                        },
                        "searchDataInNav": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control visibility of search data button and sage/eureka toggle",
                          "current": false
                        },
                        "tseSeekwellLicenseEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse Seekwell License Enabled Flag.",
                          "current": true
                        },
                        "a3Config.enableDataValidation": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to specify if data validation should be done after headline migration.",
                          "current": false
                        },
                        "onboardingConfiguration.queryHistoryEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If retrieval of Query History is enabled.",
                          "current": false
                        },
                        "emailConfig.welcomeEmailConfig.learnMoreLink": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Link to learn more about ThoughtSpot.",
                          "regex": ".*",
                          "current": ""
                        },
                        "enableAppDynamics": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable app dynamics on Blink",
                          "current": false
                        },
                        "demoDataConfiguration.demoTableGuids": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "List of demo table guids",
                          "current": []
                        },
                        "dataWorkspace.spotAppConfig": {
                          "category": "MAIN",
                          "dataType": "OBJECT",
                          "description": "Map to store spotAppConfig.",
                          "current": {}
                        },
                        "apiPlaygroundConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to indicate whether new api playground should be opened up for end user usage.",
                          "current": true
                        },
                        "popularColumnsThreadsTimeoutMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Popular Columns threads execution Timeout in Milliseconds.",
                          "current": 5000
                        },
                        "exportConfig.applyConditionalFormattingInExcel": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to apply conditional formatting in the exported excel",
                          "current": true
                        },
                        "blinkHelpConfigList": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "Help items to be displayed in blink",
                          "current": [
                            {
                              "enabled": true,
                              "title": "Keywords",
                              "id": "BLINK_KEYWORDS",
                              "url": "{docsUrl}{versionNameForLink}/reference/keywords.html",
                              "iconFilePath": ""
                            },
                            {
                              "enabled": true,
                              "title": "Release notes",
                              "id": "BLINK_RELEASE_NOTES",
                              "url": "{docsUrl}{versionNameForLink}/release/notes.html",
                              "iconFilePath": ""
                            },
                            {
                              "enabled": true,
                              "title": "Documentation",
                              "id": "BLINK_DOCUMENTATION",
                              "url": "{docsUrl}{versionNameForLink}",
                              "iconFilePath": ""
                            },
                            {
                              "enabled": true,
                              "title": "Downloads",
                              "id": "BLINK_DOWNLOADS",
                              "url": "{docsUrl}{versionNameForLink}/release/downloads.html",
                              "iconFilePath": ""
                            }
                          ]
                        },
                        "aaqEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control Analyst Authored Queries",
                          "current": true
                        },
                        "noteTilesConfig.fileReaderBuffer": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Size of buffer to read contents of the note tiles file while verifying size.",
                          "current": 10240
                        },
                        "showV2BetaApi": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show V2 beta apis.",
                          "current": false
                        },
                        "embedActionConfigList": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "Embed Action items added by user",
                          "current": []
                        },
                        "isSaas": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Indicate whether the cluster is SaaS based or not.",
                          "current": false
                        },
                        "enableShareInInvite": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable sharing obejcts as part of invite workflow",
                          "current": true
                        },
                        "enableSummariesCustomFormatByDefault": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable column summaries Custom Format by default from backend",
                          "current": true
                        },
                        "tseStyleCustomisationsV2Enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Tse style customisations",
                          "current": true
                        },
                        "standardRegionConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable or disable standard region.",
                          "current": false
                        },
                        "standardRegionConfig.dbHost": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Host for the db connection.",
                          "regex": ".*",
                          "current": "localhost"
                        },
                        "a3Config.isKPIAnomaliesOnByDefault": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to specify if KPI anomalies are on by default in user preferences.",
                          "current": true
                        },
                        "requestAccessConfiguration.dataSourceRequestAccessLevel": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Data Source request access level configuration.",
                          "regex": ".*",
                          "current": "VIEW"
                        },
                        "dataWorkspace.dbtMetricsEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If dbt Metrics is enabled for ThoughtSpot",
                          "current": false
                        },
                        "teams.faqPageUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "URL of Faq Page",
                          "regex": ".*",
                          "current": ""
                        },
                        "emailConfig.thoughtspotLogoUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "ThoughtSpot logo URL to be used in email messages.",
                          "regex": ".*",
                          "current": "https://storage.pardot.com/710713/5660/TS_logo_260x68.png"
                        },
                        "a3Config.enableFollowFeature": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable SpotIQ Follow feature",
                          "current": false
                        },
                        "noteTilesConfig.maxFilesCapacityInBytes": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum allowed size of all note tile file.",
                          "current": 1073741824
                        },
                        "synonymGenerationClientId": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to set synonym generation client id.",
                          "regex": ".*",
                          "current": "synonym-generation"
                        },
                        "dataWorkspace.tsSyncEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If send to tsSync is enabled for ThoughtSpot",
                          "current": true
                        },
                        "atlasActionObjectFeatureEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Action Object Store Atlas Feature Flag.",
                          "current": true
                        },
                        "embeddedUseCase": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to identify the embedded cluster use cases.",
                          "current": false
                        },
                        "dataWorkspace.sqlEditorEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If sql Editor is enabled for ThoughtSpot",
                          "current": true
                        },
                        "identityServicePublicUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Configuration for identity service public url.",
                          "regex": ".*",
                          "current": "https://identity.dataplane-public.thoughtspotdev.cloud/v1"
                        },
                        "noteTilesConfig.maxFileSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum allowed size of each note tile file.",
                          "current": 5242880
                        },
                        "a3Config.enableExplainChange": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable explain change on kpi charts",
                          "current": true
                        },
                        "dataGenRules.enableGenericJoinFanTrapHeuristic": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable fan trap heuristic based on generic joins.",
                          "current": false
                        },
                        "idleSenseConfig.shutdownWarningDurationMin": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Time duration to show shutdown warning dialog box.",
                          "current": 2
                        },
                        "tseSeekwellFeatureEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse Seekwell Feature Enabled Flag.",
                          "current": false
                        },
                        "dataPipelineConfig.useConfidentVaultForSeekwellURL": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "to use seekwell url from confidentvault or from user specified URL.",
                          "current": true
                        },
                        "enableCohorts": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable cohort support by default on the cluster",
                          "current": false
                        },
                        "metadataGenRules.headlineGenRules.disableBaseTableHeadlines": {
                          "category": "METADATA",
                          "dataType": "BOOLEAN",
                          "description": "Disable generating data for headlines that are not off the table vizs. Headlines which are directly off base table as opposed to table viz are expensive.",
                          "current": true
                        },
                        "cordAppSecret": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Token for accessing cord secret provided by cord console for user auth",
                          "regex": ".*",
                          "current": ""
                        },
                        "dataGenRules.zeroIfSumOfNull": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to change standard database behavior and have Sum(NULL) return 0.",
                          "current": true
                        },
                        "idleSenseConfig.clusterIdleDurationThresholdMin": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Time threshold to consider a cluster as idle.",
                          "current": 120
                        },
                        "dataGenRules.enableGroupAggregateNewReaggregation": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to use new reaggregation logic in PinnedMeasureTransformer for group aggregate formulas.",
                          "current": false
                        },
                        "customerFeedbackEmail": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "e-mail address to send feedback email to.",
                          "regex": "[A-Za-z0-9\\.\\-]+\\@([A-Za-z0-9\\-]+\\.)+[A-Za-z]{2,4}",
                          "current": ""
                        },
                        "tmlTableColumnDeletionEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable table-column deletion via tml import",
                          "current": true
                        },
                        "standardRegionConfig.dbUser": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "User name for the connection.",
                          "regex": ".*",
                          "current": "root"
                        },
                        "enableHomepageV2": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control enable home page V2",
                          "current": false
                        },
                        "disableMobileDeeplink": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to disable mobile deeplink",
                          "current": false
                        },
                        "sessionConfig.lastSessionSetTimestampPersistFrequency": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Frequency in seconds for persisting last session timestamp.",
                          "current": 10
                        },
                        "licenseEnforcementDisabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse License Enforcement Disabled Flag.",
                          "current": false
                        },
                        "tableJoinV2Enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control Table Join V2",
                          "current": true
                        },
                        "enableLearningMode": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable learning mode",
                          "current": false
                        },
                        "samlConfiguration.disableSessionNotOnOrAfterCheck": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Checking validity of SAML assertion using SessionNotOnOrAfter",
                          "current": false
                        },
                        "enableSearchAssist": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to control Search Assist",
                          "current": true
                        },
                        "loginConfig.passwordConfig.passwordHistorySize": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "History size to avoid password reuse.",
                          "regex": ".*",
                          "current": "10"
                        },
                        "dataWorkspace.serviceNowEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If serviceNowEnabled is enabled for ThoughtSpot",
                          "current": true
                        },
                        "enlitePrivileged": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Put enlite behind Experimental Privilege",
                          "current": false
                        },
                        "sharingConfiguration.enableVizSharingWithLink": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "enable/disable sharing of viz from using copy link button.",
                          "current": true
                        },
                        "dataGenRules.disableJoinTypeRulesForRLS": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to disable RLS based join type rules.",
                          "current": false
                        },
                        "sharingConfiguration.enableDataSourceSharing": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Hides sharing checkbox for sharing data sourcesin the sharing dialog of objects",
                          "current": true
                        },
                        "autoFormatColumnNames": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Should auto format the column names or not.",
                          "current": true
                        },
                        "dataWorkspace.salesForceEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If send to salesForce is enabled for ThoughtSpot",
                          "current": true
                        },
                        "dataGenRules.enablePushNullFiltersToLeafQuery": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable pushing null filters down to leaf queries.",
                          "current": true
                        },
                        "demoDataConfiguration.demoWorksheetGuids": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "List of demo worksheet guids",
                          "current": []
                        },
                        "constantTimeReference": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to use constant date reference when converting epoch.",
                          "current": 0
                        },
                        "metadataGenRules.addFilterColumnToOutputColumn": {
                          "category": "METADATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to indicate if filter column should be added to output column.",
                          "current": false
                        },
                        "documentationConfig.learningCenterUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "ThoughtSpot online Learning center URL.",
                          "regex": ".*",
                          "current": "https://training.thoughtspot.com/"
                        },
                        "dataGenRules.enableGroupAggregateImplicitReaggregation": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to implicitly reaggregate group aggregate formulas.",
                          "current": true
                        },
                        "isMultipleDemoDataSetsEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enbale multiple data sets if true.",
                          "current": false
                        },
                        "loginConfig.passwordConfig.passwordStrategy": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Strategy to use to evaluate a passwords strength.",
                          "regex": ".*",
                          "current": "COMPLEXITY"
                        },
                        "maxNumExportRows": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Size for maximum number of rows that can be exported out.",
                          "current": 1000000
                        },
                        "a3Config.enableFollowV2": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable follow v2 (subscribe others)",
                          "current": true
                        },
                        "samlConfiguration.disableMaxAuthenticationAgeCheck": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Whether to check if the AuthnInstant is too old or not.",
                          "current": false
                        },
                        "oidcConfiguration.updateUserGroupsFromOIDC": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Whether to check if update userGroups from OIDC is enabled.",
                          "current": false
                        },
                        "idleSenseConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to indicate if idle sense functionality should be enabled or not.",
                          "current": false
                        },
                        "askExpertConfig.removeObjectToExpertEdges": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Delete object_to_expert edges.",
                          "current": false
                        },
                        "a3Config.cortexBypassCache": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to bypass Cortex cache.",
                          "current": false
                        },
                        "maxColdStartSizePriorityList": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Max elements to return as cold-start solution to priority list in homepage carousel.",
                          "current": 3
                        },
                        "exportConfig.keepPageHeadersOnlyOnFirstPageInPdf": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to keep page headers only on first page or all pages",
                          "current": true
                        },
                        "scriptabilityConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Scriptability feature.",
                          "current": true
                        },
                        "ignoreCacheForStrictShareMode": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable ignoring cache writes for strictShareMode compute",
                          "current": false
                        },
                        "dataWorkspace.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If Data Workspace is enabled for ThoughtSpot",
                          "current": true
                        },
                        "tseFreeTrialExtendDate": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Extend date for TSE Free Trial in dd/mm/yyyy format.",
                          "regex": ".*",
                          "current": ""
                        },
                        "emailConfig.companyName": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Company name to attach in emails.",
                          "regex": ".*",
                          "current": "Your Company"
                        },
                        "standardRegionConfig.dbPassword": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Password for the connection.",
                          "regex": ".*",
                          "current": "root"
                        },
                        "oidcConfiguration.issuer": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "OIDC issuer url.",
                          "regex": ".*",
                          "current": ""
                        },
                        "fullEmbedConfiguration.profileAndHelpOptionsInNavBarHidden": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Whether profile and help options are visible in the nav bar.",
                          "current": false
                        },
                        "emailConfig.welcomeEmailConfig.supportEmail": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Email to send new user queries to.",
                          "regex": ".*",
                          "current": ""
                        },
                        "exportConfig.fileNameMaxCharacterLimit": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Parameter for maximum character limit on the exported file name",
                          "current": 100
                        },
                        "askExpertEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Ask Expert feature.",
                          "current": true
                        },
                        "useGetEncoding": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enabling get params encoding",
                          "current": false
                        },
                        "adminPortalProdEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable AdminPortal for prod",
                          "current": true
                        },
                        "embedUrls": {
                          "category": "MAIN",
                          "dataType": "OBJECT",
                          "description": "Map to store embedUrls.",
                          "current": {
                            "CUSTOM_LINK_IDENTIFIER": "d41d8cd9-8f00-3204-a980-0998ecf8427e",
                            "UNSUBSCRIBE_URL": "http://localhost:8088/#/user-preference",
                            "ANSWER_URL": "http://localhost:8088/#/saved-answer/{object-id}?{ts-query-params}",
                            "DESCRIPTION": "",
                            "GENERIC_URL": "http://localhost:8088/#/{path}",
                            "PINBOARD_URL": "http://localhost:8088/#/pinboard/{object-id}?{ts-query-params}",
                            "INSIGHT_URL": "http://localhost:8088/#/insight/{object-id}",
                            "PINBOARD_VIZ_URL": "http://localhost:8088/#/pinboard/{object-id}/{sub-object-id}?{ts-query-params}",
                            "NAME": "d41d8cd9-8f00-3204-a980-0998ecf8427e"
                          }
                        },
                        "socialProof": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable socialProof.",
                          "current": true
                        },
                        "customCalendarConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable or disable custom calendar.",
                          "current": true
                        },
                        "emailConfig.welcomeEmailConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable welcome emails.",
                          "current": true
                        },
                        "dataWorkspace.gainsightEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If gainsight is enabled for ThoughtSpot",
                          "current": true
                        },
                        "teams.offerPageUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "URL of Offer Page",
                          "regex": ".*",
                          "current": ""
                        },
                        "dataGenRules.enableDisjunctiveMergeQueryFilters": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to use OR for combining in ListUnion (QueryFilters+) when true.",
                          "current": false
                        },
                        "dataGenRules.enableGroupAggregateOptimization": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to optimize group aggregate formulas.",
                          "current": true
                        },
                        "licenseEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse License Enabled Flag.",
                          "current": false
                        },
                        "enableDiscountForTrialUser": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Discount for trial user",
                          "current": false
                        },
                        "embedUrlsPerOrg": {
                          "category": "MAIN",
                          "dataType": "OBJECT",
                          "description": "Map to store embedUrls per org.",
                          "current": {}
                        },
                        "samlConfiguration.orgMappingKey": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "SAML attribute that carries org mapping value",
                          "regex": ".*",
                          "current": ""
                        },
                        "sharingConfiguration.enableVizSharing": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Hides sharing option for visualizations",
                          "current": true
                        },
                        "dataGenRules.falconPerfSettings.disableDefaultAttributeSorting": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "If true, no sorting is applied to attribute columns unless explicitly sorted by user.",
                          "current": false
                        },
                        "falconQueryDeadlineSeconds": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Max falcon Query Deadline in seconds",
                          "current": 60
                        },
                        "documentationConfig.communityUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "ThoughtSpot online Community URL.",
                          "regex": ".*",
                          "current": "https://community.thoughtspot.com/"
                        },
                        "synonymGenerationTimeoutMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Flag to indicate timeout for synonym generation.",
                          "current": 3000
                        },
                        "requestAccessConfiguration.objectRequestAccessLevel": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Object's request access level configuration",
                          "regex": ".*",
                          "current": "ALL"
                        },
                        "vizRenderingQueueTimeoutMS": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Default viz rendering queue timeout in ms, default value 30 secs",
                          "current": 30000
                        },
                        "exportConfig.useNotoSansCJKFontInPDF": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Use Noto Sans CJK Font in exported PDF.",
                          "current": false
                        },
                        "allowEDocWriteToDatabase": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable database writes using edoc.",
                          "current": true
                        },
                        "timeToWaitAtTmlImportForMetadataIndexingInSec": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum time to wait for metadata indexing to complete in case of tml import.",
                          "current": 0
                        },
                        "blockNonEmbedFullAppAccess": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": " Flag for Block Non embedded Full App UI access for non Developer/Admin Privilege.",
                          "current": false
                        },
                        "analystOnboardingConfig.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If onboarding is to be enabled.",
                          "current": true
                        },
                        "loginConfig.passwordConfig.maxPasswordAgeEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable/disble the max password age enforcement",
                          "current": true
                        },
                        "tseSeekwellGoogleSheetsFeatureEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse Seekwell Google Sheets Feature Enabled Flag.",
                          "current": false
                        },
                        "blinkActionConfigList": {
                          "category": "MAIN",
                          "dataType": "ARRAYLIST",
                          "description": "Customizable Action items added by user",
                          "current": []
                        },
                        "emailConfig.productName": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Product name given to the cluster.",
                          "regex": ".*",
                          "current": "ThoughtSpot"
                        },
                        "edocRLSSupported": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable import/export of RLS rules.",
                          "current": true
                        },
                        "cordAccessAppID": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Token for accessing cord APPID to be used for user authentication",
                          "regex": ".*",
                          "current": ""
                        },
                        "enablePendoHelp": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to replace in product help with pendo help.",
                          "current": true
                        },
                        "a3Config.experimentalRLSCheckEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flat to enable/disable the experimental rls check",
                          "current": false
                        },
                        "maxPinboardTableDataBatchSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum number of rows to be displayed in table Visualization",
                          "current": 0
                        },
                        "isAnswerUndoStackEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disables undo button on answer page",
                          "current": true
                        },
                        "tmlJoinDeletionEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable join deletion via tml import",
                          "current": true
                        },
                        "highlightProFeatures": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to highlight pro edition only options in teams admin page",
                          "current": false
                        },
                        "maxDependentObjectsBatchSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum dependent objects to fetch",
                          "current": 50
                        },
                        "teams.hardDelete": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If hard delete for Team Edition member is enabled for ThoughtSpot",
                          "current": true
                        },
                        "a3Config.enableKPIChartOnAttributes": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable KPI chart type on Attributes",
                          "current": true
                        },
                        "userPersonaConfiguration.dataManagementCheckEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If data management check should be enabled while user persona selection",
                          "current": true
                        },
                        "dataWorkspace.tsSyncScheduleEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If schedule for tsSync is enabled for ThoughtSpot",
                          "current": true
                        },
                        "publicUserName": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to set demo/public username",
                          "regex": ".*",
                          "current": "demouser"
                        },
                        "dataGenRules.enforceFOJoinInChasmTrap": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enforce full outer join between chasm trap sub queries.",
                          "current": false
                        },
                        "dataWorkspace.googleSheetsEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If send to google sheets is enabled for ThoughtSpot",
                          "current": true
                        },
                        "teams.teamMembershipLimit": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Number of members allowed in a team",
                          "current": 100
                        },
                        "inviteModalType": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to indicate which invite modal type to show.",
                          "regex": ".*",
                          "current": "DEFAULT"
                        },
                        "notificationBanner.type": {
                          "category": "MAIN",
                          "dataType": "ENUM",
                          "description": "Enum for Banner type",
                          "values": [
                            "INFO",
                            "WARNING",
                            "ERROR"
                          ],
                          "current": "WARNING"
                        },
                        "notificationConfig.groupMemberShareNotificationLimit": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Group membership limit for us to send share notification.",
                          "current": 500
                        },
                        "customCalendarConfig.useCalendarTableForFiscal": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Use calendar table for Fiscal calendar.",
                          "current": false
                        },
                        "exploreMeasureFiltersEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Explore Measure Filters",
                          "current": false
                        },
                        "teams.memberPlanPageUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "URL of Member Plan Page",
                          "regex": ".*",
                          "current": ""
                        },
                        "emailConfig.welcomeEmailConfig.fromEmail": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Email to send ThoughtSpot welcome emails from.",
                          "regex": ".*",
                          "current": "TS Admin <no-reply@customer.thoughtspot.com>"
                        },
                        "hideDataTabOnNoManageDataPermission": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to hide data tab in case user doesnt have manage data permissions.",
                          "current": false
                        },
                        "edocSchemaUpdateWaitTimeMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Wait timeout for schema changes in milliseconds",
                          "current": 4000
                        },
                        "signUpConfiguration.signUpEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable Signup Button on the Cluster.",
                          "current": true
                        },
                        "requestAccessConfiguration.sendEmailsToEditors": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Default URL for Onboarding.",
                          "current": true
                        },
                        "isEmbraceCsvUploadEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable Embrace Csv Upload",
                          "current": false
                        },
                        "dataPipelineConfig.threadPoolSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "max thread pool size for async task.",
                          "current": 31
                        },
                        "disableStatsDbFalconNotification": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Disable Stats Db Falcon Notification",
                          "current": true
                        },
                        "adminPortalDevEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable AdminPortal for dev",
                          "current": false
                        },
                        "dataGenRules.enableUniqueCountTransformFalcon": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable unique count transformation for falcon.",
                          "current": false
                        },
                        "exportConfig.exportDateAsStringInXLS": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "export date values as string in excel",
                          "current": false
                        },
                        "fetchPivotSummaryFromBackend": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable fetching Pivot Summary data from backend",
                          "current": true
                        },
                        "standardRegionConfig.useVaultCreds": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "flag to allow picking connection properties from vault or from config.",
                          "current": true
                        },
                        "a3Config.restrictCustomRToAdmins": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to restrict functionality of Custom R to only admins when true",
                          "current": true
                        },
                        "customerAdminPhoneNumber": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Phone number of Admin to call.",
                          "regex": "\\+?\\d{0,15}",
                          "current": ""
                        },
                        "licenseConfig.contactUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Contact URL for requesting ThoughtSpot application license.",
                          "regex": ".*",
                          "current": "https://www.thoughtspot.com"
                        },
                        "a3Config.isSpotIQV2OnByDefault": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "This flag controls the default SpotIQ experience for all users on a cluster i.e whether all users will see V1 or V2 on the SpotIQ page. \n",
                          "current": true
                        },
                        "onboardingConfiguration.maxNumDefaultPinboard": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum number of default Pinboards.",
                          "current": 3
                        },
                        "popularColumnsSortingOrder": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Configuration for popularColumns sorting order.",
                          "regex": ".*",
                          "current": "COLUMN_TYPE"
                        },
                        "exportConfig.csvFormatVersion": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to set version of CSV formatting to be used",
                          "regex": ".*",
                          "current": "V2"
                        },
                        "rememberedSessionIdleTimeoutMs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Session idle timeout for an authenticated session with remember me set to true.",
                          "current": -1
                        },
                        "enableFullStory": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable FullStory",
                          "current": true
                        },
                        "maxNumSearchIQPreferredColumnsAllowed": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum number of searchIQ preferred columns within a table.",
                          "current": 15
                        },
                        "oidcConfiguration.serviceAppClientID": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "OIDC Okta Service App Client ID",
                          "regex": ".*",
                          "current": ""
                        },
                        "tseClientId": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Configuration for Tse Client Id",
                          "regex": ".*",
                          "current": ""
                        },
                        "standardRegionConfig.dbPort": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Port for the db connection.",
                          "regex": ".*",
                          "current": "5432"
                        },
                        "dataGenRules.allowWorksheetRecursiveRead": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to allow a view to be read multiple times without throwing error.",
                          "current": false
                        },
                        "highCardinalityMaxDataSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Result set max batch size for high cardinality charts.",
                          "current": 20000
                        },
                        "dataWorkspace.msTeamsEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If msTeamsEnabled is enabled for ThoughtSpot",
                          "current": true
                        },
                        "a3Config.listPageMaxTimelyJobsForSorting": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Threshold value of Timely jobs beyond which sorting is disabled",
                          "current": 1000
                        },
                        "tseSeekwellSFDCFeatureEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse Seekwell SFDC Feature Enabled Flag.",
                          "current": false
                        },
                        "exportConfig.clipFiltersInPdf": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to clip filters in the exported pdfs",
                          "current": true
                        },
                        "dataWorkspace.webexEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If webex is enabled for ThoughtSpot",
                          "current": false
                        },
                        "dataGenRules.cascadeFilter": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to indicate if filters are cascaded filters by default.",
                          "current": true
                        },
                        "eurekaSearchBarInNav": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag toggling eureka search bar in main nav",
                          "current": false
                        },
                        "maxNumSearchIQPreferredDateColumnsAllowed": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum number of searchIQ preferred date columns within a table.",
                          "current": 1
                        },
                        "selfClusterName": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Thoughtspot cluster name.",
                          "regex": ".*",
                          "current": "local"
                        },
                        "teams.maxRowLimit": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Number of rows provided for a team",
                          "current": 5000000
                        },
                        "enablePinboardFollow": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable pinboard follow/subscribe.",
                          "current": true
                        },
                        "oidcConfiguration.clientID": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "OIDC Client ID",
                          "regex": ".*",
                          "current": ""
                        },
                        "standardRegionConfig.dbName": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "DB name for the connection.",
                          "regex": ".*",
                          "current": "geo_spatial_vault"
                        },
                        "geoTileSourceId": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to indicate which tiles source to use in geo charts",
                          "regex": ".*",
                          "current": "THOUGHTSPOT_LOCAL"
                        },
                        "showUnsecuredDependents": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show unsecured dependents of an object",
                          "current": true
                        },
                        "dataGenRules.enableBypassRLS": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "\"bypassRLS\" flag on a worksheet is honored iff this is true.",
                          "current": true
                        },
                        "vizEmbedConfiguration.disableTransformations": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Whether transformations are permitted within an embedded viz.",
                          "current": false
                        },
                        "loginConfig.allowSystemUserUILogin": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Allow system user to login through UI",
                          "current": false
                        },
                        "tsePostgresEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Tse Pipeline Postgres Enabled Flag.",
                          "current": true
                        },
                        "maxNumDataApiRows": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Size for maximum number of rows that can be returned using data api.",
                          "current": 100000
                        },
                        "onboardingConfiguration.maxQueryLogs": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum number of query logs to be retrieved.",
                          "current": 10
                        },
                        "callosumSaaSTest": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Does not matter right now",
                          "current": 1
                        },
                        "a3Config.enableCortex": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable Cortex.",
                          "current": false
                        },
                        "teams.ownerPlanPageUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "URL of Owner Plan Page",
                          "regex": ".*",
                          "current": ""
                        },
                        "maxPrincipalObjectsBatchSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Maximum principal objects to fetch",
                          "current": 30
                        },
                        "customRegionConfig.fileReaderBuffer": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Size of buffer to read contents of the custom region file while verifying size.",
                          "current": 10240
                        },
                        "enableOrgsOnFT": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable Orgs on FT/TE",
                          "current": false
                        },
                        "exportConfig.legalDisclaimerText": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Flag to set legal disclaimer text in downloaded csv/xls/pdf",
                          "regex": ".*",
                          "current": ""
                        },
                        "metadataGenRules.newAnswerSheetName": {
                          "category": "METADATA",
                          "dataType": "STRING",
                          "description": "Default name to use for newly created answer sheets.",
                          "regex": ".*",
                          "current": "Untitled"
                        },
                        "showNeedHelp": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to show need help link if true.",
                          "current": true
                        },
                        "tseLicenseConfig": {
                          "category": "MAIN",
                          "dataType": "OBJECT",
                          "description": "TSE license configuration.",
                          "current": {
                            "freeTrialEnabled": false,
                            "freeTrialExpired": false
                          }
                        },
                        "a3Config.enableInsightsReadFromRepo": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable/disable reading of insights from a3 repo",
                          "current": false
                        },
                        "oidcConfiguration.clientSecret": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "OIDC Client Secret",
                          "regex": ".*",
                          "current": ""
                        },
                        "synonymGenerationEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable synonym auto generation",
                          "current": false
                        },
                        "enableInviteInShareV2": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Enable inviting a new user in share v2",
                          "current": false
                        },
                        "allowPartialPinboardEDocImport": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable or disable database writes using edoc.",
                          "current": false
                        },
                        "customCalendarConfig.dateFormat": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "The default date format to be used by the cluster.",
                          "regex": ".*",
                          "current": "MM/dd/yyyy"
                        },
                        "schedulerKafkaBroker": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "Configuration for scheduler kafka broker",
                          "regex": ".*",
                          "current": ""
                        },
                        "walkMeConfiguration.enableWalkme": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable walkme on a particular cluster.",
                          "current": true
                        },
                        "useQueryHashForWorkerSelection": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Use query hash to select Falcon worker for query execution",
                          "current": true
                        },
                        "defaultChartDataSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Result set starting batch size for high cardinality charts.",
                          "current": 5000
                        },
                        "onboardingConfiguration.enabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If onboarding is to be enabled.",
                          "current": true
                        },
                        "activeConnectionThreshold": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Active connection threshold value",
                          "current": 500
                        },
                        "exportConfig.applyDateFormattingInExcel": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to apply date formatting in the exported excel",
                          "current": true
                        },
                        "dataPipelineConfig.disableHTTPS": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "seekwell use https, by default https will be enabled.",
                          "current": false
                        },
                        "customCalendarConfig.defaultClusterCalendar": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "The default calendar table to be used by the cluster.",
                          "regex": ".*",
                          "current": ""
                        },
                        "useCustomEmbedUrls": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to use Custom Embed Urls if set true.",
                          "current": false
                        },
                        "dataWorkspace.hubSpotEnabled": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "If hubSpotEnabled is enabled for ThoughtSpot",
                          "current": true
                        },
                        "embraceStatsConfig.timelyJobCronExpression": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "timely cron job expression for embrace stats collection",
                          "regex": ".*",
                          "current": "0 0 0 * * *"
                        },
                        "documentationConfig.snowflakeConnectionDocUrl": {
                          "category": "MAIN",
                          "dataType": "STRING",
                          "description": "ThoughtSpot online documentation URL for connecting to Snowflake.",
                          "regex": ".*",
                          "current": "https://thoughtspot.wistia.com/medias/ladjhdc2na/"
                        },
                        "showUnderlyingDataForChasmTrap": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to allow show underlying data for chasm trap",
                          "current": true
                        },
                        "batchSize": {
                          "category": "MAIN",
                          "dataType": "INTEGER",
                          "description": "Data result set batch size. Data is exported in batches of batchSize upto a maximum of maxNumPaginatedRows.",
                          "current": 1000
                        },
                        "dataGenRules.enableUniqueCountTransformEmbrace": {
                          "category": "DATA",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable unique count transformation for embrace.",
                          "current": true
                        },
                        "allowTMLJoinEdit": {
                          "category": "MAIN",
                          "dataType": "BOOLEAN",
                          "description": "Flag to enable editing of join condition using tml.",
                          "current": true
                        }
                      },
                      "__args": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/search": {
      "post": {
        "operationId": "searchOrgs",
        "description": "Gets Orgs configured on a ThoughtSpot instance. Requires cluster administration privileges.",
        "tags": [
          "Orgs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifier": {
                    "description": "ID or name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the Org.",
                    "type": "string",
                    "enum": [
                      "SHOW",
                      "HIDDEN"
                    ],
                    "deprecated": false
                  },
                  "status": {
                    "description": "Status of the Org.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "IN_ACTIVE"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUIDs or names of the users for which you want to retrieve the Orgs data.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "id": 0,
                        "name": "Primary",
                        "status": "ACTIVE",
                        "description": "Primary Org",
                        "visibility": "SHOW"
                      },
                      {
                        "id": 583464508,
                        "name": "test_org",
                        "status": "ACTIVE",
                        "description": "test_org",
                        "visibility": "SHOW"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/search": {
      "post": {
        "operationId": "searchTags",
        "description": "Allows searching tags.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_identifier": {
                    "description": "Name or Id of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Color of the tag.",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tags search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "name": "test4",
                        "id": "0935bbb5-17e2-43ab-b657-da6bf347cbb4",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684937524885,
                        "modification_time_in_millis": 1684937524885,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "0935bbb5-17e2-43ab-b657-da6bf347cbb4"
                      },
                      {
                        "name": "stick me",
                        "id": "53a10282-42be-492e-9560-66d5c5f6657d",
                        "color": "#ff78a9",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1412881354020,
                        "modification_time_in_millis": 1412881362142,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "53a10282-42be-492e-9560-66d5c5f6657d"
                      },
                      {
                        "name": "test6",
                        "id": "65a5c39a-daf5-4cae-975f-44283628494e",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684988834183,
                        "modification_time_in_millis": 1684988887888,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "65a5c39a-daf5-4cae-975f-44283628494e"
                      },
                      {
                        "name": "try me",
                        "id": "7840759b-2cbf-4dca-aaa4-f8b86a8b9dcd",
                        "color": "#fbc17c",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1412881252884,
                        "modification_time_in_millis": 1412881301302,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "7840759b-2cbf-4dca-aaa4-f8b86a8b9dcd"
                      },
                      {
                        "name": "test",
                        "id": "a6cba975-829f-4812-8426-b7a63dc9512a",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684932982284,
                        "modification_time_in_millis": 1684932982284,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "a6cba975-829f-4812-8426-b7a63dc9512a"
                      },
                      {
                        "name": "test3",
                        "id": "c03b270b-7a3a-4bf7-ab3a-3030a42e4374",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684935678566,
                        "modification_time_in_millis": 1684935678566,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "c03b270b-7a3a-4bf7-ab3a-3030a42e4374"
                      },
                      {
                        "name": "name me",
                        "id": "d50f2511-9296-44a9-bfd9-41041b96972e",
                        "color": "#fe7a76",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1412881314851,
                        "modification_time_in_millis": 1412881341905,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "d50f2511-9296-44a9-bfd9-41041b96972e"
                      },
                      {
                        "name": "test1",
                        "id": "df4b0d73-514e-483d-9d23-55ef60d84e86",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684935589926,
                        "modification_time_in_millis": 1684935589926,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "df4b0d73-514e-483d-9d23-55ef60d84e86"
                      },
                      {
                        "name": "test2",
                        "id": "f9a2e201-8591-47b2-9405-86d20aad1773",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684935659977,
                        "modification_time_in_millis": 1684935659977,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "f9a2e201-8591-47b2-9405-86d20aad1773"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/search": {
      "post": {
        "operationId": "searchUserGroups",
        "description": "Allows searching groups. Requires administrator privileges.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_liveboard_identifiers": {
                    "description": "GUID of Liveboards which will be assigned as default Liveboards for the users in the specified group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Display name of the group",
                    "type": "string",
                    "deprecated": false
                  },
                  "group_identifier": {
                    "description": "GUID or name of the group",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "ID or name of the Org to which the group belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Group type.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Filter groups with a list of roles assigned to a group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options to filter group details.",
                    "$ref": "#/components/schemas/SortOptions",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User group search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1459376460373,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": "Belongs directly to rls-group-3 and rls-group-4",
                        "display_name": "rls-group-2",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "cfa01dd9-9605-422d-b7de-a37afff63647",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": -1,
                        "modification_time_in_millis": 1459376460373,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "name": "rls-group-2",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "cfa01dd9-9605-422d-b7de-a37afff63647",
                        "parent_type": "GROUP",
                        "privileges": [],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "160b8fa4-4028-4ffe-a559-cbaf33c0a9b3",
                            "name": "rlsgroup2user"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "System Management Group",
                        "external": false,
                        "generation_number": 29,
                        "hidden": false,
                        "id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                        "index": 3,
                        "index_version": 21,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "System",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "parent_type": "GROUP",
                        "privileges": [
                          "DATAMANAGEMENT",
                          "A3ANALYSIS"
                        ],
                        "sub_groups": [],
                        "system_group": true,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                            "name": "system"
                          },
                          {
                            "id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                            "name": "su"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "Analyst Group",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "c241143a-0e2b-44b6-9cbc-c2b3cff8c57d",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "Analyst",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "c241143a-0e2b-44b6-9cbc-c2b3cff8c57d",
                        "parent_type": "GROUP",
                        "privileges": [
                          "A3ANALYSIS"
                        ],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "994cdad7-2143-4936-a35f-8dd0f852e4d6",
                            "name": "guest1"
                          },
                          {
                            "id": "37539499-624a-4d3d-8f88-e9be5653c114",
                            "name": "guest2"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1459376443511,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": "Belongs directly to rls-group-3",
                        "display_name": "rls-group-1",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "df3a5cd4-333d-47d8-bec2-12b0e916fed5",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": -1,
                        "modification_time_in_millis": 1459376443511,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "name": "rls-group-1",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "df3a5cd4-333d-47d8-bec2-12b0e916fed5",
                        "parent_type": "GROUP",
                        "privileges": [],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "3b4740ec-3626-4d54-8b7e-ebda45510fb6",
                            "name": "rlsgroup1user"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1459376495060,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": "Contains directly rls-group-1, rls-group-2 and belongs direclty to rls-group-5",
                        "display_name": "rls-group-3",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "f3649858-e11b-4ddf-ae51-3eea21c9ada5",
                        "index": 5,
                        "index_version": 26,
                        "metadata_version": 7,
                        "modification_time_in_millis": 1459376590681,
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "name": "rls-group-3",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "f3649858-e11b-4ddf-ae51-3eea21c9ada5",
                        "parent_type": "GROUP",
                        "privileges": [],
                        "sub_groups": [
                          {
                            "id": "df3a5cd4-333d-47d8-bec2-12b0e916fed5",
                            "name": "rls-group-1"
                          },
                          {
                            "id": "cfa01dd9-9605-422d-b7de-a37afff63647",
                            "name": "rls-group-2"
                          }
                        ],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "5dc626e5-1921-4758-a7bf-8501605aa59f",
                            "name": "rlsgroup3user"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "Consumer Group",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "Consumer",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "046760d3-c0be-47d0-a9e7-a1b37c4e4432",
                        "parent_type": "GROUP",
                        "privileges": [],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "f68147b5-9102-4838-a942-24a30122fc6b",
                            "name": "guest4"
                          },
                          {
                            "id": "37539499-624a-4d3d-8f88-e9be5653c114",
                            "name": "guest2"
                          },
                          {
                            "id": "dd3362d8-713b-4e8c-958e-a542e4b0a3d5",
                            "name": "guest3"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "User Data Uploader Group",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "314ac3fe-c5e1-4898-9cf7-29d9d455f052",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "UserDataUploader",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "parent_type": "GROUP",
                        "privileges": [
                          "USERDATAUPLOADING"
                        ],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "994cdad7-2143-4936-a35f-8dd0f852e4d6",
                            "name": "guest1"
                          },
                          {
                            "id": "37539499-624a-4d3d-8f88-e9be5653c114",
                            "name": "guest2"
                          },
                          {
                            "id": "dd3362d8-713b-4e8c-958e-a542e4b0a3d5",
                            "name": "guest3"
                          },
                          {
                            "id": "4391d676-2dd8-4248-b6db-d973811f0122",
                            "name": "guest"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "ShareWithAll Group",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "ShareWithAll",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "983ddaab-15cf-4c95-a21e-67383a67b6d1",
                        "parent_type": "GROUP",
                        "privileges": [
                          "SHAREWITHALL"
                        ],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "994cdad7-2143-4936-a35f-8dd0f852e4d6",
                            "name": "guest1"
                          },
                          {
                            "id": "dd3362d8-713b-4e8c-958e-a542e4b0a3d5",
                            "name": "guest3"
                          },
                          {
                            "id": "f68147b5-9102-4838-a942-24a30122fc6b",
                            "name": "guest4"
                          },
                          {
                            "id": "37539499-624a-4d3d-8f88-e9be5653c114",
                            "name": "guest2"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "Data Downloader Group",
                        "external": false,
                        "generation_number": 28,
                        "hidden": false,
                        "id": "280a2235-3721-43fc-aa25-5d33549ecc90",
                        "index": 2,
                        "index_version": 26,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "DataDownloader",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "parent_type": "GROUP",
                        "privileges": [
                          "DATADOWNLOADING"
                        ],
                        "sub_groups": [],
                        "system_group": false,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "dd3362d8-713b-4e8c-958e-a542e4b0a3d5",
                            "name": "guest3"
                          },
                          {
                            "id": "4391d676-2dd8-4248-b6db-d973811f0122",
                            "name": "guest"
                          },
                          {
                            "id": "37539499-624a-4d3d-8f88-e9be5653c114",
                            "name": "guest2"
                          },
                          {
                            "id": "994cdad7-2143-4936-a35f-8dd0f852e4d6",
                            "name": "guest1"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      },
                      {
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "complete_detail": true,
                        "content": null,
                        "creation_time_in_millis": 1354006445722,
                        "default_liveboards": [],
                        "deleted": false,
                        "deprecated": false,
                        "description": null,
                        "display_name": "Administration Group",
                        "external": false,
                        "generation_number": 41,
                        "hidden": false,
                        "id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                        "index": 1,
                        "index_version": 41,
                        "metadata_version": 0,
                        "modification_time_in_millis": 1354006445987,
                        "modifier_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                        "name": "Administrator",
                        "orgs": [
                          {
                            "id": "0",
                            "name": "Primary"
                          }
                        ],
                        "owner_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "parent_type": "GROUP",
                        "privileges": [
                          "AUTHORING",
                          "DATADOWNLOADING",
                          "DATAMANAGEMENT",
                          "ADMINISTRATION",
                          "A3ANALYSIS",
                          "SHAREWITHALL",
                          "USERDATAUPLOADING"
                        ],
                        "sub_groups": [],
                        "system_group": true,
                        "tags": [],
                        "type": "LOCAL_GROUP",
                        "users": [
                          {
                            "id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                            "name": "su"
                          },
                          {
                            "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                            "name": "tsadmin"
                          }
                        ],
                        "visibility": "SHARABLE",
                        "roles": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/search": {
      "post": {
        "operationId": "searchMetadata",
        "description": "Allows searching for metadata objects. You can search for metadata objects\nsuch as Liveboard, Answer. Requires at least view access to the metadata object.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects such as Liveboards, Answers, and Worksheets.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataListItemInput"
                    },
                    "deprecated": false
                  },
                  "permissions": {
                    "description": "Object permission details to search by.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionInput"
                    },
                    "deprecated": false
                  },
                  "created_by_user_identifiers": {
                    "description": "GUID or name of user who created the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "dependent_object_version": {
                    "description": "Version of the dependent table of the metadata like worksheets.",
                    "default": "V1",
                    "type": "string",
                    "enum": [
                      "V1",
                      "V2"
                    ],
                    "deprecated": false
                  },
                  "exclude_objects": {
                    "description": "List of metadata objects to exclude from search.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExcludeMetadataListItemInput"
                    },
                    "deprecated": false
                  },
                  "favorite_object_options": {
                    "description": "Options to sort the API response by objects set as favorites\nfor the logged-in user or the users specified in the API request.",
                    "$ref": "#/components/schemas/FavoriteObjectOptionsInput",
                    "deprecated": false
                  },
                  "include_auto_created_objects": {
                    "description": "Includes system-generated metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_dependent_objects": {
                    "description": "Includes dependents of the metadata object specified in the API request.\nFor example, a worksheet can consist of dependent objects such as Liveboards or Answers.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_details": {
                    "description": "Includes complete details of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_headers": {
                    "description": "Includes headers of the metadata objects.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_hidden_objects": {
                    "description": "Includes details of the hidden objects, such as a column in a worksheet or a table.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_incomplete_objects": {
                    "description": "Includes objects with incomplete metadata.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_visualization_headers": {
                    "description": "Includes visualization headers of the specified Liveboard object.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_worksheet_search_assist_data": {
                    "description": "If search assistance lessons are configured on a worksheet,\nthe API returns the search assist data for Worksheet objects.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "modified_by_user_identifiers": {
                    "description": "Includes ID or names of the users who have modified the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options to filter metadata details.",
                    "$ref": "#/components/schemas/MetadataSearchSortOptions",
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Tags to filter metadata objects by",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "include_stats": {
                    "description": "Indicates whether to include stats of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Metadata objects search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataSearchResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "metadata_id": "e82fe65a-7ac0-4282-a783-7a35c01b8dbd",
                        "metadata_name": "Broken Pinboard",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "e82fe65a-7ac0-4282-a783-7a35c01b8dbd",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Broken Pinboard",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1455598191207,
                          "modified": 1455598218094,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "e82fe65a-7ac0-4282-a783-7a35c01b8dbd",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "78950be9-0717-449e-be26-64ea42617dd1",
                        "metadata_name": "Broken Pinboard 2",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "78950be9-0717-449e-be26-64ea42617dd1",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Broken Pinboard 2",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1456111880442,
                          "modified": 1456111895299,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "78950be9-0717-449e-be26-64ea42617dd1",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                        "metadata_name": "Learn how to use ThoughtSpot",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Learn how to use ThoughtSpot",
                          "description": "This pinboard is to enable learning",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1494392331242,
                          "modified": 1494392331243,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "4145513c-c9bd-4e48-af44-8dc001b5f955",
                        "metadata_name": "TS Stats: Latency Visualizations (See description for usage)",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "4145513c-c9bd-4e48-af44-8dc001b5f955",
                          "indexVersion": 8,
                          "generationNum": 8,
                          "name": "TS Stats: Latency Visualizations (See description for usage)",
                          "description": "https://<host_name>/?col1=Viz%20Id&op1=EQ&val1=<viz_id>#/pinboard/4145513c-c9bd-4e48-af44-8dc001b5f955       This can be used to get the latencies for any viz you care about. Replace the <host_name> with the name/ip of the machine where thoughtspot is running. Replace <viz_id> by the viz id of the visualization you want. You can get the viz id from the embed url link of the visualization.",
                          "author": "67e15c06-d153-4924-a4cd-ff615393b60f",
                          "authorName": "system",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "System User",
                          "created": 1472239482520,
                          "modified": 1514448473796,
                          "modifiedBy": "67e15c06-d153-4924-a4cd-ff615393b60f",
                          "owner": "4145513c-c9bd-4e48-af44-8dc001b5f955",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "33248a57-cc70-4e39-9199-fb5092283381",
                        "metadata_name": "Basic Pinboard 2",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "33248a57-cc70-4e39-9199-fb5092283381",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Basic Pinboard 2",
                          "description": "This pinboard contains a chart, a table and a headline visualization based on TPCH.",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1487731361818,
                          "modified": 1583190552457,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "33248a57-cc70-4e39-9199-fb5092283381",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "6715f768-8930-4180-9a3d-1efdbfaa8e7f",
                        "metadata_name": "Headline Pinboard",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "6715f768-8930-4180-9a3d-1efdbfaa8e7f",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Headline Pinboard",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1519940021267,
                          "modified": 1583190617009,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "6715f768-8930-4180-9a3d-1efdbfaa8e7f",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "b2d68a4f-cf67-4723-966f-8a592fdbf8b9",
                        "metadata_name": "KPI Currency Pinboard",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "b2d68a4f-cf67-4723-966f-8a592fdbf8b9",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "KPI Currency Pinboard",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1519933586145,
                          "modified": 1583190628757,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "b2d68a4f-cf67-4723-966f-8a592fdbf8b9",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "262abdac-b00f-4f5f-ad33-fcf10154184f",
                        "metadata_name": "Empty Pinboard",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "262abdac-b00f-4f5f-ad33-fcf10154184f",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Empty Pinboard",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1519945152030,
                          "modified": 1583190637534,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "262abdac-b00f-4f5f-ad33-fcf10154184f",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "327f4d60-c502-43b0-b1d4-c73df5031a2e",
                        "metadata_name": "Charts Pinboard",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "327f4d60-c502-43b0-b1d4-c73df5031a2e",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Charts Pinboard",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1519880454269,
                          "modified": 1583190743604,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "327f4d60-c502-43b0-b1d4-c73df5031a2e",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      },
                      {
                        "metadata_id": "601be8e5-140e-477c-8812-843795306438",
                        "metadata_name": "Pinboard Filter - datatypes",
                        "metadata_type": "LIVEBOARD",
                        "dependent_objects": null,
                        "incomplete_objects": null,
                        "metadata_detail": null,
                        "metadata_header": {
                          "hasTabs": false,
                          "modelVersion": "V1",
                          "hasMandatoryFilter": false,
                          "isMandatoryFilterValueSelected": true,
                          "id": "601be8e5-140e-477c-8812-843795306438",
                          "indexVersion": 38,
                          "generationNum": 38,
                          "name": "Pinboard Filter - datatypes",
                          "author": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "authorName": "tsadmin",
                          "hasLenientDiscoverability": false,
                          "authorDisplayName": "Administrator",
                          "created": 1519943239150,
                          "modified": 1583190783265,
                          "modifiedBy": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "owner": "601be8e5-140e-477c-8812-843795306438",
                          "isDeleted": false,
                          "isHidden": false,
                          "isAutoCreated": false,
                          "isAutoDelete": false,
                          "orgIds": [
                            0
                          ],
                          "resolvedObjects": {},
                          "tags": [],
                          "aiAnswerGenerationDisabled": false,
                          "isExternal": false,
                          "isDeprecated": false,
                          "isSharedViaConnection": false
                        },
                        "visualization_headers": null,
                        "stats": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/sql": {
      "post": {
        "operationId": "fetchLiveboardSqlQuery",
        "description": "Fetches SQL query data for Liveboard and its visualizations.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching SQL query of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_id": "601be8e5-140e-477c-8812-843795306438",
                      "metadata_name": "Pinboard Filter - datatypes",
                      "metadata_type": "LIVEBOARD",
                      "sql_queries": [
                        {
                          "metadata_id": "d547ec54-2a37-4516-a222-2b06719af726",
                          "metadata_name": "Total Tax by Category, Customer Address, Ship Priority, Supplier City, Color",
                          "sql_query": "/* query_0: Viz [id: 45b24630-7c60-44f0-8899-79c197e7b7ab, name: Table Viz category customer address ship priority supplier city tax color] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  CUSTOMER.\"Customer Address\" Customer_Address,\n  LINEORDER.\"Ship Priority\" Ship_Priority,\n  SUPPLIER.\"Supplier City\" Supplier_City,\n  PART.Color Color,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM (((LINEORDER\n      , PART)\n    , CUSTOMER)\n  , SUPPLIER)\nWHERE LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\n  and LINEORDER.\"Lineorder Suppkey\" = SUPPLIER.\"Supplier SuppKey\"\nGROUP BY PART.Category, CUSTOMER.\"Customer Address\", LINEORDER.\"Ship Priority\", SUPPLIER.\"Supplier City\", PART.Color\nORDER BY Category, Customer_Address, Ship_Priority, Supplier_City, Color, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "6c6416b3-9816-401a-aad5-c863b019284c",
                          "metadata_name": "Total Discount by Quarterly (Commit Date), Customer Nation, Type, Color",
                          "sql_query": "/* query_0: Viz [id: bb4bbc54-945b-4436-a4cb-fba079054d84, name: Table Viz commit date customer nation type discount color] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  quarter_start_epoch(LINEORDER.\"Commit Date\") c1,\n  CUSTOMER.\"Customer Nation\" Customer_Nation,\n  PART.\"Type\" \"Type\",\n  PART.Color Color,\n  if_null(sum(LINEORDER.Discount), 0) If_Null_Total_Discount\nFROM ((LINEORDER\n    , CUSTOMER)\n  , PART)\nWHERE LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\nGROUP BY quarter_start_epoch(LINEORDER.\"Commit Date\"), CUSTOMER.\"Customer Nation\", PART.\"Type\", PART.Color\nORDER BY c1, Customer_Nation, \"Type\", Color, If_Null_Total_Discount\n\n"
                        },
                        {
                          "metadata_id": "4676087a-a7c1-4c02-abc7-7845731dbb3d",
                          "metadata_name": "Total Quantity by Quarterly (Commit Date) and Ship Mode",
                          "sql_query": "/* query_0: Viz [id: 15945406-6ff5-4ab3-89ba-9d73195600cb, name: Table Viz commit date quantity ship mode] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  quarter_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  if_null(sum(LINEORDER.Quantity), 0) If_Null_Total_Quantity\nFROM LINEORDER\nGROUP BY quarter_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\"\nORDER BY c1, Ship_Mode, If_Null_Total_Quantity\n\n"
                        },
                        {
                          "metadata_id": "16f9166b-d6da-40a2-818f-fb8aa0308361",
                          "metadata_name": "Total Tax by Customer Nation, Customer Region, Quarterly (Commit Date)",
                          "sql_query": "/* query_0: Viz [id: 96d877d7-f705-45ec-84ee-20fde5007737, name: Table Viz customer nation customer region commit date tax] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  CUSTOMER.\"Customer Nation\" Customer_Nation,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  quarter_start_epoch(LINEORDER.\"Commit Date\") c1,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM (LINEORDER\n  , CUSTOMER)\nWHERE LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY CUSTOMER.\"Customer Nation\", CUSTOMER.\"Customer Region\", quarter_start_epoch(LINEORDER.\"Commit Date\")\nORDER BY Customer_Nation, Customer_Region, c1, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "c7f44e84-7ad2-4729-9ad3-194bf263f86e",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "e44af9fd-c4e5-40e5-9d2a-a58c6bc00b6f",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "21633eeb-dac0-4aa1-a4eb-9a665db7e469",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "486ac227-a266-499e-9cd0-e50f6127eb05",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "7ea22e94-df37-4e79-adc7-67621dc2a345",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "251221ac-74c0-4404-b73d-894c5b52d5dd",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        },
                        {
                          "metadata_id": "3b045c2b-073b-450c-ac6b-a8810d85d15d",
                          "metadata_name": "Filter 0",
                          "sql_query": "/* query_0: Viz [id: 95b76737-7ecc-46e0-a4b9-bf5a19824304, name: Table Viz category = {wildcard} mfgr#12 mfgr#14 mfgr#22 mfgr#24 category commit date commit date >= 07/18/1996 commit date <= 10/29/1998 tax tax >= 5 ship mode = {wildcard} air fob ship mode brand1 = {wildcard} brand1 customer region = {wildcard} asia europe middle east customer region the month formula = '{wildcard}' 'january' 'february' 'march' 'july' 'may' 'october' the month formula] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  PART.Category Category,\n  month_start_epoch(LINEORDER.\"Commit Date\") c1,\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  PART.Brand1 Brand1,\n  CUSTOMER.\"Customer Region\" Customer_Region,\n  month_in_year_str(LINEORDER.\"Commit Date\") the_month_formula,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax\nFROM ((LINEORDER\n    , PART)\n  , CUSTOMER)\nWHERE PART.Category in ('mfgr#12', 'mfgr#14', 'mfgr#22', 'mfgr#24')\n  and LINEORDER.\"Commit Date\" >= 837673200\n  and LINEORDER.\"Commit Date\" < 909734400\n  and LINEORDER.Tax >= 5\n  and LINEORDER.\"Ship Mode\" in ('air', 'fob')\n  and CUSTOMER.\"Customer Region\" in ('asia', 'europe', 'middle east')\n  and month_in_year_str(LINEORDER.\"Commit Date\") in ('january', 'february', 'march', 'july', 'may', 'october')\n  and LINEORDER.\"Lineorder PartKey\" = PART.\"Part PartKey\"\n  and LINEORDER.\"Lineorder CustKey\" = CUSTOMER.\"Customer CustKey\"\nGROUP BY PART.Category, month_start_epoch(LINEORDER.\"Commit Date\"), LINEORDER.\"Ship Mode\", PART.Brand1, CUSTOMER.\"Customer Region\", month_in_year_str(LINEORDER.\"Commit Date\")\nORDER BY Category, c1, Ship_Mode, Brand1, Customer_Region, the_month_formula, If_Null_Total_Tax\n\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/sql": {
      "post": {
        "operationId": "fetchAnswerSqlQuery",
        "description": "Fetches SQL query data for an Answer.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Answer.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching SQL query of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_id": "0fb54198-868d-45de-8929-139b0089e964",
                      "metadata_name": "Parameters Answer",
                      "metadata_type": "ANSWER",
                      "sql_queries": [
                        {
                          "metadata_id": "0fb54198-868d-45de-8929-139b0089e964",
                          "metadata_name": "Parameters Answer",
                          "sql_query": "/* query_0: Viz [id: d2804a05-e27c-4e3c-a943-2c2a3aa884ea, name: Table Viz tax ship mode adjusted tax parameterized commit da] */\n/* deadline (ms): 60000 */\n/* return_result: true */\nSELECT\n  LINEORDER.\"Ship Mode\" Ship_Mode,\n  if_null(sum(LINEORDER.Tax), 0) If_Null_Total_Tax,\n  if_null(sum((LINEORDER.Tax - (LINEORDER.Discount * 0.5))), 0) If_Null_Total_Adjusted_Tax\nFROM LINEORDER\nWHERE (LINEORDER.\"Commit Date\" = 1665903600)\nGROUP BY LINEORDER.\"Ship Mode\"\nORDER BY Ship_Mode, If_Null_Total_Tax, If_Null_Total_Adjusted_Tax\n\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/liveboard": {
      "post": {
        "operationId": "exportLiveboardReport",
        "description": "Exports Liveboard and visualization data in PDF, PNG, XLS, or CSV format.\nRequires at least view access to the Liveboard.",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard object.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "GUID or name of visualizations on the Liveboard. If this parameter is\nnot defined, the API returns a report with all visualizations saved on a Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ],
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:'region', op1: 'EQ', val1: 'northeast' }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: 'region', asc1 : true, sortCol2 : 'date' }",
                    "type": "object",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/PdfOptionsInput",
                    "deprecated": false
                  },
                  "png_options": {
                    "description": "Options for PNG export.",
                    "$ref": "#/components/schemas/PngOptionsInput",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export report file of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/answer": {
      "post": {
        "operationId": "exportAnswerReport",
        "description": "Export report file for Answer data.",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ],
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:region, op1: EQ, val1: northeast }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: region, asc1 :true, sortCol2 : date }",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export report file of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/principals/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOfPrincipals",
        "description": "Fetch permission details for principal objects, such as users and groups.",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principals": {
                    "description": "GUID or name of the principal.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    },
                    "deprecated": false
                  },
                  "metadata": {
                    "description": "Metadata objects for which you want to fetch permission details.\nIf not specified, the API returns permission details for all\nmetadata objects that the specified users and groups can access.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "principals"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching permissions of principals is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "principal_permission_details": [
                        {
                          "principal_id": "7f5e7f87-09a1-487c-a1da-c4bb35e45270",
                          "principal_name": "test_user",
                          "principal_type": "USER",
                          "principal_sub_type": "LOCAL_USER",
                          "metadata_permission_info": [
                            {
                              "metadata_type": "LIVEBOARD",
                              "metadata_permissions": [
                                {
                                  "metadata_id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                                  "metadata_name": "Learn how to use ThoughtSpot",
                                  "metadata_owner": {
                                    "id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                                    "name": "Learn how to use ThoughtSpot"
                                  },
                                  "metadata_author": {
                                    "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                                    "name": "tsadmin"
                                  },
                                  "permission": "READ_ONLY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "__args": {
                        "principals": [
                          {
                            "identifier": "test_user",
                            "type": "USER"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOnMetadata",
        "description": "Fetch permission details for metadata objects",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "principals": {
                    "description": "Principal objects for which you want to fetch permissions.\nIf not specified, the API returns all users and groups that\ncan access the specified metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    },
                    "deprecated": false
                  },
                  "include_dependent_objects": {
                    "description": "Indicates whether to fetch permissions of depedent metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching permissions of metadata objects is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_permission_details": [
                        {
                          "metadata_id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "metadata_name": "testing",
                          "metadata_type": "LIVEBOARD",
                          "metadata_owner": {
                            "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                            "name": "testing"
                          },
                          "metadata_author": {
                            "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                            "name": "tsadmin"
                          },
                          "principal_permission_info": [
                            {
                              "principal_type": "USER_GROUP",
                              "principal_sub_type": "LOCAL_GROUP",
                              "principal_permissions": [
                                {
                                  "principal_id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                                  "principal_name": "Administrator",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            },
                            {
                              "principal_type": "USER",
                              "principal_sub_type": "LOCAL_USER",
                              "principal_permissions": [
                                {
                                  "principal_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                                  "principal_name": "su",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                },
                                {
                                  "principal_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                                  "principal_name": "tsadmin",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "__args": {
                        "metadata": [
                          {
                            "type": "LIVEBOARD",
                            "identifier": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9"
                          }
                        ],
                        "include_dependent_objects": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/searchdata": {
      "post": {
        "operationId": "searchData",
        "description": "Allows passing a search query string and retrieving data from ThoughtSpot.",
        "tags": [
          "Data"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query_string": {
                    "description": "Data search query string token.",
                    "type": "string",
                    "deprecated": false
                  },
                  "logical_table_identifier": {
                    "description": "GUID of the data source object, such as a worksheet, view, or table.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "query_string",
                  "logical_table_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDataResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "contents": [
                        {
                          "available_data_row_count": 1,
                          "column_names": [
                            "Employee_Age"
                          ],
                          "data_rows": [
                            [
                              1773
                            ]
                          ],
                          "record_offset": 0,
                          "record_size": 10,
                          "returned_data_row_count": 1,
                          "sampling_ratio": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/data": {
      "post": {
        "operationId": "fetchLiveboardData",
        "description": "Fetches Liveboard data. Requires at least view access to the Liveboard.",
        "tags": [
          "Data"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "GUIDs or names of the visualizations on the Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_id": "9bd202f5-d431-44bf-9a07-b4f7be372125",
                      "metadata_name": "Parameters Liveboard",
                      "contents": [
                        {
                          "available_data_row_count": 1,
                          "column_names": [
                            "Partial Revenue"
                          ],
                          "data_rows": [
                            [
                              211185441.4
                            ]
                          ],
                          "record_offset": 0,
                          "record_size": 10,
                          "returned_data_row_count": 1,
                          "sampling_ratio": 1,
                          "visualization_id": "db0badd5-47c6-400a-842d-133a7b44d435",
                          "visualization_name": "Total Partial Revenue"
                        },
                        {
                          "available_data_row_count": 1,
                          "column_names": [
                            "Partial Quantity"
                          ],
                          "data_rows": [
                            [
                              1506.399999999999
                            ]
                          ],
                          "record_offset": 0,
                          "record_size": 10,
                          "returned_data_row_count": 1,
                          "sampling_ratio": 1,
                          "visualization_id": "43c9f421-410f-4564-b624-2b3acc4ea8cd",
                          "visualization_name": "Total Partial Quantity"
                        },
                        {
                          "available_data_row_count": 87,
                          "column_names": [
                            "Color",
                            "Total Revenue",
                            "Total Quantity"
                          ],
                          "data_rows": [
                            [
                              "almond",
                              19541612,
                              168
                            ],
                            [
                              "antique",
                              17246918,
                              146
                            ],
                            [
                              "aquamarine",
                              13807460,
                              90
                            ],
                            [
                              "azure",
                              13531495,
                              105
                            ],
                            [
                              "beige",
                              17200390,
                              127
                            ],
                            [
                              "black",
                              17959175,
                              113
                            ],
                            [
                              "blanched",
                              387496,
                              3
                            ],
                            [
                              "blue",
                              11137125,
                              82
                            ],
                            [
                              "brown",
                              32152009,
                              227
                            ],
                            [
                              "burlywood",
                              17844083,
                              149
                            ]
                          ],
                          "record_offset": 0,
                          "record_size": 10,
                          "returned_data_row_count": 10,
                          "sampling_ratio": 1,
                          "visualization_id": "237504c6-cee9-4233-a839-d368f7884cee",
                          "visualization_name": "Total Revenue, Total Quantity by Color"
                        },
                        {
                          "available_data_row_count": 87,
                          "column_names": [
                            "Color",
                            "Total Revenue",
                            "Total Quantity"
                          ],
                          "data_rows": [
                            [
                              "almond",
                              19541612,
                              168
                            ],
                            [
                              "antique",
                              17246918,
                              146
                            ],
                            [
                              "aquamarine",
                              13807460,
                              90
                            ],
                            [
                              "azure",
                              13531495,
                              105
                            ],
                            [
                              "beige",
                              17200390,
                              127
                            ],
                            [
                              "black",
                              17959175,
                              113
                            ],
                            [
                              "blanched",
                              387496,
                              3
                            ],
                            [
                              "blue",
                              11137125,
                              82
                            ],
                            [
                              "brown",
                              32152009,
                              227
                            ],
                            [
                              "burlywood",
                              17844083,
                              149
                            ]
                          ],
                          "record_offset": 0,
                          "record_size": 10,
                          "returned_data_row_count": 10,
                          "sampling_ratio": 1,
                          "visualization_id": "754977f5-177a-492b-b79a-b703e33db9ef",
                          "visualization_name": "Total Revenue, Total Quantity by Color"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/data": {
      "post": {
        "operationId": "fetchAnswerData",
        "description": "Fetches data from a saved Answer. Requires at least view access to the Answer object.",
        "tags": [
          "Data"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Answer.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDataResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_id": "0fb54198-868d-45de-8929-139b0089e964",
                      "metadata_name": "Parameters Answer",
                      "contents": [
                        {
                          "available_data_row_count": 2,
                          "column_names": [
                            "Ship Mode",
                            "Total Tax",
                            "Adjusted Tax"
                          ],
                          "data_rows": [
                            [
                              "fob",
                              7,
                              2.5
                            ],
                            [
                              "mail",
                              2,
                              0
                            ]
                          ],
                          "record_offset": 0,
                          "record_size": 10,
                          "returned_data_row_count": 2,
                          "sampling_ratio": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/logs/fetch": {
      "post": {
        "operationId": "fetchLogs",
        "description": "Fetches security audit logs. Requires administrator privileges.",
        "tags": [
          "Log"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log_type": {
                    "description": "Name of the log type.",
                    "type": "string",
                    "enum": [
                      "SECURITY_AUDIT"
                    ],
                    "deprecated": false
                  },
                  "start_epoch_time_in_millis": {
                    "description": "Start time in EPOCH format",
                    "type": "number",
                    "format": "float",
                    "deprecated": false
                  },
                  "end_epoch_time_in_millis": {
                    "description": "End time in EPOCH format",
                    "type": "number",
                    "format": "float",
                    "deprecated": false
                  }
                },
                "required": [
                  "log_type"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Log fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/search": {
      "post": {
        "operationId": "searchConfig",
        "description": "Search local repository configuration <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifiers": {
                    "description": "List of Unique identifier of the organization. Provide value -1 for cluster level. Example : [\"OrgID1-or-Name1\", \"OrgID2-or-Name2\"] <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of local repository configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoConfigObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/search": {
      "post": {
        "operationId": "searchCommits",
        "description": "List the commit history of a metadata object <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ],
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "Name of the branch from which commit history needs to be displayed",
                    "type": "string",
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "Record offset point in the commit history to display the response",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "Number of history records from record offset point to be displayed in the response",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier",
                  "metadata_type"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Commit history of the metadata object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitHistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/search": {
      "post": {
        "operationId": "searchConnection",
        "description": "Search connection objects. Requires DATAMANAGEMENT privilege.",
        "tags": [
          "Connections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connections": {
                    "description": "List of connections and name pattern",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectionInput"
                    },
                    "deprecated": false
                  },
                  "data_warehouse_types": {
                    "description": "Array of types of data warehouse defined for the connection.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "SNOWFLAKE",
                        "AMAZON_REDSHIFT",
                        "GOOGLE_BIGQUERY",
                        "AZURE_SYNAPSE",
                        "TERADATA",
                        "SAP_HANA",
                        "STARBURST",
                        "ORACLE_ADW",
                        "DATABRICKS",
                        "DENODO",
                        "DREMIO",
                        "TRINO",
                        "PRESTO"
                      ]
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "data_warehouse_object_type": {
                    "description": "Data warehouse object type.",
                    "type": "string",
                    "enum": [
                      "DATABASE",
                      "SCHEMA",
                      "TABLE",
                      "COLUMN"
                    ],
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptionInput",
                    "deprecated": false
                  },
                  "include_details": {
                    "description": "Indicates whether to include complete details of the connection objects.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of connections to the datasource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchConnectionResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "id": "46030ea3-ecba-4cbf-a02c-c2ef5d5f29f1",
                        "name": "SnowflakeConnection",
                        "description": "",
                        "data_warehouse_type": "SNOWFLAKE",
                        "data_warehouse_objects": null,
                        "details": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/search": {
      "post": {
        "operationId": "searchRoles",
        "description": "Gets Roles configured on a ThoughtSpot instance.\nRequires cluster Administration, Role Administration or\nGroup Administration privileges.",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role_identifiers": {
                    "description": "unique ID or name of the Roles",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "Unique Id or name of the Organisation",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "Unique Id or name of the User Group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges assigned to the Role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "UNKNOWN",
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "deprecated": {
                    "description": "Indicates whether the role is deprecated.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "external": {
                    "description": "Indicates whether the Role is external",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "shared_via_connection": {
                    "description": "Indicates whether the role is shared via connection",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "permissions": {
                    "description": "Permission details of the Role",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "READ_ONLY",
                        "MODIFY",
                        "NO_ACCESS"
                      ]
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Roles search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchRoleResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "id": "b0277882-b6c2-497e-97b1-7b3787fd99df",
                        "name": "Admin",
                        "description": "Role with Admin Privilege",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [
                          "USER_ADMINISTRATION",
                          "GROUP_ADMINISTRATION",
                          "ROLE_ADMINISTRATION",
                          "AUTHENTICATION_ADMINISTRATION",
                          "APPLICATION_ADMINISTRATION",
                          "SYSTEM_INFO_ADMINISTRATION",
                          "BILLING_INFO_ADMINISTRATION",
                          "A3ANALYSIS",
                          "DEVELOPER",
                          "EXPERIMENTALFEATUREPRIVILEGE",
                          "JOBSCHEDULING",
                          "SYNCMANAGEMENT",
                          "SHAREWITHALL",
                          "DATAMANAGEMENT",
                          "USERDATAUPLOADING",
                          "BYPASSRLS",
                          "DATADOWNLOADING"
                        ],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678026327422,
                        "modification_time_in_millis": 1678026327422,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "a92a1574-7dd5-4af0-a560-3e753113bcb4",
                        "name": "Analyst",
                        "description": "Role providing privileges suitable for a Analyst",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [
                          "BYPASSRLS",
                          "A3ANALYSIS",
                          "JOBSCHEDULING",
                          "SYNCMANAGEMENT",
                          "DATADOWNLOADING",
                          "DATAMANAGEMENT",
                          "USERDATAUPLOADING"
                        ],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678026709288,
                        "modification_time_in_millis": 1678075632279,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "671ce147-b634-4c71-ba6c-aeafed72da79",
                        "name": "Business User",
                        "description": "Role providing privileges suitable for a Business User",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [
                          "A3ANALYSIS",
                          "JOBSCHEDULING",
                          "DATADOWNLOADING"
                        ],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678026512767,
                        "modification_time_in_millis": 1678075678741,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "c6e88262-5b57-4ad9-b3f9-06aff06e2ecf",
                        "name": "Data Manager",
                        "description": "Role providing privileges suitable for a Data Manager",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [
                          "A3ANALYSIS",
                          "JOBSCHEDULING",
                          "DATAMANAGEMENT",
                          "DATADOWNLOADING"
                        ],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678026441055,
                        "modification_time_in_millis": 1678075667583,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "472f3e9c-789a-4eda-8eb7-e864618633a6",
                        "name": "Developer",
                        "description": "Role providing privileges suitable for a Developer",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [
                          "A3ANALYSIS",
                          "DEVELOPER",
                          "JOBSCHEDULING",
                          "DATADOWNLOADING"
                        ],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678026552991,
                        "modification_time_in_millis": 1678075649377,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "7513621a-5650-4919-b304-61879936cad1",
                        "name": "name6vsvsd",
                        "description": "",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1684926167381,
                        "modification_time_in_millis": 1684926167381,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "2e3ab92a-d0a6-4d6e-85b5-e6fe44fb8bfa",
                        "name": "Super Admin",
                        "description": "Role with Super Admin privilege",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": [
                          {
                            "id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                            "name": "Administrator"
                          }
                        ],
                        "privileges": [
                          "ADMINISTRATION"
                        ],
                        "permission": "READ_ONLY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678023914321,
                        "modification_time_in_millis": 1678023914321,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      },
                      {
                        "id": "b6d08adb-632b-4f19-a596-cd6a90cfe0c0",
                        "name": "Viewer",
                        "description": "Role providing read-only privileges",
                        "groups_assigned_count": null,
                        "orgs": null,
                        "groups": null,
                        "privileges": [
                          "DISABLE_PINBOARD_CREATION"
                        ],
                        "permission": "MODIFY",
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "creation_time_in_millis": 1678026739827,
                        "modification_time_in_millis": 1678075504313,
                        "deleted": false,
                        "deprecated": false,
                        "external": false,
                        "hidden": false,
                        "shared_via_connection": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/login": {
      "post": {
        "operationId": "login",
        "description": "Creates a login session for a ThoughtSpot user with basic authentication. In the basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes.\n\nA successful login returns a session cookie that can be used in your subsequent API calls.\n\nundefined",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifier": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "type": "string",
                    "deprecated": false
                  },
                  "remember_me": {
                    "description": "A flag to remember the user session. When set to true, sets a session cookie that persists in subsequent API calls.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User login successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/object": {
      "post": {
        "operationId": "getObjectAccessToken",
        "description": "Gets authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot is valid for 5 mins.\n\nYou can generate the token for a user by providing `username` and `password` (Basic authentication), or by using the clusterâ€™s secret key (Trusted authentication). To generate a `secret_key` on your cluster, administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth).\n\nWhen both `password` and `secret_key` are included in the API request, `password` takes precedence.\n\n#### Just-in-time provisioning\n\nFor just-in-time user creation and provisioning, use the following attributes.\n\n- `auto_create`\n- `username`\n\nTo assign privileges to the new user, specify the group name or GUID in `group_identifiers`.\n\nTo add the user to an Org, send the `Org ID` in the API request.\n\n**Note**: This feature is only available for clusters with trusted authentication enabled.\n\nTo provision a new user, you need `ADMINISTRATION` (Can administer ThoughtSpot) privilege.\n\nundefined",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "object_id": {
                    "description": "GUID of the ThoughtSpot object. If set, the bearer will only have access to the specified Liveboard or another object.",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "org_id": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Indicates email id of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Indicates display name of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "auto_create": {
                    "description": "â€œCreates a new user if the specified username does not already exist in ThoughtSpot. Use this parameter to provision a user just-in-time (JIT) \n\n\nNote: This is only available for clusters with trusted authentication enabled. ",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the User Groups to which newly created user to be added. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "username",
                  "object_id"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bearer auth token creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/token/full": {
      "post": {
        "operationId": "getFullAccessToken",
        "description": "Gets authentication token that provides full access to ThoughtSpot application. By default, the token obtained remains valid for 5 mins.\n\nYou can generate the token for a user by providing `username` and `password` (Basic authentication), or by using the clusterâ€™s secret key (Trusted authentication). To generate a `secret_key` on your cluster, administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth).\n\nWhen both `password` and `secret_key` are included in the API request, `password` takes precedence.\n\n#### Just-in-time provisioning\n\nFor just-in-time user creation and provisioning, use the following attributes.\n\n- `auto_create`\n- `username`\n\nTo assign privileges to the new user, specify the group name or GUID in `group_identifiers`.\n\nTo add the user to an Org, specify the Org ID in the `org_id` attribute.\n\n**Note**: This feature is only available for clusters with trusted authentication enabled.\n\nTo provision a new user, you need `ADMINISTRATION` (Can administer ThoughtSpot) privilege.\n\nundefined",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "org_id": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Indicates email id of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Indicates display name of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "auto_create": {
                    "description": "   Creates a new user if the specified username does not already exist in ThoughtSpot. Use this parameter to provision a user just-in-time (JIT). \n\nNote: This is only available for clusters with trusted authentication enabled.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "ID or name of the groups to which the newly created user belongs. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bearer auth token creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/session/logout": {
      "post": {
        "operationId": "logout",
        "description": "Logs a user out of their current session.\n\nundefined",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "User logout successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/revoke": {
      "post": {
        "operationId": "revokeToken",
        "description": "Revokes the authentication token issued for current user session.\n\nThe token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint.\nthe users will not be able to access ThoughtSpot objects until a new token is obtained.\n\nTo start the session, request for a new token from ThoughtSpot. See [Get Object Access Token](/http/api-endpoints/authentication/get-object-access-token)\nand [Get Full Access Token](http/api-endpoints/authentication/get-full-access-token).\n\nundefined",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "type": "string",
                    "deprecated": false
                  },
                  "token": {
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Token successfully revoked."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/create": {
      "post": {
        "operationId": "createUser",
        "description": "Creates a user in ThoughtSpot. The API endpoint also allows you to add user properties such as email address, account status, share notification preferences, and sharing visibility. You can also assign the user to groups and Orgs, and set favorite objects.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "Password for the user account.",
                    "type": "string",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "default": "LOCAL_USER",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "default": "ACTIVE",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Org IDs to which the user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups to which the newly created user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot\nuser shares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user.\nThoughtSpot displays this Liveboard on the Home page when the user logs in.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "password",
                  "email"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "547881ff-4d04-4a84-b549-148726b8367e",
                      "name": "abcd",
                      "display_name": "abcd_abcd",
                      "visibility": "SHARABLE",
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "can_change_password": true,
                      "complete_detail": true,
                      "creation_time_in_millis": 1684935701261,
                      "current_org": {
                        "id": 0,
                        "name": "Primary"
                      },
                      "deleted": false,
                      "deprecated": false,
                      "account_type": "LOCAL_USER",
                      "account_status": "ACTIVE",
                      "email": "abcd@thoughtspot.com",
                      "expiration_time_in_millis": 1684936001,
                      "external": false,
                      "favorite_metadata": [],
                      "first_login_time_in_millis": 0,
                      "group_mask": 4,
                      "hidden": false,
                      "home_liveboard": null,
                      "incomplete_details": [],
                      "is_first_login": false,
                      "modification_time_in_millis": 1684935701261,
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "notify_on_share": true,
                      "onboarding_experience_completed": false,
                      "orgs": [
                        {
                          "id": 0,
                          "name": "Primary"
                        }
                      ],
                      "owner_id": "547881ff-4d04-4a84-b549-148726b8367e",
                      "parent_type": "USER",
                      "privileges": [
                        "AUTHORING"
                      ],
                      "show_onboarding_experience": true,
                      "super_user": false,
                      "system_user": false,
                      "tags": [],
                      "tenant_id": "982d6da9-9cd1-479e-b9a6-35aa05f9282a",
                      "user_groups": [],
                      "user_inherited_groups": [],
                      "welcome_email_sent": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/update": {
      "post": {
        "operationId": "updateUser",
        "description": "Updates properties of a user object. You can modify username, reset password, assign groups or remove the user from a group, and modify user preferences.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding and allows turning off the onboarding walkthrough.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user. ThoughtSpot displays\nthis Liveboard on the Home page when the user logs in.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "IDs of the Orgs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/delete": {
      "post": {
        "operationId": "deleteUser",
        "description": "Deletes a user from the ThoughtSpot system.\n\nIf you want to remove a user from a specific Org, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/import": {
      "post": {
        "operationId": "importUsers",
        "description": "Imports user data from external databases to ThoughtSpot.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "List of users needs to be imported.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ImportUser"
                    },
                    "deprecated": false
                  },
                  "default_password": {
                    "description": "The default password to assign to users if they do not have a password assigned in ThoughtSpot.",
                    "type": "string",
                    "deprecated": false
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose data will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "delete_unspecified_users": {
                    "description": "If set to true, removes the users that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import users operation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "users_added": [
                        {
                          "id": null,
                          "name": "testing"
                        }
                      ],
                      "users_updated": [],
                      "users_deleted": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/change-password": {
      "post": {
        "operationId": "changeUserPassword",
        "description": "Updates the current password of a ThoughtSpot user.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "description": "Current password of the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "current_password",
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User password change operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/reset-password": {
      "post": {
        "operationId": "resetUserPassword",
        "description": "Resets the password of a user account. Administrators can reset password on behalf of a user.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User password reset operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/force-logout": {
      "post": {
        "operationId": "forceLogoutUsers",
        "description": "Forces logout on user sessions. Note the following points. This API operation makes a user session invalid and forces the user to re-login.\n\n- Use this API with caution as it may invalidate active user sessions and force users to re-login.\n\n- Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifiers": {
                    "description": "GUID or name of the users for force logging out their sessions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Force logging out of users operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-update": {
      "post": {
        "operationId": "updateSystemConfig",
        "description": "Update cluster configuration",
        "tags": [
          "System"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configuration": {
                    "description": "Configuration JSON with the key-value pair of configuration attributes to be updated.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "configuration"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Configuration successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/create": {
      "post": {
        "operationId": "createOrg",
        "description": "Creates an Org. Requires cluster administration privileges.",
        "tags": [
          "Orgs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": 1980035173,
                      "name": "test_org",
                      "status": "ACTIVE",
                      "description": "test_org",
                      "visibility": "SHOW"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/update": {
      "post": {
        "operationId": "updateOrg",
        "description": "Updates an Org. Requires cluster administration privileges.",
        "tags": [
          "Orgs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "Add Users to an Org.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is ADD",
                    "default": "ADD",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/delete": {
      "post": {
        "operationId": "deleteOrg",
        "description": "Deletes an Org. Requires cluster administration privileges.",
        "tags": [
          "Orgs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/create": {
      "post": {
        "operationId": "createTag",
        "description": "Creates a Tag. Requires administrator privileges.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tag successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "name": "test5",
                      "id": "6abf5aec-3485-4f83-b25f-8c55b92e2b20",
                      "color": "#342323",
                      "deleted": false,
                      "hidden": false,
                      "external": false,
                      "deprecated": false,
                      "creation_time_in_millis": 1685441468684,
                      "modification_time_in_millis": 1685441468684,
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "owner_id": "6abf5aec-3485-4f83-b25f-8c55b92e2b20"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/update": {
      "post": {
        "operationId": "updateTag",
        "description": "Updates a Tag. Requires administrator privileges.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name or Id of the tag.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/delete": {
      "post": {
        "operationId": "deleteTag",
        "description": "Deletes a tag. Requires administrator privileges.",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag identifier Tag name or Tag id.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/assign": {
      "post": {
        "operationId": "assignTag",
        "description": "Assigns a tag to a metadata object.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tags successfully assigned."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/unassign": {
      "post": {
        "operationId": "unassignTag",
        "description": "Unassign a tag to a metadata object.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tags successfully unassigned."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/create": {
      "post": {
        "operationId": "createUserGroup",
        "description": "Create a group. Requires administrator privilege.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group. The group name must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Unique display name for the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of Liveboards to assign as default liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Group type.",
                    "default": "LOCAL_GROUP",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User group successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "complete_detail": true,
                      "content": null,
                      "creation_time_in_millis": 1685442131707,
                      "default_liveboards": [],
                      "deleted": false,
                      "deprecated": false,
                      "description": "",
                      "display_name": "test2_test2",
                      "external": false,
                      "generation_number": 0,
                      "hidden": false,
                      "id": "edc03911-a575-4e3e-bb3b-b0a0206981de",
                      "index": 2,
                      "index_version": 0,
                      "metadata_version": -1,
                      "modification_time_in_millis": 1685442131707,
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "name": "test2",
                      "orgs": [
                        {
                          "id": "0",
                          "name": "Primary"
                        }
                      ],
                      "owner_id": "edc03911-a575-4e3e-bb3b-b0a0206981de",
                      "parent_type": "GROUP",
                      "privileges": [],
                      "sub_groups": [],
                      "system_group": false,
                      "tags": [],
                      "type": "LOCAL_GROUP",
                      "users": [],
                      "visibility": "SHARABLE",
                      "roles": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/update": {
      "post": {
        "operationId": "updateUserGroup",
        "description": "Update group properties.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group to modify.",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of Liveboards to assign as default liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description for the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Display name of the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Type of the user group.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and\ngroups, set the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User group successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/delete": {
      "post": {
        "operationId": "deleteUserGroup",
        "description": "Deletes a group.",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User group successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/import": {
      "post": {
        "operationId": "importUserGroups",
        "description": "Imports user data from external databases into ThoughtSpot. During the user import operation:\n\n- If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. The default_password definition in the API request is optional.\n- If the `delete_unspecified_users` property is set to `true`, users not specified in the API request, excluding `tsadmin`, `guest`, `system` and `su` users, are deleted.\n- If the specified user objects are already available in ThoughtSpot, the object properties of these users are modified and synchronized as per the input data in the API request.\n\nA successful API call returns the object that represents the changes made in the ThoughtSpot system.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\nundefined",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "description": "Details of user groups which are to be imported",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupsImportListInput"
                    },
                    "deprecated": false
                  },
                  "delete_unspecified_groups": {
                    "description": "If set to true, removes groups that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose\ndata will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import user groups operation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUserGroupsResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "groups_added": [],
                      "groups_deleted": [],
                      "groups_updated": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/import": {
      "post": {
        "operationId": "importMetadata",
        "description": "Imports TML representation of metadata objects. Requires data management privileges.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_tmls": {
                    "description": "Details of TML objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "import_policy": {
                    "description": "Specifies the import policy for the TML import.",
                    "default": "PARTIAL",
                    "type": "string",
                    "enum": [
                      "PARTIAL",
                      "ALL_OR_NONE",
                      "VALIDATE_ONLY"
                    ],
                    "deprecated": false
                  },
                  "create_new": {
                    "description": "If selected, creates TML objects with new GUIDs.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_tmls"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import metadata objects using specified TMLs is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "response": {
                          "status": {
                            "error_message": "Invalid YAML/JSON syntax in file.",
                            "status_code": "ERROR"
                          }
                        }
                      },
                      {
                        "response": {
                          "status": {
                            "error_message": "Invalid YAML/JSON syntax in file.",
                            "status_code": "ERROR"
                          }
                        }
                      },
                      {
                        "response": {
                          "status": {
                            "error_message": "Invalid YAML/JSON syntax in file.",
                            "status_code": "ERROR"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/export": {
      "post": {
        "operationId": "exportMetadata",
        "description": "Exports TML representation of metadata objects",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExportMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "export_associated": {
                    "description": "Indicates whether to export associated metadata objects of specified metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "export_fqn": {
                    "description": "Adds FQNs of the referenced objects. For example, if you are exporting a Liveboard and its associated objects,\nthe API returns the Liveboard TML data with the FQNs of the referenced worksheet.\nIf the exported TML data includes FQNs, you don't need to manually add FQNs of the referenced objects during TML import.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "edoc_format": {
                    "description": "TML EDOC content format.",
                    "default": "YAML",
                    "type": "string",
                    "enum": [
                      "JSON",
                      "YAML"
                    ],
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export TMLs of specified metadata objects is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "edoc": "guid: 0fb54198-868d-45de-8929-139b0089e964\nanswer:\n  name: Parameters Answer\n  tables:\n  - id: Parameters WS\n    name: Parameters WS\n  formulas:\n  - id: Adjusted Tax\n    name: Adjusted Tax\n    expr: \"[Tax] - [Discount] * [Double List Param]\"\n    was_auto_generated: false\n  - id: Parameterized Commit Date Filter\n    name: Parameterized Commit Date Filter\n    expr: \"[Commit Date] = [Date Param]\"\n    was_auto_generated: false\n  search_query: \"[Tax] [Ship Mode] [Adjusted Tax] [Parameterized Commit Date Filter] = true\"\n  answer_columns:\n  - name: Total Tax\n  - name: Ship Mode\n  - name: Total Adjusted Tax\n  table:\n    table_columns:\n    - column_id: Ship Mode\n      headline_aggregation: COUNT_DISTINCT\n    - column_id: Total Tax\n      headline_aggregation: SUM\n    - column_id: Total Adjusted Tax\n      headline_aggregation: TABLE_AGGR\n    ordered_column_ids:\n    - Ship Mode\n    - Total Tax\n    - Total Adjusted Tax\n    client_state: \"\"\n    client_state_v2: \"{\\\"tableVizPropVersion\\\": \\\"V1\\\"}\"\n  chart:\n    type: COLUMN\n    chart_columns:\n    - column_id: Ship Mode\n    - column_id: Total Tax\n    - column_id: Total Adjusted Tax\n    axis_configs:\n    - x:\n      - Ship Mode\n      \"y\":\n      - Total Tax\n      - Total Adjusted Tax\n    client_state: \"\"\n    client_state_v2: \"{\\\"version\\\": \\\"V4DOT2\\\",\\\"chartProperties\\\": {\\\"responsiveLayoutPreference\\\": \\\"AUTO_ON\\\",\\\"chartSpecific\\\": {}},\\\"axisProperties\\\": [{\\\"id\\\": \\\"e44c68e2-8a83-494e-b833-6818607dbbba\\\",\\\"properties\\\": {\\\"axisType\\\": \\\"Y\\\",\\\"linkedColumns\\\": [\\\"Total Tax\\\"],\\\"isOpposite\\\": false}},{\\\"id\\\": \\\"eadebb50-9412-4e16-91ad-c02a7b415d49\\\",\\\"properties\\\": {\\\"axisType\\\": \\\"Y\\\",\\\"linkedColumns\\\": [\\\"Total Adjusted Tax\\\"],\\\"isOpposite\\\": true}},{\\\"id\\\": \\\"22fcac66-95d3-47c1-bd32-321adec41a49\\\",\\\"properties\\\": {\\\"axisType\\\": \\\"X\\\",\\\"linkedColumns\\\": [\\\"Ship Mode\\\"]}}],\\\"systemSeriesColors\\\": [{\\\"serieName\\\": \\\"Total Tax\\\",\\\"color\\\": \\\"#48D1E0\\\"},{\\\"serieName\\\": \\\"Total Adjusted Tax\\\",\\\"color\\\": \\\"#2E75F0\\\"}]}\"\n  display_mode: TABLE_MODE\n  parameter_values:\n  - key: Date Param\n    value: 10/16/1994\n",
                        "info": {
                          "filename": "Parameters Answer.answer.tml",
                          "name": "Parameters Answer",
                          "id": "0fb54198-868d-45de-8929-139b0089e964",
                          "type": "answer",
                          "status": {
                            "status_code": "OK"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/delete": {
      "post": {
        "operationId": "deleteMetadata",
        "description": "Deletes metadata objects. Requires edit access to objects.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeleteMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "delete_disabled_objects": {
                    "description": "Indicates whether to delete disabled metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Metadata objects successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/assign": {
      "post": {
        "operationId": "assignChangeAuthor",
        "description": "Assigns a new author or transfers the ownership of the specified metadata objects.",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthorMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user who you want to assign as the author.",
                    "type": "string",
                    "deprecated": false
                  },
                  "current_owner_identifier": {
                    "description": "GUID or name of the current author.  When defined, the metadata objects\nauthored by the specified owner are filtered for the API operation.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Author assignment for given metadata objects is successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/share": {
      "post": {
        "operationId": "shareMetadata",
        "description": "Share one or several metadata objects with users or groups.\nRequires edit access to metadata objects.",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_type": {
                    "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifiers": {
                    "description": "Unique ID or name of metadata objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "permissions": {
                    "description": "Permission details for sharing the objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SharePermissionsInput"
                    },
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Options to specify details of Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "emails": {
                    "description": "Email IDs to which notifications will be sent.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "message": {
                    "description": "Message to be included in notification.",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_custom_url": {
                    "description": "Sends object URLs in the customized format in email notifications.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_type",
                  "metadata_identifiers",
                  "permissions",
                  "emails",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Sharing metadata objects is successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/create": {
      "post": {
        "operationId": "createConfig",
        "description": "Configure local repository to connect to remote repository <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository_url": {
                    "description": "URL for connecting to remote repository",
                    "type": "string",
                    "deprecated": false
                  },
                  "username": {
                    "description": "Username to authenticate connection to remote repository",
                    "type": "string",
                    "deprecated": false
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to remote repository",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifier": {
                    "description": "Unique identifier of the organization. If no value is provided then user will be created in the organization associated with the login session. Provide value -1 for cluster level. Example : OrgID1-or-Name1 <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production]",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "default_branch": {
                    "description": "Name of the default remote branch <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_branch_name": {
                    "description": "Name of the default remote branch <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "guid_mapping_branch_name": {
                    "description": "Name of the branch where file containing guid mapping should be maintained <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "repository_url",
                  "username",
                  "access_token"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully configured local repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/update": {
      "post": {
        "operationId": "updateConfig",
        "description": "Update local repository configuration. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username to authenticate connection to vcs",
                    "type": "string",
                    "deprecated": false
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to vcs",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifier": {
                    "description": "Unique identifier of the organization. If no value is provided then user will be created in the organization associated with the login session. Provide value -1 for cluster level. Example : OrgID1-or-Name1 <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production] <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "default_branch": {
                    "description": "Name of the default remote branch <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_branch_name": {
                    "description": "Name of the default remote branch <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "guid_mapping_branch_name": {
                    "description": "Name of the branch where file containing guid mapping should be maintained <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully updated local repository configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/delete": {
      "post": {
        "operationId": "deleteConfig",
        "description": "Delete local repository configuration <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cluster_level": {
                    "description": "Consider cluster level or org level config. Set it to false to delete configuration from current org. If set to true, then the configuration at cluster level and orgs that inherited the configuration from cluster level will be deleted. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully deleted local repository configuration"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/{branch_name}/pull": {
      "post": {
        "operationId": "pullBranch",
        "description": "Pull a branch from remote repository to local repository. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the branch to pull",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Remote branch pulled to local successfully"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/commit": {
      "post": {
        "operationId": "commitBranch",
        "description": "Commit the object from metadata to remote repository <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    },
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "Name of the remote branch where object should be pushed",
                    "type": "string",
                    "deprecated": false
                  },
                  "comment": {
                    "description": "Comment to be added to the commit",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "comment"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully committed the metadata objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/{commit_id}/revert": {
      "post": {
        "operationId": "revertCommit",
        "description": "Revert an object to a specific commit id <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    },
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "Name of the branch where the reverted version should be comitted",
                    "type": "string",
                    "deprecated": false
                  },
                  "revert_policy": {
                    "description": "Policy to be followed while importing. Valid values: [ALL_OR_NONE, PARTIAL] <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "commit_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Commit id to which the object should be reverted",
            "deprecated": false
          }
        ],
        "responses": {
          "200": {
            "description": "Reverted the object to the commit point specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevertResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/validate": {
      "post": {
        "operationId": "validateMerge",
        "description": "Before merging changes to target branch, pick the changes from source branch and validate the files <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_branch_name": {
                    "description": "Name of the branch from which changes need to be picked for validation",
                    "type": "string",
                    "deprecated": false
                  },
                  "target_branch_name": {
                    "description": "Name of the branch where files will be merged",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "source_branch_name",
                  "target_branch_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "validation done successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/deploy": {
      "post": {
        "operationId": "deployCommit",
        "description": "Deploy changes to a Thoughtspot environment from a commit point\" <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_id": {
                    "description": "Commit_id against which the files should be picked to deploy",
                    "type": "string",
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "Name of the remote branch where changes should be picked <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "import_type": {
                    "description": "Indicates if all files or only modified file at specified commit point should be considered <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
                    "default": "DELTA",
                    "type": "string",
                    "enum": [
                      "FULL",
                      "DELTA"
                    ],
                    "deprecated": false
                  },
                  "deploy_type": {
                    "description": "Indicates if all files or only modified file at specified commit point should be considered <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "default": "DELTA",
                    "type": "string",
                    "enum": [
                      "FULL",
                      "DELTA"
                    ],
                    "deprecated": false
                  },
                  "deploy_policy": {
                    "description": "Policy to be followed while importing. Valid values: [ALL_OR_NONE, PARTIAL] <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully deployed the changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/create": {
      "post": {
        "operationId": "createConnection",
        "description": "Creates a connection to a Data WareHouse. Requires ADMINSITRATION or DATAMANAGEMENT privilege.",
        "tags": [
          "Connections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name for the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_warehouse_type": {
                    "description": "Type of the data warehouse.",
                    "type": "string",
                    "enum": [
                      "SNOWFLAKE",
                      "AMAZON_REDSHIFT",
                      "GOOGLE_BIGQUERY",
                      "AZURE_SYNAPSE",
                      "TERADATA",
                      "SAP_HANA",
                      "STARBURST",
                      "ORACLE_ADW",
                      "DATABRICKS",
                      "DENODO",
                      "DREMIO",
                      "TRINO",
                      "PRESTO"
                    ],
                    "deprecated": false
                  },
                  "data_warehouse_config": {
                    "description": "Configuration of the data warehouse in JSON.",
                    "type": "object",
                    "deprecated": false
                  },
                  "validate": {
                    "description": "Indicates whether to validate the connection details.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "data_warehouse_type",
                  "data_warehouse_config"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Connection to the datasource successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnectionResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "355226ac-452c-4e22-9af7-9f4c13891ad2",
                      "name": "Testconnection - 2",
                      "data_warehouse_type": "TERADATA",
                      "details": {
                        "name": "Testconnection - 2",
                        "type": "RDBMS_TERADATA",
                        "id": "355226ac-452c-4e22-9af7-9f4c13891ad2",
                        "scheduled": false,
                        "connectionType": "",
                        "configuration": "{\"password\":\"******\",\"role\":\"sysadmin\",\"warehouse\":\"MEDIUM_WH\",\"accountName\":\"thoughtspot_partner\",\"user\":\"tsadmin\"}",
                        "isExternal": false,
                        "isDeprecated": false,
                        "isDeleted": false,
                        "isHidden": false,
                        "complete": true,
                        "indexVersion": 0,
                        "generationNum": 0,
                        "created": "2023-05-30T03:53:55.098-07:00",
                        "modified": "2023-05-30T03:53:55.098-07:00",
                        "author": {},
                        "modifiedBy": {},
                        "owner": {
                          "id": "355226ac-452c-4e22-9af7-9f4c13891ad2",
                          "name": "Testconnection - 2"
                        },
                        "tags": [],
                        "tables": [
                          {
                            "name": "allDatatypes",
                            "type": "ONE_TO_ONE_LOGICAL",
                            "id": "7dd479ac-9663-4841-a1a8-e22e9316c531",
                            "schemaStripe": "AllDatatypes_alldatatypes_ORcjIF5",
                            "databaseStripe": "355226ac-452c-4e22-9af7-9f4c13891ad2",
                            "isExternal": true,
                            "isDeprecated": false,
                            "indexVersion": 0,
                            "generationNum": 0,
                            "created": "2023-05-30T03:53:56.957-07:00",
                            "modified": "2023-05-30T03:53:56.957-07:00",
                            "owner": {
                              "id": "7dd479ac-9663-4841-a1a8-e22e9316c531",
                              "name": "allDatatypes"
                            },
                            "tags": []
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/delete": {
      "post": {
        "operationId": "deleteConnection",
        "description": "Deletes a connection to a Data WareHouse. Requires ADMINSITRATION or DATAMANAGEMENT privilege.",
        "tags": [
          "Connections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Connection successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/update": {
      "post": {
        "operationId": "updateConnection",
        "description": "Updates a connection to a Data WareHouse. Requires ADMINSITRATION or DATAMANAGEMENT privilege.",
        "tags": [
          "Connections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "name": {
                    "description": "Updated name of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Updated description of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_warehouse_config": {
                    "description": "Configuration of the data warehouse in JSON.",
                    "type": "object",
                    "deprecated": false
                  },
                  "validate": {
                    "description": "Indicates whether to validate the connection details.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Connection successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/create": {
      "post": {
        "operationId": "createRole",
        "description": "Creates a Role.\nRequires cluster Administration or Role Administration privileges.",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name of the role.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the role.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION"
                      ]
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Role successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "af965fc1-cd5f-4224-b32f-c9c20f853339",
                      "name": "testimg",
                      "description": "",
                      "groups_assigned_count": null,
                      "orgs": null,
                      "groups": null,
                      "privileges": [],
                      "permission": "MODIFY",
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "creation_time_in_millis": 1684932436982,
                      "modification_time_in_millis": 1684932436982,
                      "deleted": false,
                      "deprecated": false,
                      "external": false,
                      "hidden": false,
                      "shared_via_connection": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/update": {
      "post": {
        "operationId": "updateRole",
        "description": "Updates a Role.\nRequires cluster Administration or Role Administration privileges.",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Role.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Role",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION"
                      ]
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role.",
            "deprecated": false
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "6674486b-a8b8-46ae-9ea4-0f4703ff5775",
                      "name": "testing-test",
                      "description": "",
                      "groups_assigned_count": null,
                      "orgs": [
                        {
                          "id": "0",
                          "name": "Primary"
                        }
                      ],
                      "groups": null,
                      "privileges": [],
                      "permission": "MODIFY",
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "creation_time_in_millis": 1685443863899,
                      "modification_time_in_millis": 1685443863899,
                      "deleted": false,
                      "deprecated": false,
                      "external": false,
                      "hidden": false,
                      "shared_via_connection": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/delete": {
      "post": {
        "operationId": "deleteRole",
        "description": "Deletes a Role.\nRequires cluster Administration or Role Administration privileges.",
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules": {
      "post": {
        "operationId": "createSchedule",
        "description": "Create schedule.",
        "tags": [
          "Schedules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "PDF",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ],
                    "deprecated": false
                  },
                  "liveboard_options": {
                    "description": "Options to specify details of liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput",
                    "deprecated": false
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "default": "America/Los_Angeles",
                    "type": "string",
                    "deprecated": false
                  },
                  "frequency": {
                    "description": "Configuration of schedule with cron expression",
                    "$ref": "#/components/schemas/FrequencyInput",
                    "deprecated": false
                  },
                  "recipient_details": {
                    "description": "Recipient configuration which includes emails and recipients of the schedule",
                    "$ref": "#/components/schemas/RecipientDetailsInput",
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "description",
                  "metadata_type",
                  "metadata_identifier",
                  "time_zone",
                  "recipient_details"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Schedule successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchedule"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "author": {
                        "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "name": "tsadmin"
                      },
                      "creation_time_in_millis": 1684931921911,
                      "description": "testing",
                      "file_format": "PDF",
                      "frequency": {
                        "cron_expression": {
                          "day_of_month": "*",
                          "day_of_week": "1",
                          "hour": "09",
                          "minute": "00",
                          "month": "*",
                          "second": "0"
                        }
                      },
                      "id": "025c476d-5530-41db-afb9-39a5092dcf19",
                      "liveboard_options": null,
                      "metadata": {
                        "name": null,
                        "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                        "type": "LIVEBOARD"
                      },
                      "name": "testing",
                      "pdf_options": {
                        "complete_liveboard": false,
                        "include_cover_page": false,
                        "include_custom_logo": false,
                        "include_filter_page": false,
                        "include_page_number": false,
                        "page_footer_text": "",
                        "page_orientation": "LANDSCAPE",
                        "page_size": "A4",
                        "truncate_table": false
                      },
                      "recipient_details": null,
                      "status": "DEFAULT",
                      "time_zone": "America/Los_Angeles"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/delete": {
      "post": {
        "operationId": "deleteSchedule",
        "description": "Deletes a schedule",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the schedule.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/search": {
      "post": {
        "operationId": "searchSchedules",
        "description": "Search Schedules",
        "tags": [
          "Schedules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects associated with schedules.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataInput"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortingOptions",
                    "deprecated": false
                  },
                  "history_runs_options": {
                    "description": "Options while fetching history runs wrt to the schedule.",
                    "$ref": "#/components/schemas/ScheduleHistoryRunsOptionsInput",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Schedule search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseSchedule"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684939398,
                        "description": "testing1",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "43f8aae9-2efa-48e3-af7a-5bc368aeb304",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing1",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684939452,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "75785a28-1111-4820-a4f2-36c2e0e535e8",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684985744,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "0df667c2-df17-40f3-9bbe-13499e9e2442",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684986054,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "9cb66ebf-8983-4145-8cb5-eaf007f2e96c",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684986264,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "e7e8f94b-e70d-4bf5-9eec-65ac1c1db950",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684989423,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "4a365f3a-100e-47ea-925e-7d20581398af",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1684994397,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "4a8a23dc-f413-4ea5-ad59-77a8ae792b09",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1685347334,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "80b4f331-3234-4380-baa6-9c7c1dda6ce9",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1685347351,
                        "description": "testing",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "92c59709-40b3-46fb-a87c-d34efe8a0d85",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      },
                      {
                        "author": {
                          "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                          "name": "tsadmin"
                        },
                        "creation_time_in_millis": 1685347438,
                        "description": "testing2",
                        "file_format": "PDF",
                        "frequency": {
                          "cron_expression": {
                            "day_of_month": "*",
                            "day_of_week": "1",
                            "hour": "09",
                            "minute": "00",
                            "month": "*",
                            "second": "0"
                          }
                        },
                        "id": "51906b79-fd35-4d25-b228-73c901571838",
                        "liveboard_options": null,
                        "metadata": {
                          "name": null,
                          "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "type": "LIVEBOARD"
                        },
                        "name": "testing2",
                        "pdf_options": {
                          "complete_liveboard": false,
                          "include_cover_page": false,
                          "include_custom_logo": false,
                          "include_filter_page": false,
                          "include_page_number": false,
                          "page_footer_text": "",
                          "page_orientation": "LANDSCAPE",
                          "page_size": "A4",
                          "truncate_table": false
                        },
                        "recipient_details": null,
                        "status": "SCHEDULED",
                        "time_zone": "America/Los_Angeles"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/update": {
      "post": {
        "operationId": "updateSchedule",
        "description": "Update schedule.",
        "tags": [
          "Schedules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ],
                    "deprecated": false
                  },
                  "liveboard_options": {
                    "description": "Options to specify details of liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput",
                    "deprecated": false
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "type": "string",
                    "deprecated": false
                  },
                  "frequency": {
                    "description": "Configuration of schedule with cron expression",
                    "$ref": "#/components/schemas/FrequencyInput",
                    "deprecated": false
                  },
                  "recipient_details": {
                    "description": "Recipient configuration which includes emails and recipients of the schedule",
                    "$ref": "#/components/schemas/RecipientDetailsInput",
                    "deprecated": false
                  },
                  "status": {
                    "description": "Status of the schedule",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "PAUSE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the schedule.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "visibility"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE makes a users visible to other users and user groups, and thus allows them to share objects."
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the user."
          },
          "can_change_password": {
            "type": "boolean",
            "description": "Indicates whether the user can change their password."
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the user."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user in milliseconds."
          },
          "current_org": {
            "$ref": "#/components/schemas/Org",
            "description": "Current logged in Organizations of the user."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user is deprecated."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Expiration time of the user in milliseconds."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user is external."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataItem"
            },
            "description": "Metadata objects to be assigned as favorites for the imported user."
          },
          "first_login_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "First login time of the user in milliseconds."
          },
          "group_mask": {
            "type": "integer",
            "format": "int32",
            "description": "Group mask of the user."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user is hidden."
          },
          "home_liveboard": {
            "$ref": "#/components/schemas/Object_ID_And_Name",
            "description": "Unique ID or name of the users home liveboard."
          },
          "incomplete_details": {
            "type": "object",
            "description": "Incomplete details of user if any present."
          },
          "is_first_login": {
            "type": "boolean",
            "description": "Indicates whether it is first login of the user."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared answers or liveboard."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Org"
            },
            "description": "Organizations in which user exists."
          },
          "owner_id": {
            "type": "string",
            "description": "Unique identifier of owner of the user."
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the user."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "The user preference for revisiting the onboarding experience."
          },
          "super_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a super user."
          },
          "system_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a system user."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Tags associated with the user."
          },
          "tenant_id": {
            "type": "string",
            "description": "Unique identifier of tenant of the user."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "User Groups which the user is part of."
          },
          "user_inherited_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Inherited User Groups which the user is part of."
          },
          "welcome_email_sent": {
            "type": "boolean",
            "description": "Indicates whether welcome email is sent for the user."
          }
        }
      },
      "FavoriteMetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "ImportUser": {
        "type": "object",
        "required": [
          "user_identifier",
          "display_name"
        ],
        "properties": {
          "user_identifier": {
            "type": "string",
            "description": "Unique ID or name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Unique display name of the user."
          },
          "password": {
            "type": "string",
            "description": "Password of the user."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "org_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the Orgs for the users."
          },
          "group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the User Groups of the users."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE makes a users visible to other users and user groups,\nand thus allows them to share objects."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared answers or liveboard."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "The user preference for revisiting the onboarding experience."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "home_liveboard_identifier": {
            "type": "string",
            "description": "Unique ID or name of the users home liveboard."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataInput"
            },
            "description": "Metadata objects to be assigned as favorites for the imported user."
          }
        }
      },
      "ImportUsersResponse": {
        "type": "object",
        "properties": {
          "users_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          }
        }
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VisualizationIdentifiersInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the visualization."
          }
        }
      },
      "MetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType associated in the Product"
      },
      "ExportMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Export MetadataType API's"
      },
      "DeleteMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Delete MetadataType API's"
      },
      "PrincipalsInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP"
            ],
            "description": "Principal type."
          }
        }
      },
      "AuthorMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Author API's"
      },
      "PermissionsMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Permission API's"
      },
      "SharePermissionsInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or user groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        }
      },
      "SearchDataResponse": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects."
          }
        },
        "description": "Response format associated with the search data API."
      },
      "AnswerDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects."
          }
        },
        "description": "Response format associated with fetch data api"
      },
      "LiveboardDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveboardContent"
            },
            "description": "Data content of metadata objects."
          }
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Current logged in Organizations of the user."
      },
      "GenericInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RiseSetter": {
        "type": "object",
        "required": [
          "field",
          "path"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "GetTokenResponse": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the cluster."
          },
          "release_version": {
            "type": "string",
            "description": "The release version of the cluster."
          },
          "time_zone": {
            "type": "string",
            "description": "The timezone of the cluster."
          },
          "locale": {
            "type": "string",
            "description": "The default locale of the cluster."
          },
          "date_format": {
            "type": "string",
            "description": "The default date format representation of the cluster."
          },
          "api_version": {
            "type": "string",
            "description": "The API version of the cluster."
          },
          "type": {
            "type": "string",
            "description": "The deployment type of the cluster."
          },
          "environment": {
            "type": "string",
            "description": "The deployed environment of the cluster."
          },
          "license": {
            "type": "string",
            "description": "The license applied to the cluster."
          },
          "date_time_format": {
            "type": "string",
            "description": "The default date time format representation of the cluster."
          },
          "time_format": {
            "type": "string",
            "description": "The default time format representation of the cluster."
          },
          "system_user_id": {
            "type": "string",
            "description": "The unique identifier of system user."
          },
          "super_user_id": {
            "type": "string",
            "description": "The unique identifier of super user."
          },
          "hidden_object_id": {
            "type": "string",
            "description": "The unique identifier of hidden object."
          },
          "system_group_id": {
            "type": "string",
            "description": "The unique identifier of system group."
          },
          "tsadmin_user_id": {
            "type": "string",
            "description": "The unique identifier of tsadmin user."
          },
          "admin_group_id": {
            "type": "string",
            "description": "The unique identifier of admin group."
          },
          "all_tables_connection_id": {
            "type": "string",
            "description": "The unique identifier of all tables connection."
          },
          "all_user_group_id": {
            "type": "string",
            "description": "The unique identifier of ALL user group."
          },
          "accept_language": {
            "type": "string",
            "description": "The supported accept language by the cluster."
          },
          "all_user_group_member_user_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of users of ALL user group."
          },
          "logical_model_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version number of logical model of the cluster."
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "onboarding_content_url": {
            "type": "string"
          }
        }
      },
      "OrgResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the organization."
          },
          "name": {
            "type": "string",
            "description": "Name of the organization."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "IN_ACTIVE"
            ],
            "description": "Status of the organization."
          },
          "description": {
            "type": "string",
            "description": "Description of the organization."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHOW",
              "HIDDEN"
            ],
            "description": "Visibility of the organization."
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "author_id": {
            "type": "string"
          },
          "modifier_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        }
      },
      "UserGroupResponse": {
        "type": "object",
        "required": [
          "display_name",
          "id",
          "name",
          "visibility"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the user group."
          },
          "content": {
            "type": "object",
            "description": "Content details of the user group."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user group in milliseconds."
          },
          "default_liveboards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Liveboards which are assigned as default liveboards to the user group."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user group is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user group is deprecated."
          },
          "description": {
            "type": "string",
            "description": "Description of the user group."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user group."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user group is external."
          },
          "generation_number": {
            "type": "integer",
            "format": "int32",
            "description": "Generation number of the user group."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user group is hidden."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index number of the user group."
          },
          "index_version": {
            "type": "integer",
            "format": "int32",
            "description": "Index version number of the user group."
          },
          "metadata_version": {
            "type": "integer",
            "format": "int32",
            "description": "Metadata version number of the user group."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user group in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the user group."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Orgs in which user group exists."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the user group."
          },
          "sub_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "User Groups who are part of the user group."
          },
          "system_group": {
            "type": "boolean",
            "description": "Indicates whether the user group is a system group."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Tags associated with the user group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the user group."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Users who are part of the user group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "List of roles assgined to the user"
          }
        }
      },
      "MetadataSearchResponse": {
        "type": "object",
        "required": [
          "metadata_type"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "dependent_objects": {
            "type": "object",
            "description": "Details of dependent objects of the metadata objects."
          },
          "incomplete_objects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Details of incomplete information of the metadata objects if any."
          },
          "metadata_detail": {
            "type": "object",
            "description": "Complete details of the metadata objects."
          },
          "metadata_header": {
            "type": "object",
            "description": "Header information of the metadata objects."
          },
          "visualization_headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Visualization header information of the metadata objects."
          },
          "stats": {
            "type": "object",
            "description": "Stats of the metadata object. Includes views, favorites, last_accessed."
          }
        },
        "description": "Metadata Search Response Object."
      },
      "MetadataListItemInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the metadata object. User % for a wildcard match."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view.\n5. CONNECTION for creating or modify data connections.\n6. TAG for tag objects.\n7. USER for user objects.\n8. USER_GROUP for user group objects.\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values"
          }
        }
      },
      "PermissionInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or user groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        },
        "description": "Details of users or user groups."
      },
      "ExcludeMetadataListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view.\n5. CONNECTION for creating or modify data connections.\n6. TAG for tag objects.\n7. USER for user objects.\n8. USER_GROUP for user group objects.\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values"
          }
        }
      },
      "FavoriteObjectOptionsInput": {
        "type": "object",
        "properties": {
          "include": {
            "type": "boolean",
            "description": "Includes objects marked as favorite for the specified user GUIDs."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users. If not specified then favorite of current logged in user is considered."
          }
        },
        "description": "Favorite object options."
      },
      "MetadataSearchSortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "VIEWS",
              "FAVORITES",
              "LAST_ACCESSED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "SqlQueryResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "metadata_type",
          "sql_queries"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "sql_queries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SqlQuery"
            },
            "description": "SQL query details of metadata objects."
          }
        }
      },
      "PdfOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE"
            ],
            "description": "Page orientation of the PDF."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          }
        }
      },
      "PngOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          }
        }
      },
      "LogResponse": {
        "type": "object",
        "required": [
          "date",
          "log"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "Date timestamp of the log entry"
          },
          "log": {
            "type": "string",
            "description": "Log data"
          }
        }
      },
      "RepoConfigObject": {
        "type": "object",
        "properties": {
          "repository_url": {
            "type": "string",
            "description": "Remote repository URL configured"
          },
          "username": {
            "type": "string",
            "description": "Username to authenticate connection to vcs"
          },
          "default_branch": {
            "type": "string",
            "description": "Name of the default remote branch"
          },
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Branches that have been pulled in local repository"
          },
          "remote_alias": {
            "type": "string",
            "description": "Alias name associated with the remote repository"
          },
          "enable_guid_mapping": {
            "type": "boolean",
            "description": "Maintain mapping of guid for the deployment to an instance"
          },
          "guid_mapping_branch_name": {
            "type": "string",
            "description": "Name of the branch where file containing guid mapping should be maintained"
          },
          "org": {
            "$ref": "#/components/schemas/Org",
            "description": "Details of the organization"
          }
        }
      },
      "CommitHistoryResponse": {
        "type": "object",
        "required": [
          "committer",
          "author",
          "comment",
          "commit_time",
          "commit_id",
          "branch"
        ],
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          }
        }
      },
      "SearchConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the connection."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "description": {
            "type": "string",
            "description": "Description of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO"
            ],
            "description": "Type of data warehouse."
          },
          "data_warehouse_objects": {
            "$ref": "#/components/schemas/DataWarehouseObjects",
            "description": "List of Data warehouse objects"
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "ConnectionInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the connection."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the connection object. User % for a wildcard match."
          },
          "data_warehouse_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataWarehouseObjectInput"
            },
            "description": "Filter options for databases, schemas, tables and columns."
          }
        }
      },
      "SortOptionInput": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "LAST_ACCESSED",
              "SYNCED",
              "VIEWS",
              "USER_STATE",
              "ROW_COUNT"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        }
      },
      "SearchRoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Organizations in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        },
        "description": "Response for search role api should handle hidden privileges as well."
      },
      "Token": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "scope",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Token access scope details"
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "TagMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN"
            ],
            "description": "Type of metadata (Optional when given identifier is ID).\n1. LIVEBOARD\n2. ANSWERS\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as tables, worksheets or views."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        }
      },
      "ImportUserGroupsResponse": {
        "type": "object",
        "required": [
          "groups_added",
          "groups_deleted",
          "groups_updated"
        ],
        "properties": {
          "groups_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are added into the system."
          },
          "groups_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are deleted from the system."
          },
          "groups_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are updated in the system."
          }
        }
      },
      "GroupsImportListInput": {
        "type": "object",
        "required": [
          "display_name",
          "group_identifier"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Unique display name of the user group."
          },
          "group_identifier": {
            "type": "string",
            "description": "Unique ID or name of the User Group."
          },
          "default_liveboard_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID of liveboards which will be assigned as default liveboards to the user group."
          },
          "description": {
            "type": "string",
            "description": "Description of the user group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DEVELOPER",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "CAN_CREATE_CATALOG",
                "DISABLE_PINBOARD_CREATION",
                "ENABLESPOTAPPCREATION",
                "LIVEBOARD_VERIFIER",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges which will be assigned to the user group."
          },
          "sub_group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the User Groups who will be part of the user group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the user group."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the Users who will be part of the user group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects."
          }
        }
      },
      "CommitResponse": {
        "type": "object",
        "required": [
          "committer",
          "author",
          "comment"
        ],
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          }
        }
      },
      "MetadataObject": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "RevertResponse": {
        "type": "object",
        "required": [
          "committer",
          "author",
          "comment"
        ],
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          },
          "reverted_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevertedMetadata"
            },
            "description": "Metadata of reverted file of this commit"
          }
        }
      },
      "DeployResponse": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "CreateConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the connection created."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO"
            ],
            "description": "Type of data warehouse."
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Organizations in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        }
      },
      "ResponseSchedule": {
        "type": "object",
        "required": [
          "author",
          "creation_time_in_millis",
          "file_format",
          "frequency",
          "id",
          "metadata",
          "name",
          "time_zone"
        ],
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author",
            "description": "Author of the schedule."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Schedule creation time in milliseconds."
          },
          "description": {
            "type": "string",
            "description": "Description of the job."
          },
          "file_format": {
            "type": "string",
            "description": "Export file format."
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency",
            "description": "Configuration of schedule with cron expression"
          },
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "liveboard_options": {
            "$ref": "#/components/schemas/LiveboardOptions",
            "description": "Options to specify details of liveboard."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataResponse",
            "description": "Unique ID or name of the metadata."
          },
          "name": {
            "type": "string",
            "description": "Name of the scheduled job."
          },
          "pdf_options": {
            "$ref": "#/components/schemas/PdfOptions",
            "description": "Options for PDF export."
          },
          "recipient_details": {
            "$ref": "#/components/schemas/RecipientDetails",
            "description": "Recipient configuration which includes emails and recipients of the schedule"
          },
          "status": {
            "type": "string",
            "description": "Status of the job"
          },
          "time_zone": {
            "type": "string",
            "description": "Time zone"
          },
          "history_runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseScheduleRun"
            },
            "description": "Schedule runs history records."
          }
        }
      },
      "LiveboardOptionsInput": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of liveboard."
      },
      "SchedulesPdfOptionsInput": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "FrequencyInput": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpressionInput",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "RecipientDetailsInput": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItemInput"
            },
            "description": "List of user or user groups to be associated for schedule."
          }
        },
        "description": "Recipient configuration which includes emails and recipients of the schedule"
      },
      "MetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "SortingOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "ScheduleHistoryRunsOptionsInput": {
        "type": "object",
        "properties": {
          "include_history_runs": {
            "type": "boolean",
            "description": "Indicates whether to fetch history runs wrt to the schedule or not."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the max number of records that can be fetched as history runs wrt any scheduled job."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the starting record number from where history runs records should be fetched."
          }
        }
      },
      "FavoriteMetadataItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the metadata."
          },
          "name": {
            "type": "string",
            "description": "name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "Object_ID_And_Name": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The object representation with ID and Name."
      },
      "ImportUserType": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          }
        }
      },
      "AnswerContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          }
        }
      },
      "LiveboardContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          },
          "visualization_id": {
            "type": "string",
            "description": "Unique ID of the visualization."
          },
          "visualization_name": {
            "type": "string",
            "description": "Name of the visualization."
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the Role"
          },
          "name": {
            "type": "string",
            "description": "name of the Role"
          }
        }
      },
      "SqlQuery": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "sql_query"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "sql_query": {
            "type": "string",
            "description": "SQL query of a metadata object."
          }
        },
        "description": "Response format associated with fetch SQL query api"
      },
      "CommiterType": {
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "AuthorType": {
        "type": "object",
        "required": [
          "email",
          "username"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "DataWarehouseObjects": {
        "type": "object",
        "required": [
          "databases"
        ],
        "properties": {
          "databases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Database"
            },
            "description": "Databases of the connection."
          }
        }
      },
      "DataWarehouseObjectInput": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string",
            "description": "Name of the database."
          },
          "schema": {
            "type": "string",
            "description": "Name of the schema within the database."
          },
          "table": {
            "type": "string",
            "description": "Name of the table within the schema."
          },
          "column": {
            "type": "string",
            "description": "Name of the column within the table."
          }
        }
      },
      "Scope": {
        "type": "object",
        "required": [
          "access_type"
        ],
        "properties": {
          "access_type": {
            "type": "string",
            "description": "Object access scope type."
          },
          "org_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the metadata."
          },
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the organization."
          }
        }
      },
      "CommitFileType": {
        "type": "object",
        "required": [
          "file_name",
          "status_code"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "RevertedMetadata": {
        "type": "object",
        "required": [
          "file_name",
          "metadata_name",
          "metadata_type",
          "status_code",
          "status_message"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "Author": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Author of the schedule."
      },
      "Frequency": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpression",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "LiveboardOptions": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of liveboard."
      },
      "MetadataResponse": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "PdfOptions": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "RecipientDetails": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItem"
            },
            "description": "List of user or user groups to be associated for schedule."
          }
        },
        "description": "Recipient configuration which includes emails and recipients of the schedule"
      },
      "ResponseScheduleRun": {
        "type": "object",
        "required": [
          "id",
          "start_time_in_millis",
          "end_time_in_millis",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "start_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run start time in milliseconds."
          },
          "end_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run end time in milliseconds."
          },
          "status": {
            "type": "string",
            "description": "Status of the schedule run."
          },
          "detail": {
            "type": "string",
            "description": "Message details related to the schedule run."
          }
        },
        "description": "Schedule run response object"
      },
      "CronExpressionInput": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "PrincipalsListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "description": "Principal type."
          }
        }
      },
      "Database": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the database."
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            },
            "description": "Schemas of the database."
          }
        }
      },
      "CronExpression": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "PrincipalsListItem": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "description": "Principal type."
          }
        }
      },
      "SchemaObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the schema."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            },
            "description": "Tables of the schema."
          }
        }
      },
      "Table": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table."
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            },
            "description": "Columns of the table."
          }
        }
      },
      "Column": {
        "type": "object",
        "required": [
          "name",
          "data_type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the column."
          },
          "data_type": {
            "type": "string",
            "description": "Data type of the column."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "{base-url}",
      "variables": {
        "base-url": {
          "default": "https://localhost:443"
        }
      }
    }
  ]
}
