/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class Column {
    /**
    * Name of the column.
    */
    'name': string;
    /**
    * Data type of the column.
    */
    'dataType': string;
    /**
    * Determines if the column schema is an aggregate
    */
    'isAggregate'?: string;
    /**
    * Determines if the column schema can be imported
    */
    'canImport'?: boolean;
    /**
    * Determines if the table is selected
    */
    'selected'?: boolean;
    /**
    * Determines if the table is linked
    */
    'isLinkedActive'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "dataType",
            "baseName": "data_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "isAggregate",
            "baseName": "is_aggregate",
            "type": "string",
            "format": ""
        },
        {
            "name": "canImport",
            "baseName": "can_import",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isLinkedActive",
            "baseName": "is_linked_active",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Column.attributeTypeMap;
    }

    public constructor() {
    }
}

