"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from2, except, desc) {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from2[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// index.ts
var typescript_exports = {};
__export(typescript_exports, {
    APIKey: function() {
        return APIKey;
    },
    APIKeyInput: function() {
        return APIKeyInput;
    },
    ActionConfig: function() {
        return ActionConfig;
    },
    ActionConfigInput: function() {
        return ActionConfigInput;
    },
    ActionConfigInputCreate: function() {
        return ActionConfigInputCreate;
    },
    ActionDetails: function() {
        return ActionDetails;
    },
    ActionDetailsInput: function() {
        return ActionDetailsInput;
    },
    ActionDetailsInputCreate: function() {
        return ActionDetailsInputCreate;
    },
    AnswerContent: function() {
        return AnswerContent;
    },
    AnswerDataResponse: function() {
        return AnswerDataResponse;
    },
    ApiException: function() {
        return ApiException;
    },
    AssignChangeAuthorRequest: function() {
        return AssignChangeAuthorRequest;
    },
    AssignTagRequest: function() {
        return AssignTagRequest;
    },
    AssociateMetadataInput: function() {
        return AssociateMetadataInput;
    },
    AssociateMetadataInputCreate: function() {
        return AssociateMetadataInputCreate;
    },
    Authentication: function() {
        return Authentication;
    },
    AuthenticationApi: function() {
        return PromiseAuthenticationApi;
    },
    AuthenticationInput: function() {
        return AuthenticationInput;
    },
    Author: function() {
        return Author;
    },
    AuthorMetadataTypeInput: function() {
        return AuthorMetadataTypeInput;
    },
    AuthorType: function() {
        return AuthorType;
    },
    BasicAuth: function() {
        return BasicAuth;
    },
    BasicAuthInput: function() {
        return BasicAuthInput;
    },
    BearerAuthAuthentication: function() {
        return BearerAuthAuthentication;
    },
    CALLBACK: function() {
        return CALLBACK;
    },
    CALLBACKInput: function() {
        return CALLBACKInput;
    },
    CALLBACKInputMandatory: function() {
        return CALLBACKInputMandatory;
    },
    ChangeUserPasswordRequest: function() {
        return ChangeUserPasswordRequest;
    },
    Column: function() {
        return Column;
    },
    CommitBranchRequest: function() {
        return CommitBranchRequest;
    },
    CommitFileType: function() {
        return CommitFileType;
    },
    CommitHistoryResponse: function() {
        return CommitHistoryResponse;
    },
    CommitResponse: function() {
        return CommitResponse;
    },
    CommiterType: function() {
        return CommiterType;
    },
    ConnectionInput: function() {
        return ConnectionInput;
    },
    ConnectionsApi: function() {
        return PromiseConnectionsApi;
    },
    CreateConfigRequest: function() {
        return CreateConfigRequest;
    },
    CreateConnectionRequest: function() {
        return CreateConnectionRequest;
    },
    CreateConnectionResponse: function() {
        return CreateConnectionResponse;
    },
    CreateCustomActionRequest: function() {
        return CreateCustomActionRequest;
    },
    CreateOrgRequest: function() {
        return CreateOrgRequest;
    },
    CreateRoleRequest: function() {
        return CreateRoleRequest;
    },
    CreateScheduleRequest: function() {
        return CreateScheduleRequest;
    },
    CreateTagRequest: function() {
        return CreateTagRequest;
    },
    CreateUserGroupRequest: function() {
        return CreateUserGroupRequest;
    },
    CreateUserRequest: function() {
        return CreateUserRequest;
    },
    CronExpression: function() {
        return CronExpression;
    },
    CronExpressionInput: function() {
        return CronExpressionInput;
    },
    CustomActionApi: function() {
        return PromiseCustomActionApi;
    },
    CustomActionMetadataTypeInput: function() {
        return CustomActionMetadataTypeInput;
    },
    DataApi: function() {
        return PromiseDataApi;
    },
    DataWarehouseObjectInput: function() {
        return DataWarehouseObjectInput;
    },
    DataWarehouseObjects: function() {
        return DataWarehouseObjects;
    },
    Database: function() {
        return Database;
    },
    DefaultActionConfig: function() {
        return DefaultActionConfig;
    },
    DefaultActionConfigInput: function() {
        return DefaultActionConfigInput;
    },
    DefaultActionConfigInputCreate: function() {
        return DefaultActionConfigInputCreate;
    },
    DefaultActionConfigSearchInput: function() {
        return DefaultActionConfigSearchInput;
    },
    DeleteConfigRequest: function() {
        return DeleteConfigRequest;
    },
    DeleteConnectionRequest: function() {
        return DeleteConnectionRequest;
    },
    DeleteMetadataRequest: function() {
        return DeleteMetadataRequest;
    },
    DeleteMetadataTypeInput: function() {
        return DeleteMetadataTypeInput;
    },
    DeployCommitRequest: function() {
        return DeployCommitRequest;
    },
    DeployResponse: function() {
        return DeployResponse;
    },
    ErrorResponse: function() {
        return ErrorResponse;
    },
    ExcludeMetadataListItemInput: function() {
        return ExcludeMetadataListItemInput;
    },
    ExportAnswerReportRequest: function() {
        return ExportAnswerReportRequest;
    },
    ExportLiveboardReportRequest: function() {
        return ExportLiveboardReportRequest;
    },
    ExportMetadataTMLRequest: function() {
        return ExportMetadataTMLRequest;
    },
    ExportMetadataTypeInput: function() {
        return ExportMetadataTypeInput;
    },
    FavoriteMetadataInput: function() {
        return FavoriteMetadataInput;
    },
    FavoriteMetadataItem: function() {
        return FavoriteMetadataItem;
    },
    FavoriteObjectOptionsInput: function() {
        return FavoriteObjectOptionsInput;
    },
    FetchAnswerDataRequest: function() {
        return FetchAnswerDataRequest;
    },
    FetchAnswerSqlQueryRequest: function() {
        return FetchAnswerSqlQueryRequest;
    },
    FetchConnectionDiffStatusResponse: function() {
        return FetchConnectionDiffStatusResponse;
    },
    FetchLiveboardDataRequest: function() {
        return FetchLiveboardDataRequest;
    },
    FetchLiveboardSqlQueryRequest: function() {
        return FetchLiveboardSqlQueryRequest;
    },
    FetchLogsRequest: function() {
        return FetchLogsRequest;
    },
    FetchPermissionsOfPrincipalsRequest: function() {
        return FetchPermissionsOfPrincipalsRequest;
    },
    FetchPermissionsOnMetadataRequest: function() {
        return FetchPermissionsOnMetadataRequest;
    },
    ForceLogoutUsersRequest: function() {
        return ForceLogoutUsersRequest;
    },
    Frequency: function() {
        return Frequency;
    },
    FrequencyInput: function() {
        return FrequencyInput;
    },
    GenericInfo: function() {
        return GenericInfo;
    },
    GetFullAccessTokenRequest: function() {
        return GetFullAccessTokenRequest;
    },
    GetObjectAccessTokenRequest: function() {
        return GetObjectAccessTokenRequest;
    },
    GetTokenResponse: function() {
        return GetTokenResponse;
    },
    GroupsApi: function() {
        return PromiseGroupsApi;
    },
    GroupsImportListInput: function() {
        return GroupsImportListInput;
    },
    HttpException: function() {
        return HttpException;
    },
    HttpMethod: function() {
        return HttpMethod;
    },
    ImportMetadataTMLRequest: function() {
        return ImportMetadataTMLRequest;
    },
    ImportUser: function() {
        return ImportUser;
    },
    ImportUserGroupsRequest: function() {
        return ImportUserGroupsRequest;
    },
    ImportUserGroupsResponse: function() {
        return ImportUserGroupsResponse;
    },
    ImportUserType: function() {
        return ImportUserType;
    },
    ImportUsersRequest: function() {
        return ImportUsersRequest;
    },
    ImportUsersResponse: function() {
        return ImportUsersResponse;
    },
    IsomorphicFetchHttpLibrary: function() {
        return IsomorphicFetchHttpLibrary;
    },
    JWTMetadataObject: function() {
        return JWTMetadataObject;
    },
    JWTParameter: function() {
        return JWTParameter;
    },
    JWTUserOptions: function() {
        return JWTUserOptions;
    },
    JWTUserOptionsParametersInner: function() {
        return JWTUserOptionsParametersInner;
    },
    LiveboardContent: function() {
        return LiveboardContent;
    },
    LiveboardDataResponse: function() {
        return LiveboardDataResponse;
    },
    LiveboardOptions: function() {
        return LiveboardOptions;
    },
    LiveboardOptionsInput: function() {
        return LiveboardOptionsInput;
    },
    LogApi: function() {
        return PromiseLogApi;
    },
    LogResponse: function() {
        return LogResponse;
    },
    LoginRequest: function() {
        return LoginRequest;
    },
    MetadataApi: function() {
        return PromiseMetadataApi;
    },
    MetadataAssociationItem: function() {
        return MetadataAssociationItem;
    },
    MetadataInput: function() {
        return MetadataInput;
    },
    MetadataListItemInput: function() {
        return MetadataListItemInput;
    },
    MetadataObject: function() {
        return MetadataObject;
    },
    MetadataResponse: function() {
        return MetadataResponse;
    },
    MetadataSearchResponse: function() {
        return MetadataSearchResponse;
    },
    MetadataSearchSortOptions: function() {
        return MetadataSearchSortOptions;
    },
    ModelTableList: function() {
        return ModelTableList;
    },
    ObjectIDAndName: function() {
        return ObjectIDAndName;
    },
    Org: function() {
        return Org;
    },
    OrgResponse: function() {
        return OrgResponse;
    },
    OrgsApi: function() {
        return PromiseOrgsApi;
    },
    ParametersListItem: function() {
        return ParametersListItem;
    },
    ParametersListItemInput: function() {
        return ParametersListItemInput;
    },
    PdfOptions: function() {
        return PdfOptions;
    },
    PdfOptionsInput: function() {
        return PdfOptionsInput;
    },
    PermissionInput: function() {
        return PermissionInput;
    },
    PermissionsMetadataTypeInput: function() {
        return PermissionsMetadataTypeInput;
    },
    PngOptionsInput: function() {
        return PngOptionsInput;
    },
    PrincipalsInput: function() {
        return PrincipalsInput;
    },
    PrincipalsListItem: function() {
        return PrincipalsListItem;
    },
    PrincipalsListItemInput: function() {
        return PrincipalsListItemInput;
    },
    RecipientDetails: function() {
        return RecipientDetails;
    },
    RecipientDetailsInput: function() {
        return RecipientDetailsInput;
    },
    RepoConfigObject: function() {
        return RepoConfigObject;
    },
    ReportsApi: function() {
        return PromiseReportsApi;
    },
    RequestContext: function() {
        return RequestContext2;
    },
    RequiredError: function() {
        return RequiredError;
    },
    ResetUserPasswordRequest: function() {
        return ResetUserPasswordRequest;
    },
    ResponseActivationURL: function() {
        return ResponseActivationURL;
    },
    ResponseContext: function() {
        return ResponseContext;
    },
    ResponseCustomAction: function() {
        return ResponseCustomAction;
    },
    ResponseSchedule: function() {
        return ResponseSchedule;
    },
    ResponseScheduleRun: function() {
        return ResponseScheduleRun;
    },
    RevertCommitRequest: function() {
        return RevertCommitRequest;
    },
    RevertResponse: function() {
        return RevertResponse;
    },
    RevertedMetadata: function() {
        return RevertedMetadata;
    },
    RevokeTokenRequest: function() {
        return RevokeTokenRequest;
    },
    RiseSetter: function() {
        return RiseSetter;
    },
    Role: function() {
        return Role;
    },
    RoleResponse: function() {
        return RoleResponse;
    },
    RolesApi: function() {
        return PromiseRolesApi;
    },
    RuntimeFilter: function() {
        return RuntimeFilter;
    },
    RuntimeParamOverride: function() {
        return RuntimeParamOverride;
    },
    RuntimeSort: function() {
        return RuntimeSort;
    },
    ScheduleHistoryRunsOptionsInput: function() {
        return ScheduleHistoryRunsOptionsInput;
    },
    SchedulesApi: function() {
        return PromiseSchedulesApi;
    },
    SchedulesPdfOptionsInput: function() {
        return SchedulesPdfOptionsInput;
    },
    SchemaObject: function() {
        return SchemaObject;
    },
    Scope: function() {
        return Scope;
    },
    SearchCommitsRequest: function() {
        return SearchCommitsRequest;
    },
    SearchConfigRequest: function() {
        return SearchConfigRequest;
    },
    SearchConnectionRequest: function() {
        return SearchConnectionRequest;
    },
    SearchConnectionResponse: function() {
        return SearchConnectionResponse;
    },
    SearchCustomActionsRequest: function() {
        return SearchCustomActionsRequest;
    },
    SearchDataRequest: function() {
        return SearchDataRequest;
    },
    SearchDataResponse: function() {
        return SearchDataResponse;
    },
    SearchMetadataRequest: function() {
        return SearchMetadataRequest;
    },
    SearchOrgsRequest: function() {
        return SearchOrgsRequest;
    },
    SearchRoleResponse: function() {
        return SearchRoleResponse;
    },
    SearchRolesRequest: function() {
        return SearchRolesRequest;
    },
    SearchSchedulesRequest: function() {
        return SearchSchedulesRequest;
    },
    SearchTagsRequest: function() {
        return SearchTagsRequest;
    },
    SearchUserGroupsRequest: function() {
        return SearchUserGroupsRequest;
    },
    SearchUsersRequest: function() {
        return SearchUsersRequest;
    },
    SecurityApi: function() {
        return PromiseSecurityApi;
    },
    SelfDecodingBody: function() {
        return SelfDecodingBody;
    },
    ServerConfiguration: function() {
        return ServerConfiguration;
    },
    ShareMetadataRequest: function() {
        return ShareMetadataRequest;
    },
    SharePermissionsInput: function() {
        return SharePermissionsInput;
    },
    SortOptionInput: function() {
        return SortOptionInput;
    },
    SortOptions: function() {
        return SortOptions;
    },
    SortingOptions: function() {
        return SortingOptions;
    },
    SqlQuery: function() {
        return SqlQuery;
    },
    SqlQueryResponse: function() {
        return SqlQueryResponse;
    },
    SystemApi: function() {
        return PromiseSystemApi;
    },
    SystemConfig: function() {
        return SystemConfig;
    },
    SystemInfo: function() {
        return SystemInfo;
    },
    Table: function() {
        return Table;
    },
    Tag: function() {
        return Tag;
    },
    TagMetadataTypeInput: function() {
        return TagMetadataTypeInput;
    },
    TagsApi: function() {
        return PromiseTagsApi;
    },
    ThoughtSpotRestApi: function() {
        return PromiseThoughtSpotRestApi;
    },
    Token: function() {
        return Token;
    },
    URL: function() {
        return URL2;
    },
    URLInput: function() {
        return URLInput;
    },
    URLInputMandatory: function() {
        return URLInputMandatory;
    },
    UpdateConfigRequest: function() {
        return UpdateConfigRequest;
    },
    UpdateConnectionRequest: function() {
        return UpdateConnectionRequest;
    },
    UpdateCustomActionRequest: function() {
        return UpdateCustomActionRequest;
    },
    UpdateOrgRequest: function() {
        return UpdateOrgRequest;
    },
    UpdateRoleRequest: function() {
        return UpdateRoleRequest;
    },
    UpdateScheduleRequest: function() {
        return UpdateScheduleRequest;
    },
    UpdateSystemConfigRequest: function() {
        return UpdateSystemConfigRequest;
    },
    UpdateTagRequest: function() {
        return UpdateTagRequest;
    },
    UpdateUserGroupRequest: function() {
        return UpdateUserGroupRequest;
    },
    UpdateUserRequest: function() {
        return UpdateUserRequest;
    },
    User: function() {
        return User;
    },
    UserGroup: function() {
        return UserGroup;
    },
    UserGroupResponse: function() {
        return UserGroupResponse;
    },
    UsersApi: function() {
        return PromiseUsersApi;
    },
    ValidateMergeRequest: function() {
        return ValidateMergeRequest;
    },
    VersionControlApi: function() {
        return PromiseVersionControlApi;
    },
    configureAuthMethods: function() {
        return configureAuthMethods;
    },
    createBearerAuthenticationConfig: function() {
        return createBearerAuthenticationConfig;
    },
    createConfiguration: function() {
        return createConfiguration;
    },
    server1: function() {
        return server1;
    },
    servers: function() {
        return servers;
    },
    wrapHttpLibrary: function() {
        return wrapHttpLibrary;
    }
});
module.exports = __toCommonJS(typescript_exports);
// rxjsStub.ts
var Observable = /*#__PURE__*/ function() {
    function _Observable(promise) {
        _class_call_check(this, _Observable);
        this.promise = promise;
    }
    _create_class(_Observable, [
        {
            key: "toPromise",
            value: function toPromise() {
                return this.promise;
            }
        },
        {
            key: "pipe",
            value: function pipe(callback) {
                return new _Observable(this.promise.then(callback));
            }
        }
    ]);
    return _Observable;
}();
function from(promise) {
    return new Observable(promise);
}
function of(value) {
    return new Observable(Promise.resolve(value));
}
function mergeMap(callback) {
    return function(value) {
        return callback(value).toPromise();
    };
}
function map(callback) {
    return callback;
}
// http/isomorphic-fetch.ts
var import_whatwg_fetch = require("whatwg-fetch");
var IsomorphicFetchHttpLibrary = /*#__PURE__*/ function() {
    function IsomorphicFetchHttpLibrary() {
        _class_call_check(this, IsomorphicFetchHttpLibrary);
    }
    _create_class(IsomorphicFetchHttpLibrary, [
        {
            key: "send",
            value: function send(request) {
                var method = request.getHttpMethod().toString();
                var body = request.getBody();
                var resultPromise = fetch(request.getUrl(), {
                    method: method,
                    body: body,
                    headers: request.getHeaders(),
                    credentials: "include"
                }).then(function(resp) {
                    var headers = {};
                    resp.headers.forEach(function(value, name) {
                        headers[name] = value;
                    });
                    var body2 = {
                        text: function() {
                            return resp.text();
                        },
                        binary: function() {
                            return resp.blob();
                        }
                    };
                    return new ResponseContext(resp.status, headers, body2);
                });
                return from(resultPromise);
            }
        }
    ]);
    return IsomorphicFetchHttpLibrary;
}();
// http/http.ts
var HttpMethod = /* @__PURE__ */ function(HttpMethod3) {
    HttpMethod3["GET"] = "GET";
    HttpMethod3["HEAD"] = "HEAD";
    HttpMethod3["POST"] = "POST";
    HttpMethod3["PUT"] = "PUT";
    HttpMethod3["DELETE"] = "DELETE";
    HttpMethod3["CONNECT"] = "CONNECT";
    HttpMethod3["OPTIONS"] = "OPTIONS";
    HttpMethod3["TRACE"] = "TRACE";
    HttpMethod3["PATCH"] = "PATCH";
    return HttpMethod3;
}(HttpMethod || {});
var HttpException = /*#__PURE__*/ function(Error1) {
    _inherits(HttpException, Error1);
    var _super = _create_super(HttpException);
    function HttpException(msg) {
        _class_call_check(this, HttpException);
        return _super.call(this, msg);
    }
    return HttpException;
}(_wrap_native_super(Error));
var RequestContext2 = /*#__PURE__*/ function() {
    function RequestContext2(url, httpMethod) {
        _class_call_check(this, RequestContext2);
        this.httpMethod = httpMethod;
        this.headers = {};
        this.body = void 0;
        this.url = new URL(url);
    }
    _create_class(RequestContext2, [
        {
            /*
   * Returns the url set in the constructor including the query string
   *
   */ key: "getUrl",
            value: function getUrl() {
                return this.url.toString().endsWith("/") ? this.url.toString().slice(0, -1) : this.url.toString();
            }
        },
        {
            /**
   * Replaces the url set in the constructor with this url.
   *
   */ key: "setUrl",
            value: function setUrl(url) {
                this.url = new URL(url);
            }
        },
        {
            /**
   * Sets the body of the http request either as a string or FormData
   *
   * Note that setting a body on a HTTP GET, HEAD, DELETE, CONNECT or TRACE
   * request is discouraged.
   * https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.7.3.1
   *
   * @param body the body of the request
   */ key: "setBody",
            value: function setBody(body) {
                this.body = body;
            }
        },
        {
            key: "getHttpMethod",
            value: function getHttpMethod() {
                return this.httpMethod;
            }
        },
        {
            key: "getHeaders",
            value: function getHeaders() {
                return this.headers;
            }
        },
        {
            key: "getBody",
            value: function getBody() {
                return this.body;
            }
        },
        {
            key: "setQueryParam",
            value: function setQueryParam(name, value) {
                this.url.searchParams.set(name, value);
            }
        },
        {
            /**
   * Sets a cookie with the name and value. NO check  for duplicate cookies is performed
   *
   */ key: "addCookie",
            value: function addCookie(name, value) {
                if (!this.headers["Cookie"]) {
                    this.headers["Cookie"] = "";
                }
                this.headers["Cookie"] += name + "=" + value + "; ";
            }
        },
        {
            key: "setHeaderParam",
            value: function setHeaderParam(key, value) {
                this.headers[key] = value;
            }
        }
    ]);
    return RequestContext2;
}();
var SelfDecodingBody = /*#__PURE__*/ function() {
    function SelfDecodingBody(dataSource) {
        _class_call_check(this, SelfDecodingBody);
        this.dataSource = dataSource;
    }
    _create_class(SelfDecodingBody, [
        {
            key: "binary",
            value: function binary() {
                return this.dataSource;
            }
        },
        {
            key: "text",
            value: function text() {
                var _this = this;
                return _async_to_generator(function() {
                    var data;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.dataSource
                                ];
                            case 1:
                                data = _state.sent();
                                if (data.text) {
                                    return [
                                        2,
                                        data.text()
                                    ];
                                }
                                return [
                                    2,
                                    new Promise(function(resolve, reject) {
                                        var reader = new FileReader();
                                        reader.addEventListener("load", function() {
                                            return resolve(reader.result);
                                        });
                                        reader.addEventListener("error", function() {
                                            return reject(reader.error);
                                        });
                                        reader.readAsText(data);
                                    })
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return SelfDecodingBody;
}();
var ResponseContext = /*#__PURE__*/ function() {
    function ResponseContext(httpStatusCode, headers, body) {
        _class_call_check(this, ResponseContext);
        this.httpStatusCode = httpStatusCode;
        this.headers = headers;
        this.body = body;
    }
    _create_class(ResponseContext, [
        {
            /**
   * Parse header value in the form `value; param1="value1"`
   *
   * E.g. for Content-Type or Content-Disposition
   * Parameter names are converted to lower case
   * The first parameter is returned with the key `""`
   */ key: "getParsedHeader",
            value: function getParsedHeader(headerName) {
                var result = {};
                if (!this.headers[headerName]) {
                    return result;
                }
                var parameters = this.headers[headerName].split(";");
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = parameters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var parameter = _step.value;
                        var _parameter_split = _sliced_to_array(parameter.split("=", 2), 2), key = _parameter_split[0], value = _parameter_split[1];
                        key = key.toLowerCase().trim();
                        if (value === void 0) {
                            result[""] = key;
                        } else {
                            value = value.trim();
                            if (value.startsWith('"') && value.endsWith('"')) {
                                value = value.substring(1, value.length - 1);
                            }
                            result[key] = value;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "getBodyAsFile",
            value: function getBodyAsFile() {
                var _this = this;
                return _async_to_generator(function() {
                    var data, fileName, contentType;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.body.binary()
                                ];
                            case 1:
                                data = _state.sent();
                                fileName = _this.getParsedHeader("content-disposition")["filename"] || "";
                                contentType = _this.headers["content-type"] || "";
                                try {
                                    return [
                                        2,
                                        new File([
                                            data
                                        ], fileName, {
                                            type: contentType
                                        })
                                    ];
                                } catch (error) {
                                    return [
                                        2,
                                        Object.assign(data, {
                                            name: fileName,
                                            type: contentType
                                        })
                                    ];
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            /**
   * Use a heuristic to get a body of unknown data structure.
   * Return as string if possible, otherwise as binary.
   */ key: "getBodyAsAny",
            value: function getBodyAsAny() {
                try {
                    return this.body.text();
                } catch (e) {}
                try {
                    return this.body.binary();
                } catch (e) {}
                return Promise.resolve(void 0);
            }
        }
    ]);
    return ResponseContext;
}();
function wrapHttpLibrary(promiseHttpLibrary) {
    return {
        send: function send(request) {
            return from(promiseHttpLibrary.send(request));
        }
    };
}
// auth/auth.ts
var BearerAuthAuthentication = /*#__PURE__*/ function() {
    function BearerAuthAuthentication(tokenProvider) {
        _class_call_check(this, BearerAuthAuthentication);
        this.tokenProvider = tokenProvider;
    }
    _create_class(BearerAuthAuthentication, [
        {
            key: "getName",
            value: function getName() {
                return "bearerAuth";
            }
        },
        {
            key: "applySecurityAuthentication",
            value: function applySecurityAuthentication(context) {
                var _this = this;
                return _async_to_generator(function() {
                    var _, _tmp, _1;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _ = context.setHeaderParam;
                                _tmp = [
                                    "Authorization"
                                ];
                                _1 = "Bearer ";
                                return [
                                    4,
                                    _this.tokenProvider.getToken()
                                ];
                            case 1:
                                _.apply(context, _tmp.concat([
                                    _1 + _state.sent()
                                ]));
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return BearerAuthAuthentication;
}();
function configureAuthMethods(config) {
    var authMethods = {};
    if (!config) {
        return authMethods;
    }
    authMethods["default"] = config["default"];
    if (config["bearerAuth"]) {
        authMethods["bearerAuth"] = new BearerAuthAuthentication(config["bearerAuth"]["tokenProvider"]);
    }
    return authMethods;
}
// models/APIKey.ts
var _APIKey = /*#__PURE__*/ function() {
    function _APIKey() {
        _class_call_check(this, _APIKey);
    }
    _create_class(_APIKey, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _APIKey.attributeTypeMap;
            }
        }
    ]);
    return _APIKey;
}();
_APIKey.discriminator = void 0;
_APIKey.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string",
        "format": ""
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string",
        "format": ""
    }
];
var APIKey = _APIKey;
// models/APIKeyInput.ts
var _APIKeyInput = /*#__PURE__*/ function() {
    function _APIKeyInput() {
        _class_call_check(this, _APIKeyInput);
    }
    _create_class(_APIKeyInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _APIKeyInput.attributeTypeMap;
            }
        }
    ]);
    return _APIKeyInput;
}();
_APIKeyInput.discriminator = void 0;
_APIKeyInput.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string",
        "format": ""
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string",
        "format": ""
    }
];
var APIKeyInput = _APIKeyInput;
// models/ActionConfig.ts
var _ActionConfig = /*#__PURE__*/ function() {
    function _ActionConfig() {
        _class_call_check(this, _ActionConfig);
    }
    _create_class(_ActionConfig, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ActionConfig.attributeTypeMap;
            }
        }
    ]);
    return _ActionConfig;
}();
_ActionConfig.discriminator = void 0;
_ActionConfig.attributeTypeMap = [
    {
        "name": "position",
        "baseName": "position",
        "type": "string",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var ActionConfig = _ActionConfig;
// models/ActionConfigInput.ts
var _ActionConfigInput = /*#__PURE__*/ function() {
    function _ActionConfigInput() {
        _class_call_check(this, _ActionConfigInput);
    }
    _create_class(_ActionConfigInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ActionConfigInput.attributeTypeMap;
            }
        }
    ]);
    return _ActionConfigInput;
}();
_ActionConfigInput.discriminator = void 0;
_ActionConfigInput.attributeTypeMap = [
    {
        "name": "position",
        "baseName": "position",
        "type": "ActionConfigInputPositionEnum",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var ActionConfigInput = _ActionConfigInput;
// models/ActionConfigInputCreate.ts
var _ActionConfigInputCreate = /*#__PURE__*/ function() {
    function _ActionConfigInputCreate() {
        _class_call_check(this, _ActionConfigInputCreate);
    }
    _create_class(_ActionConfigInputCreate, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ActionConfigInputCreate.attributeTypeMap;
            }
        }
    ]);
    return _ActionConfigInputCreate;
}();
_ActionConfigInputCreate.discriminator = void 0;
_ActionConfigInputCreate.attributeTypeMap = [
    {
        "name": "position",
        "baseName": "position",
        "type": "ActionConfigInputCreatePositionEnum",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var ActionConfigInputCreate = _ActionConfigInputCreate;
// models/ActionDetails.ts
var _ActionDetails = /*#__PURE__*/ function() {
    function _ActionDetails() {
        _class_call_check(this, _ActionDetails);
    }
    _create_class(_ActionDetails, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ActionDetails.attributeTypeMap;
            }
        }
    ]);
    return _ActionDetails;
}();
_ActionDetails.discriminator = void 0;
_ActionDetails.attributeTypeMap = [
    {
        "name": "CALLBACK",
        "baseName": "CALLBACK",
        "type": "CALLBACK",
        "format": ""
    },
    {
        "name": "URL",
        "baseName": "URL",
        "type": "URL",
        "format": ""
    }
];
var ActionDetails = _ActionDetails;
// models/ActionDetailsInput.ts
var _ActionDetailsInput = /*#__PURE__*/ function() {
    function _ActionDetailsInput() {
        _class_call_check(this, _ActionDetailsInput);
    }
    _create_class(_ActionDetailsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ActionDetailsInput.attributeTypeMap;
            }
        }
    ]);
    return _ActionDetailsInput;
}();
_ActionDetailsInput.discriminator = void 0;
_ActionDetailsInput.attributeTypeMap = [
    {
        "name": "CALLBACK",
        "baseName": "CALLBACK",
        "type": "CALLBACKInput",
        "format": ""
    },
    {
        "name": "URL",
        "baseName": "URL",
        "type": "URLInput",
        "format": ""
    }
];
var ActionDetailsInput = _ActionDetailsInput;
// models/ActionDetailsInputCreate.ts
var _ActionDetailsInputCreate = /*#__PURE__*/ function() {
    function _ActionDetailsInputCreate() {
        _class_call_check(this, _ActionDetailsInputCreate);
    }
    _create_class(_ActionDetailsInputCreate, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ActionDetailsInputCreate.attributeTypeMap;
            }
        }
    ]);
    return _ActionDetailsInputCreate;
}();
_ActionDetailsInputCreate.discriminator = void 0;
_ActionDetailsInputCreate.attributeTypeMap = [
    {
        "name": "CALLBACK",
        "baseName": "CALLBACK",
        "type": "CALLBACKInputMandatory",
        "format": ""
    },
    {
        "name": "URL",
        "baseName": "URL",
        "type": "URLInputMandatory",
        "format": ""
    }
];
var ActionDetailsInputCreate = _ActionDetailsInputCreate;
// models/AnswerContent.ts
var _AnswerContent = /*#__PURE__*/ function() {
    function _AnswerContent() {
        _class_call_check(this, _AnswerContent);
    }
    _create_class(_AnswerContent, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AnswerContent.attributeTypeMap;
            }
        }
    ]);
    return _AnswerContent;
}();
_AnswerContent.discriminator = void 0;
_AnswerContent.attributeTypeMap = [
    {
        "name": "available_data_row_count",
        "baseName": "available_data_row_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "column_names",
        "baseName": "column_names",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "data_rows",
        "baseName": "data_rows",
        "type": "Array<any>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "returned_data_row_count",
        "baseName": "returned_data_row_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "sampling_ratio",
        "baseName": "sampling_ratio",
        "type": "number",
        "format": "float"
    }
];
var AnswerContent = _AnswerContent;
// models/AnswerDataResponse.ts
var _AnswerDataResponse = /*#__PURE__*/ function() {
    function _AnswerDataResponse() {
        _class_call_check(this, _AnswerDataResponse);
    }
    _create_class(_AnswerDataResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AnswerDataResponse.attributeTypeMap;
            }
        }
    ]);
    return _AnswerDataResponse;
}();
_AnswerDataResponse.discriminator = void 0;
_AnswerDataResponse.attributeTypeMap = [
    {
        "name": "metadata_id",
        "baseName": "metadata_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "contents",
        "baseName": "contents",
        "type": "Array<AnswerContent>",
        "format": ""
    }
];
var AnswerDataResponse = _AnswerDataResponse;
// models/AssignChangeAuthorRequest.ts
var _AssignChangeAuthorRequest = /*#__PURE__*/ function() {
    function _AssignChangeAuthorRequest() {
        _class_call_check(this, _AssignChangeAuthorRequest);
    }
    _create_class(_AssignChangeAuthorRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AssignChangeAuthorRequest.attributeTypeMap;
            }
        }
    ]);
    return _AssignChangeAuthorRequest;
}();
_AssignChangeAuthorRequest.discriminator = void 0;
_AssignChangeAuthorRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<AuthorMetadataTypeInput>",
        "format": ""
    },
    {
        "name": "user_identifier",
        "baseName": "user_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "current_owner_identifier",
        "baseName": "current_owner_identifier",
        "type": "string",
        "format": ""
    }
];
var AssignChangeAuthorRequest = _AssignChangeAuthorRequest;
// models/AssignTagRequest.ts
var _AssignTagRequest = /*#__PURE__*/ function() {
    function _AssignTagRequest() {
        _class_call_check(this, _AssignTagRequest);
    }
    _create_class(_AssignTagRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AssignTagRequest.attributeTypeMap;
            }
        }
    ]);
    return _AssignTagRequest;
}();
_AssignTagRequest.discriminator = void 0;
_AssignTagRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<TagMetadataTypeInput>",
        "format": ""
    },
    {
        "name": "tag_identifiers",
        "baseName": "tag_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var AssignTagRequest = _AssignTagRequest;
// models/AssociateMetadataInput.ts
var _AssociateMetadataInput = /*#__PURE__*/ function() {
    function _AssociateMetadataInput() {
        _class_call_check(this, _AssociateMetadataInput);
    }
    _create_class(_AssociateMetadataInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AssociateMetadataInput.attributeTypeMap;
            }
        }
    ]);
    return _AssociateMetadataInput;
}();
_AssociateMetadataInput.discriminator = void 0;
_AssociateMetadataInput.attributeTypeMap = [
    {
        "name": "action_config",
        "baseName": "action_config",
        "type": "ActionConfigInput",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "AssociateMetadataInputTypeEnum",
        "format": ""
    }
];
var AssociateMetadataInput = _AssociateMetadataInput;
// models/AssociateMetadataInputCreate.ts
var _AssociateMetadataInputCreate = /*#__PURE__*/ function() {
    function _AssociateMetadataInputCreate() {
        _class_call_check(this, _AssociateMetadataInputCreate);
    }
    _create_class(_AssociateMetadataInputCreate, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AssociateMetadataInputCreate.attributeTypeMap;
            }
        }
    ]);
    return _AssociateMetadataInputCreate;
}();
_AssociateMetadataInputCreate.discriminator = void 0;
_AssociateMetadataInputCreate.attributeTypeMap = [
    {
        "name": "action_config",
        "baseName": "action_config",
        "type": "ActionConfigInputCreate",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "AssociateMetadataInputCreateTypeEnum",
        "format": ""
    }
];
var AssociateMetadataInputCreate = _AssociateMetadataInputCreate;
// models/Authentication.ts
var _Authentication = /*#__PURE__*/ function() {
    function _Authentication() {
        _class_call_check(this, _Authentication);
    }
    _create_class(_Authentication, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Authentication.attributeTypeMap;
            }
        }
    ]);
    return _Authentication;
}();
_Authentication.discriminator = void 0;
_Authentication.attributeTypeMap = [
    {
        "name": "API_Key",
        "baseName": "API_Key",
        "type": "APIKey",
        "format": ""
    },
    {
        "name": "Basic_Auth",
        "baseName": "Basic_Auth",
        "type": "BasicAuth",
        "format": ""
    },
    {
        "name": "Bearer_Token",
        "baseName": "Bearer_Token",
        "type": "string",
        "format": ""
    },
    {
        "name": "No_Auth",
        "baseName": "No_Auth",
        "type": "string",
        "format": ""
    }
];
var Authentication = _Authentication;
// models/AuthenticationInput.ts
var _AuthenticationInput = /*#__PURE__*/ function() {
    function _AuthenticationInput() {
        _class_call_check(this, _AuthenticationInput);
    }
    _create_class(_AuthenticationInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AuthenticationInput.attributeTypeMap;
            }
        }
    ]);
    return _AuthenticationInput;
}();
_AuthenticationInput.discriminator = void 0;
_AuthenticationInput.attributeTypeMap = [
    {
        "name": "API_Key",
        "baseName": "API_Key",
        "type": "APIKeyInput",
        "format": ""
    },
    {
        "name": "Basic_Auth",
        "baseName": "Basic_Auth",
        "type": "BasicAuthInput",
        "format": ""
    },
    {
        "name": "Bearer_Token",
        "baseName": "Bearer_Token",
        "type": "string",
        "format": ""
    },
    {
        "name": "No_Auth",
        "baseName": "No_Auth",
        "type": "string",
        "format": ""
    }
];
var AuthenticationInput = _AuthenticationInput;
// models/Author.ts
var _Author = /*#__PURE__*/ function() {
    function _Author() {
        _class_call_check(this, _Author);
    }
    _create_class(_Author, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Author.attributeTypeMap;
            }
        }
    ]);
    return _Author;
}();
_Author.discriminator = void 0;
_Author.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var Author = _Author;
// models/AuthorMetadataTypeInput.ts
var _AuthorMetadataTypeInput = /*#__PURE__*/ function() {
    function _AuthorMetadataTypeInput() {
        _class_call_check(this, _AuthorMetadataTypeInput);
    }
    _create_class(_AuthorMetadataTypeInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AuthorMetadataTypeInput.attributeTypeMap;
            }
        }
    ]);
    return _AuthorMetadataTypeInput;
}();
_AuthorMetadataTypeInput.discriminator = void 0;
_AuthorMetadataTypeInput.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "AuthorMetadataTypeInputTypeEnum",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    }
];
var AuthorMetadataTypeInput = _AuthorMetadataTypeInput;
// models/AuthorType.ts
var _AuthorType = /*#__PURE__*/ function() {
    function _AuthorType() {
        _class_call_check(this, _AuthorType);
    }
    _create_class(_AuthorType, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _AuthorType.attributeTypeMap;
            }
        }
    ]);
    return _AuthorType;
}();
_AuthorType.discriminator = void 0;
_AuthorType.attributeTypeMap = [
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    }
];
var AuthorType = _AuthorType;
// models/BasicAuth.ts
var _BasicAuth = /*#__PURE__*/ function() {
    function _BasicAuth() {
        _class_call_check(this, _BasicAuth);
    }
    _create_class(_BasicAuth, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _BasicAuth.attributeTypeMap;
            }
        }
    ]);
    return _BasicAuth;
}();
_BasicAuth.discriminator = void 0;
_BasicAuth.attributeTypeMap = [
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    }
];
var BasicAuth = _BasicAuth;
// models/BasicAuthInput.ts
var _BasicAuthInput = /*#__PURE__*/ function() {
    function _BasicAuthInput() {
        _class_call_check(this, _BasicAuthInput);
    }
    _create_class(_BasicAuthInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _BasicAuthInput.attributeTypeMap;
            }
        }
    ]);
    return _BasicAuthInput;
}();
_BasicAuthInput.discriminator = void 0;
_BasicAuthInput.attributeTypeMap = [
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    }
];
var BasicAuthInput = _BasicAuthInput;
// models/CALLBACK.ts
var _CALLBACK = /*#__PURE__*/ function() {
    function _CALLBACK() {
        _class_call_check(this, _CALLBACK);
    }
    _create_class(_CALLBACK, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CALLBACK.attributeTypeMap;
            }
        }
    ]);
    return _CALLBACK;
}();
_CALLBACK.discriminator = void 0;
_CALLBACK.attributeTypeMap = [
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string",
        "format": ""
    }
];
var CALLBACK = _CALLBACK;
// models/CALLBACKInput.ts
var _CALLBACKInput = /*#__PURE__*/ function() {
    function _CALLBACKInput() {
        _class_call_check(this, _CALLBACKInput);
    }
    _create_class(_CALLBACKInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CALLBACKInput.attributeTypeMap;
            }
        }
    ]);
    return _CALLBACKInput;
}();
_CALLBACKInput.discriminator = void 0;
_CALLBACKInput.attributeTypeMap = [
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string",
        "format": ""
    }
];
var CALLBACKInput = _CALLBACKInput;
// models/CALLBACKInputMandatory.ts
var _CALLBACKInputMandatory = /*#__PURE__*/ function() {
    function _CALLBACKInputMandatory() {
        _class_call_check(this, _CALLBACKInputMandatory);
    }
    _create_class(_CALLBACKInputMandatory, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CALLBACKInputMandatory.attributeTypeMap;
            }
        }
    ]);
    return _CALLBACKInputMandatory;
}();
_CALLBACKInputMandatory.discriminator = void 0;
_CALLBACKInputMandatory.attributeTypeMap = [
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string",
        "format": ""
    }
];
var CALLBACKInputMandatory = _CALLBACKInputMandatory;
// models/ChangeUserPasswordRequest.ts
var _ChangeUserPasswordRequest = /*#__PURE__*/ function() {
    function _ChangeUserPasswordRequest() {
        _class_call_check(this, _ChangeUserPasswordRequest);
    }
    _create_class(_ChangeUserPasswordRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ChangeUserPasswordRequest.attributeTypeMap;
            }
        }
    ]);
    return _ChangeUserPasswordRequest;
}();
_ChangeUserPasswordRequest.discriminator = void 0;
_ChangeUserPasswordRequest.attributeTypeMap = [
    {
        "name": "current_password",
        "baseName": "current_password",
        "type": "string",
        "format": ""
    },
    {
        "name": "new_password",
        "baseName": "new_password",
        "type": "string",
        "format": ""
    },
    {
        "name": "user_identifier",
        "baseName": "user_identifier",
        "type": "string",
        "format": ""
    }
];
var ChangeUserPasswordRequest = _ChangeUserPasswordRequest;
// models/Column.ts
var _Column = /*#__PURE__*/ function() {
    function _Column() {
        _class_call_check(this, _Column);
    }
    _create_class(_Column, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Column.attributeTypeMap;
            }
        }
    ]);
    return _Column;
}();
_Column.discriminator = void 0;
_Column.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_type",
        "baseName": "data_type",
        "type": "string",
        "format": ""
    },
    {
        "name": "is_aggregate",
        "baseName": "is_aggregate",
        "type": "string",
        "format": ""
    },
    {
        "name": "can_import",
        "baseName": "can_import",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "selected",
        "baseName": "selected",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "is_linked_active",
        "baseName": "is_linked_active",
        "type": "boolean",
        "format": ""
    }
];
var Column = _Column;
// models/CommitBranchRequest.ts
var _CommitBranchRequest = /*#__PURE__*/ function() {
    function _CommitBranchRequest() {
        _class_call_check(this, _CommitBranchRequest);
    }
    _create_class(_CommitBranchRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CommitBranchRequest.attributeTypeMap;
            }
        }
    ]);
    return _CommitBranchRequest;
}();
_CommitBranchRequest.discriminator = void 0;
_CommitBranchRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<MetadataObject>",
        "format": ""
    },
    {
        "name": "delete_aware",
        "baseName": "delete_aware",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "branch_name",
        "baseName": "branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "comment",
        "baseName": "comment",
        "type": "string",
        "format": ""
    }
];
var CommitBranchRequest = _CommitBranchRequest;
// models/CommitFileType.ts
var _CommitFileType = /*#__PURE__*/ function() {
    function _CommitFileType() {
        _class_call_check(this, _CommitFileType);
    }
    _create_class(_CommitFileType, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CommitFileType.attributeTypeMap;
            }
        }
    ]);
    return _CommitFileType;
}();
_CommitFileType.discriminator = void 0;
_CommitFileType.attributeTypeMap = [
    {
        "name": "file_name",
        "baseName": "file_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "status_code",
        "baseName": "status_code",
        "type": "string",
        "format": ""
    },
    {
        "name": "status_message",
        "baseName": "status_message",
        "type": "string",
        "format": ""
    }
];
var CommitFileType = _CommitFileType;
// models/CommitHistoryResponse.ts
var _CommitHistoryResponse = /*#__PURE__*/ function() {
    function _CommitHistoryResponse() {
        _class_call_check(this, _CommitHistoryResponse);
    }
    _create_class(_CommitHistoryResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CommitHistoryResponse.attributeTypeMap;
            }
        }
    ]);
    return _CommitHistoryResponse;
}();
_CommitHistoryResponse.discriminator = void 0;
_CommitHistoryResponse.attributeTypeMap = [
    {
        "name": "committer",
        "baseName": "committer",
        "type": "CommiterType",
        "format": ""
    },
    {
        "name": "author",
        "baseName": "author",
        "type": "AuthorType",
        "format": ""
    },
    {
        "name": "comment",
        "baseName": "comment",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_time",
        "baseName": "commit_time",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_id",
        "baseName": "commit_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "branch",
        "baseName": "branch",
        "type": "string",
        "format": ""
    }
];
var CommitHistoryResponse = _CommitHistoryResponse;
// models/CommitResponse.ts
var _CommitResponse = /*#__PURE__*/ function() {
    function _CommitResponse() {
        _class_call_check(this, _CommitResponse);
    }
    _create_class(_CommitResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CommitResponse.attributeTypeMap;
            }
        }
    ]);
    return _CommitResponse;
}();
_CommitResponse.discriminator = void 0;
_CommitResponse.attributeTypeMap = [
    {
        "name": "committer",
        "baseName": "committer",
        "type": "CommiterType",
        "format": ""
    },
    {
        "name": "author",
        "baseName": "author",
        "type": "AuthorType",
        "format": ""
    },
    {
        "name": "comment",
        "baseName": "comment",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_time",
        "baseName": "commit_time",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_id",
        "baseName": "commit_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "branch",
        "baseName": "branch",
        "type": "string",
        "format": ""
    },
    {
        "name": "committed_files",
        "baseName": "committed_files",
        "type": "Array<CommitFileType>",
        "format": ""
    }
];
var CommitResponse = _CommitResponse;
// models/CommiterType.ts
var _CommiterType = /*#__PURE__*/ function() {
    function _CommiterType() {
        _class_call_check(this, _CommiterType);
    }
    _create_class(_CommiterType, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CommiterType.attributeTypeMap;
            }
        }
    ]);
    return _CommiterType;
}();
_CommiterType.discriminator = void 0;
_CommiterType.attributeTypeMap = [
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    }
];
var CommiterType = _CommiterType;
// models/ConnectionInput.ts
var _ConnectionInput = /*#__PURE__*/ function() {
    function _ConnectionInput() {
        _class_call_check(this, _ConnectionInput);
    }
    _create_class(_ConnectionInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ConnectionInput.attributeTypeMap;
            }
        }
    ]);
    return _ConnectionInput;
}();
_ConnectionInput.discriminator = void 0;
_ConnectionInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "name_pattern",
        "baseName": "name_pattern",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_warehouse_objects",
        "baseName": "data_warehouse_objects",
        "type": "Array<DataWarehouseObjectInput>",
        "format": ""
    }
];
var ConnectionInput = _ConnectionInput;
// models/CreateConfigRequest.ts
var _CreateConfigRequest = /*#__PURE__*/ function() {
    function _CreateConfigRequest() {
        _class_call_check(this, _CreateConfigRequest);
    }
    _create_class(_CreateConfigRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateConfigRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateConfigRequest;
}();
_CreateConfigRequest.discriminator = void 0;
_CreateConfigRequest.attributeTypeMap = [
    {
        "name": "repository_url",
        "baseName": "repository_url",
        "type": "string",
        "format": ""
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    },
    {
        "name": "access_token",
        "baseName": "access_token",
        "type": "string",
        "format": ""
    },
    {
        "name": "org_identifier",
        "baseName": "org_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "branch_names",
        "baseName": "branch_names",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "commit_branch_name",
        "baseName": "commit_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "default_branch_name",
        "baseName": "default_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "enable_guid_mapping",
        "baseName": "enable_guid_mapping",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "configuration_branch_name",
        "baseName": "configuration_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "guid_mapping_branch_name",
        "baseName": "guid_mapping_branch_name",
        "type": "string",
        "format": ""
    }
];
var CreateConfigRequest = _CreateConfigRequest;
// models/CreateConnectionRequest.ts
var _CreateConnectionRequest = /*#__PURE__*/ function() {
    function _CreateConnectionRequest() {
        _class_call_check(this, _CreateConnectionRequest);
    }
    _create_class(_CreateConnectionRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateConnectionRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateConnectionRequest;
}();
_CreateConnectionRequest.discriminator = void 0;
_CreateConnectionRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_warehouse_type",
        "baseName": "data_warehouse_type",
        "type": "CreateConnectionRequestDataWarehouseTypeEnum",
        "format": ""
    },
    {
        "name": "data_warehouse_config",
        "baseName": "data_warehouse_config",
        "type": "any",
        "format": ""
    },
    {
        "name": "validate",
        "baseName": "validate",
        "type": "boolean",
        "format": ""
    }
];
var CreateConnectionRequest = _CreateConnectionRequest;
// models/CreateConnectionResponse.ts
var _CreateConnectionResponse = /*#__PURE__*/ function() {
    function _CreateConnectionResponse() {
        _class_call_check(this, _CreateConnectionResponse);
    }
    _create_class(_CreateConnectionResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateConnectionResponse.attributeTypeMap;
            }
        }
    ]);
    return _CreateConnectionResponse;
}();
_CreateConnectionResponse.discriminator = void 0;
_CreateConnectionResponse.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_warehouse_type",
        "baseName": "data_warehouse_type",
        "type": "CreateConnectionResponseDataWarehouseTypeEnum",
        "format": ""
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "any",
        "format": ""
    }
];
var CreateConnectionResponse = _CreateConnectionResponse;
// models/CreateCustomActionRequest.ts
var _CreateCustomActionRequest = /*#__PURE__*/ function() {
    function _CreateCustomActionRequest() {
        _class_call_check(this, _CreateCustomActionRequest);
    }
    _create_class(_CreateCustomActionRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateCustomActionRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateCustomActionRequest;
}();
_CreateCustomActionRequest.discriminator = void 0;
_CreateCustomActionRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "action_details",
        "baseName": "action_details",
        "type": "ActionDetailsInputCreate",
        "format": ""
    },
    {
        "name": "associate_metadata",
        "baseName": "associate_metadata",
        "type": "Array<AssociateMetadataInputCreate>",
        "format": ""
    },
    {
        "name": "default_action_config",
        "baseName": "default_action_config",
        "type": "DefaultActionConfigInputCreate",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var CreateCustomActionRequest = _CreateCustomActionRequest;
// models/CreateOrgRequest.ts
var _CreateOrgRequest = /*#__PURE__*/ function() {
    function _CreateOrgRequest() {
        _class_call_check(this, _CreateOrgRequest);
    }
    _create_class(_CreateOrgRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateOrgRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateOrgRequest;
}();
_CreateOrgRequest.discriminator = void 0;
_CreateOrgRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    }
];
var CreateOrgRequest = _CreateOrgRequest;
// models/CreateRoleRequest.ts
var _CreateRoleRequest = /*#__PURE__*/ function() {
    function _CreateRoleRequest() {
        _class_call_check(this, _CreateRoleRequest);
    }
    _create_class(_CreateRoleRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateRoleRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateRoleRequest;
}();
_CreateRoleRequest.discriminator = void 0;
_CreateRoleRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<CreateRoleRequestPrivilegesEnum>",
        "format": ""
    }
];
var CreateRoleRequest = _CreateRoleRequest;
// models/CreateScheduleRequest.ts
var _CreateScheduleRequest = /*#__PURE__*/ function() {
    function _CreateScheduleRequest() {
        _class_call_check(this, _CreateScheduleRequest);
    }
    _create_class(_CreateScheduleRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateScheduleRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateScheduleRequest;
}();
_CreateScheduleRequest.discriminator = void 0;
_CreateScheduleRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "CreateScheduleRequestMetadataTypeEnum",
        "format": ""
    },
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "file_format",
        "baseName": "file_format",
        "type": "CreateScheduleRequestFileFormatEnum",
        "format": ""
    },
    {
        "name": "liveboard_options",
        "baseName": "liveboard_options",
        "type": "LiveboardOptionsInput",
        "format": ""
    },
    {
        "name": "pdf_options",
        "baseName": "pdf_options",
        "type": "SchedulesPdfOptionsInput",
        "format": ""
    },
    {
        "name": "time_zone",
        "baseName": "time_zone",
        "type": "CreateScheduleRequestTimeZoneEnum",
        "format": ""
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "FrequencyInput",
        "format": ""
    },
    {
        "name": "recipient_details",
        "baseName": "recipient_details",
        "type": "RecipientDetailsInput",
        "format": ""
    }
];
var CreateScheduleRequest = _CreateScheduleRequest;
// models/CreateTagRequest.ts
var _CreateTagRequest = /*#__PURE__*/ function() {
    function _CreateTagRequest() {
        _class_call_check(this, _CreateTagRequest);
    }
    _create_class(_CreateTagRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateTagRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateTagRequest;
}();
_CreateTagRequest.discriminator = void 0;
_CreateTagRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "color",
        "baseName": "color",
        "type": "string",
        "format": ""
    }
];
var CreateTagRequest = _CreateTagRequest;
// models/CreateUserGroupRequest.ts
var _CreateUserGroupRequest = /*#__PURE__*/ function() {
    function _CreateUserGroupRequest() {
        _class_call_check(this, _CreateUserGroupRequest);
    }
    _create_class(_CreateUserGroupRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateUserGroupRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateUserGroupRequest;
}();
_CreateUserGroupRequest.discriminator = void 0;
_CreateUserGroupRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "default_liveboard_identifiers",
        "baseName": "default_liveboard_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<CreateUserGroupRequestPrivilegesEnum>",
        "format": ""
    },
    {
        "name": "sub_group_identifiers",
        "baseName": "sub_group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "CreateUserGroupRequestTypeEnum",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "CreateUserGroupRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "role_identifiers",
        "baseName": "role_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var CreateUserGroupRequest = _CreateUserGroupRequest;
// models/CreateUserRequest.ts
var _CreateUserRequest = /*#__PURE__*/ function() {
    function _CreateUserRequest() {
        _class_call_check(this, _CreateUserRequest);
    }
    _create_class(_CreateUserRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CreateUserRequest.attributeTypeMap;
            }
        }
    ]);
    return _CreateUserRequest;
}();
_CreateUserRequest.discriminator = void 0;
_CreateUserRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "account_type",
        "baseName": "account_type",
        "type": "CreateUserRequestAccountTypeEnum",
        "format": ""
    },
    {
        "name": "account_status",
        "baseName": "account_status",
        "type": "CreateUserRequestAccountStatusEnum",
        "format": ""
    },
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "CreateUserRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "notify_on_share",
        "baseName": "notify_on_share",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "show_onboarding_experience",
        "baseName": "show_onboarding_experience",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "onboarding_experience_completed",
        "baseName": "onboarding_experience_completed",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "home_liveboard_identifier",
        "baseName": "home_liveboard_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "favorite_metadata",
        "baseName": "favorite_metadata",
        "type": "Array<FavoriteMetadataInput>",
        "format": ""
    },
    {
        "name": "preferred_locale",
        "baseName": "preferred_locale",
        "type": "CreateUserRequestPreferredLocaleEnum",
        "format": ""
    },
    {
        "name": "extended_properties",
        "baseName": "extended_properties",
        "type": "any",
        "format": ""
    },
    {
        "name": "extended_preferences",
        "baseName": "extended_preferences",
        "type": "any",
        "format": ""
    },
    {
        "name": "trigger_welcome_email",
        "baseName": "trigger_welcome_email",
        "type": "boolean",
        "format": ""
    }
];
var CreateUserRequest = _CreateUserRequest;
// models/CronExpression.ts
var _CronExpression = /*#__PURE__*/ function() {
    function _CronExpression() {
        _class_call_check(this, _CronExpression);
    }
    _create_class(_CronExpression, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CronExpression.attributeTypeMap;
            }
        }
    ]);
    return _CronExpression;
}();
_CronExpression.discriminator = void 0;
_CronExpression.attributeTypeMap = [
    {
        "name": "day_of_month",
        "baseName": "day_of_month",
        "type": "string",
        "format": ""
    },
    {
        "name": "day_of_week",
        "baseName": "day_of_week",
        "type": "string",
        "format": ""
    },
    {
        "name": "hour",
        "baseName": "hour",
        "type": "string",
        "format": ""
    },
    {
        "name": "minute",
        "baseName": "minute",
        "type": "string",
        "format": ""
    },
    {
        "name": "month",
        "baseName": "month",
        "type": "string",
        "format": ""
    },
    {
        "name": "second",
        "baseName": "second",
        "type": "string",
        "format": ""
    }
];
var CronExpression = _CronExpression;
// models/CronExpressionInput.ts
var _CronExpressionInput = /*#__PURE__*/ function() {
    function _CronExpressionInput() {
        _class_call_check(this, _CronExpressionInput);
    }
    _create_class(_CronExpressionInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CronExpressionInput.attributeTypeMap;
            }
        }
    ]);
    return _CronExpressionInput;
}();
_CronExpressionInput.discriminator = void 0;
_CronExpressionInput.attributeTypeMap = [
    {
        "name": "day_of_month",
        "baseName": "day_of_month",
        "type": "string",
        "format": ""
    },
    {
        "name": "day_of_week",
        "baseName": "day_of_week",
        "type": "string",
        "format": ""
    },
    {
        "name": "hour",
        "baseName": "hour",
        "type": "string",
        "format": ""
    },
    {
        "name": "minute",
        "baseName": "minute",
        "type": "string",
        "format": ""
    },
    {
        "name": "month",
        "baseName": "month",
        "type": "string",
        "format": ""
    },
    {
        "name": "second",
        "baseName": "second",
        "type": "string",
        "format": ""
    }
];
var CronExpressionInput = _CronExpressionInput;
// models/CustomActionMetadataTypeInput.ts
var _CustomActionMetadataTypeInput = /*#__PURE__*/ function() {
    function _CustomActionMetadataTypeInput() {
        _class_call_check(this, _CustomActionMetadataTypeInput);
    }
    _create_class(_CustomActionMetadataTypeInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _CustomActionMetadataTypeInput.attributeTypeMap;
            }
        }
    ]);
    return _CustomActionMetadataTypeInput;
}();
_CustomActionMetadataTypeInput.discriminator = void 0;
_CustomActionMetadataTypeInput.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "CustomActionMetadataTypeInputTypeEnum",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    }
];
var CustomActionMetadataTypeInput = _CustomActionMetadataTypeInput;
// models/DataWarehouseObjectInput.ts
var _DataWarehouseObjectInput = /*#__PURE__*/ function() {
    function _DataWarehouseObjectInput() {
        _class_call_check(this, _DataWarehouseObjectInput);
    }
    _create_class(_DataWarehouseObjectInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DataWarehouseObjectInput.attributeTypeMap;
            }
        }
    ]);
    return _DataWarehouseObjectInput;
}();
_DataWarehouseObjectInput.discriminator = void 0;
_DataWarehouseObjectInput.attributeTypeMap = [
    {
        "name": "database",
        "baseName": "database",
        "type": "string",
        "format": ""
    },
    {
        "name": "schema",
        "baseName": "schema",
        "type": "string",
        "format": ""
    },
    {
        "name": "table",
        "baseName": "table",
        "type": "string",
        "format": ""
    },
    {
        "name": "column",
        "baseName": "column",
        "type": "string",
        "format": ""
    }
];
var DataWarehouseObjectInput = _DataWarehouseObjectInput;
// models/DataWarehouseObjects.ts
var _DataWarehouseObjects = /*#__PURE__*/ function() {
    function _DataWarehouseObjects() {
        _class_call_check(this, _DataWarehouseObjects);
    }
    _create_class(_DataWarehouseObjects, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DataWarehouseObjects.attributeTypeMap;
            }
        }
    ]);
    return _DataWarehouseObjects;
}();
_DataWarehouseObjects.discriminator = void 0;
_DataWarehouseObjects.attributeTypeMap = [
    {
        "name": "databases",
        "baseName": "databases",
        "type": "Array<Database>",
        "format": ""
    }
];
var DataWarehouseObjects = _DataWarehouseObjects;
// models/Database.ts
var _Database = /*#__PURE__*/ function() {
    function _Database() {
        _class_call_check(this, _Database);
    }
    _create_class(_Database, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Database.attributeTypeMap;
            }
        }
    ]);
    return _Database;
}();
_Database.discriminator = void 0;
_Database.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "schemas",
        "baseName": "schemas",
        "type": "Array<SchemaObject>",
        "format": ""
    },
    {
        "name": "auto_created",
        "baseName": "auto_created",
        "type": "boolean",
        "format": ""
    }
];
var Database = _Database;
// models/DefaultActionConfig.ts
var _DefaultActionConfig = /*#__PURE__*/ function() {
    function _DefaultActionConfig() {
        _class_call_check(this, _DefaultActionConfig);
    }
    _create_class(_DefaultActionConfig, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DefaultActionConfig.attributeTypeMap;
            }
        }
    ]);
    return _DefaultActionConfig;
}();
_DefaultActionConfig.discriminator = void 0;
_DefaultActionConfig.attributeTypeMap = [
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var DefaultActionConfig = _DefaultActionConfig;
// models/DefaultActionConfigInput.ts
var _DefaultActionConfigInput = /*#__PURE__*/ function() {
    function _DefaultActionConfigInput() {
        _class_call_check(this, _DefaultActionConfigInput);
    }
    _create_class(_DefaultActionConfigInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DefaultActionConfigInput.attributeTypeMap;
            }
        }
    ]);
    return _DefaultActionConfigInput;
}();
_DefaultActionConfigInput.discriminator = void 0;
_DefaultActionConfigInput.attributeTypeMap = [
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var DefaultActionConfigInput = _DefaultActionConfigInput;
// models/DefaultActionConfigInputCreate.ts
var _DefaultActionConfigInputCreate = /*#__PURE__*/ function() {
    function _DefaultActionConfigInputCreate() {
        _class_call_check(this, _DefaultActionConfigInputCreate);
    }
    _create_class(_DefaultActionConfigInputCreate, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DefaultActionConfigInputCreate.attributeTypeMap;
            }
        }
    ]);
    return _DefaultActionConfigInputCreate;
}();
_DefaultActionConfigInputCreate.discriminator = void 0;
_DefaultActionConfigInputCreate.attributeTypeMap = [
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var DefaultActionConfigInputCreate = _DefaultActionConfigInputCreate;
// models/DefaultActionConfigSearchInput.ts
var _DefaultActionConfigSearchInput = /*#__PURE__*/ function() {
    function _DefaultActionConfigSearchInput() {
        _class_call_check(this, _DefaultActionConfigSearchInput);
    }
    _create_class(_DefaultActionConfigSearchInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DefaultActionConfigSearchInput.attributeTypeMap;
            }
        }
    ]);
    return _DefaultActionConfigSearchInput;
}();
_DefaultActionConfigSearchInput.discriminator = void 0;
_DefaultActionConfigSearchInput.attributeTypeMap = [
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "boolean",
        "format": ""
    }
];
var DefaultActionConfigSearchInput = _DefaultActionConfigSearchInput;
// models/DeleteConfigRequest.ts
var _DeleteConfigRequest = /*#__PURE__*/ function() {
    function _DeleteConfigRequest() {
        _class_call_check(this, _DeleteConfigRequest);
    }
    _create_class(_DeleteConfigRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DeleteConfigRequest.attributeTypeMap;
            }
        }
    ]);
    return _DeleteConfigRequest;
}();
_DeleteConfigRequest.discriminator = void 0;
_DeleteConfigRequest.attributeTypeMap = [
    {
        "name": "cluster_level",
        "baseName": "cluster_level",
        "type": "boolean",
        "format": ""
    }
];
var DeleteConfigRequest = _DeleteConfigRequest;
// models/DeleteConnectionRequest.ts
var _DeleteConnectionRequest = /*#__PURE__*/ function() {
    function _DeleteConnectionRequest() {
        _class_call_check(this, _DeleteConnectionRequest);
    }
    _create_class(_DeleteConnectionRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DeleteConnectionRequest.attributeTypeMap;
            }
        }
    ]);
    return _DeleteConnectionRequest;
}();
_DeleteConnectionRequest.discriminator = void 0;
_DeleteConnectionRequest.attributeTypeMap = [
    {
        "name": "connection_identifier",
        "baseName": "connection_identifier",
        "type": "string",
        "format": ""
    }
];
var DeleteConnectionRequest = _DeleteConnectionRequest;
// models/DeleteMetadataRequest.ts
var _DeleteMetadataRequest = /*#__PURE__*/ function() {
    function _DeleteMetadataRequest() {
        _class_call_check(this, _DeleteMetadataRequest);
    }
    _create_class(_DeleteMetadataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DeleteMetadataRequest.attributeTypeMap;
            }
        }
    ]);
    return _DeleteMetadataRequest;
}();
_DeleteMetadataRequest.discriminator = void 0;
_DeleteMetadataRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<DeleteMetadataTypeInput>",
        "format": ""
    },
    {
        "name": "delete_disabled_objects",
        "baseName": "delete_disabled_objects",
        "type": "boolean",
        "format": ""
    }
];
var DeleteMetadataRequest = _DeleteMetadataRequest;
// models/DeleteMetadataTypeInput.ts
var _DeleteMetadataTypeInput = /*#__PURE__*/ function() {
    function _DeleteMetadataTypeInput() {
        _class_call_check(this, _DeleteMetadataTypeInput);
    }
    _create_class(_DeleteMetadataTypeInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DeleteMetadataTypeInput.attributeTypeMap;
            }
        }
    ]);
    return _DeleteMetadataTypeInput;
}();
_DeleteMetadataTypeInput.discriminator = void 0;
_DeleteMetadataTypeInput.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "DeleteMetadataTypeInputTypeEnum",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    }
];
var DeleteMetadataTypeInput = _DeleteMetadataTypeInput;
// models/DeployCommitRequest.ts
var _DeployCommitRequest = /*#__PURE__*/ function() {
    function _DeployCommitRequest() {
        _class_call_check(this, _DeployCommitRequest);
    }
    _create_class(_DeployCommitRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DeployCommitRequest.attributeTypeMap;
            }
        }
    ]);
    return _DeployCommitRequest;
}();
_DeployCommitRequest.discriminator = void 0;
_DeployCommitRequest.attributeTypeMap = [
    {
        "name": "commit_id",
        "baseName": "commit_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "branch_name",
        "baseName": "branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "deploy_type",
        "baseName": "deploy_type",
        "type": "DeployCommitRequestDeployTypeEnum",
        "format": ""
    },
    {
        "name": "deploy_policy",
        "baseName": "deploy_policy",
        "type": "DeployCommitRequestDeployPolicyEnum",
        "format": ""
    }
];
var DeployCommitRequest = _DeployCommitRequest;
// models/DeployResponse.ts
var _DeployResponse = /*#__PURE__*/ function() {
    function _DeployResponse() {
        _class_call_check(this, _DeployResponse);
    }
    _create_class(_DeployResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _DeployResponse.attributeTypeMap;
            }
        }
    ]);
    return _DeployResponse;
}();
_DeployResponse.discriminator = void 0;
_DeployResponse.attributeTypeMap = [
    {
        "name": "file_name",
        "baseName": "file_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "string",
        "format": ""
    },
    {
        "name": "status_code",
        "baseName": "status_code",
        "type": "string",
        "format": ""
    },
    {
        "name": "status_message",
        "baseName": "status_message",
        "type": "string",
        "format": ""
    }
];
var DeployResponse = _DeployResponse;
// models/ErrorResponse.ts
var _ErrorResponse = /*#__PURE__*/ function() {
    function _ErrorResponse() {
        _class_call_check(this, _ErrorResponse);
    }
    _create_class(_ErrorResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ErrorResponse.attributeTypeMap;
            }
        }
    ]);
    return _ErrorResponse;
}();
_ErrorResponse.discriminator = void 0;
_ErrorResponse.attributeTypeMap = [
    {
        "name": "error",
        "baseName": "error",
        "type": "any",
        "format": ""
    }
];
var ErrorResponse = _ErrorResponse;
// models/ExcludeMetadataListItemInput.ts
var _ExcludeMetadataListItemInput = /*#__PURE__*/ function() {
    function _ExcludeMetadataListItemInput() {
        _class_call_check(this, _ExcludeMetadataListItemInput);
    }
    _create_class(_ExcludeMetadataListItemInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ExcludeMetadataListItemInput.attributeTypeMap;
            }
        }
    ]);
    return _ExcludeMetadataListItemInput;
}();
_ExcludeMetadataListItemInput.discriminator = void 0;
_ExcludeMetadataListItemInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "ExcludeMetadataListItemInputTypeEnum",
        "format": ""
    }
];
var ExcludeMetadataListItemInput = _ExcludeMetadataListItemInput;
// models/ExportAnswerReportRequest.ts
var _ExportAnswerReportRequest = /*#__PURE__*/ function() {
    function _ExportAnswerReportRequest() {
        _class_call_check(this, _ExportAnswerReportRequest);
    }
    _create_class(_ExportAnswerReportRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ExportAnswerReportRequest.attributeTypeMap;
            }
        }
    ]);
    return _ExportAnswerReportRequest;
}();
_ExportAnswerReportRequest.discriminator = void 0;
_ExportAnswerReportRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "file_format",
        "baseName": "file_format",
        "type": "ExportAnswerReportRequestFileFormatEnum",
        "format": ""
    },
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var ExportAnswerReportRequest = _ExportAnswerReportRequest;
// models/ExportLiveboardReportRequest.ts
var _ExportLiveboardReportRequest = /*#__PURE__*/ function() {
    function _ExportLiveboardReportRequest() {
        _class_call_check(this, _ExportLiveboardReportRequest);
    }
    _create_class(_ExportLiveboardReportRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ExportLiveboardReportRequest.attributeTypeMap;
            }
        }
    ]);
    return _ExportLiveboardReportRequest;
}();
_ExportLiveboardReportRequest.discriminator = void 0;
_ExportLiveboardReportRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "visualization_identifiers",
        "baseName": "visualization_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "transient_content",
        "baseName": "transient_content",
        "type": "string",
        "format": ""
    },
    {
        "name": "file_format",
        "baseName": "file_format",
        "type": "ExportLiveboardReportRequestFileFormatEnum",
        "format": ""
    },
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "pdf_options",
        "baseName": "pdf_options",
        "type": "PdfOptionsInput",
        "format": ""
    },
    {
        "name": "png_options",
        "baseName": "png_options",
        "type": "PngOptionsInput",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var ExportLiveboardReportRequest = _ExportLiveboardReportRequest;
// models/ExportMetadataTMLRequest.ts
var _ExportMetadataTMLRequest = /*#__PURE__*/ function() {
    function _ExportMetadataTMLRequest() {
        _class_call_check(this, _ExportMetadataTMLRequest);
    }
    _create_class(_ExportMetadataTMLRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ExportMetadataTMLRequest.attributeTypeMap;
            }
        }
    ]);
    return _ExportMetadataTMLRequest;
}();
_ExportMetadataTMLRequest.discriminator = void 0;
_ExportMetadataTMLRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<ExportMetadataTypeInput>",
        "format": ""
    },
    {
        "name": "export_associated",
        "baseName": "export_associated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "export_fqn",
        "baseName": "export_fqn",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "edoc_format",
        "baseName": "edoc_format",
        "type": "ExportMetadataTMLRequestEdocFormatEnum",
        "format": ""
    }
];
var ExportMetadataTMLRequest = _ExportMetadataTMLRequest;
// models/ExportMetadataTypeInput.ts
var _ExportMetadataTypeInput = /*#__PURE__*/ function() {
    function _ExportMetadataTypeInput() {
        _class_call_check(this, _ExportMetadataTypeInput);
    }
    _create_class(_ExportMetadataTypeInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ExportMetadataTypeInput.attributeTypeMap;
            }
        }
    ]);
    return _ExportMetadataTypeInput;
}();
_ExportMetadataTypeInput.discriminator = void 0;
_ExportMetadataTypeInput.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "ExportMetadataTypeInputTypeEnum",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    }
];
var ExportMetadataTypeInput = _ExportMetadataTypeInput;
// models/FavoriteMetadataInput.ts
var _FavoriteMetadataInput = /*#__PURE__*/ function() {
    function _FavoriteMetadataInput() {
        _class_call_check(this, _FavoriteMetadataInput);
    }
    _create_class(_FavoriteMetadataInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FavoriteMetadataInput.attributeTypeMap;
            }
        }
    ]);
    return _FavoriteMetadataInput;
}();
_FavoriteMetadataInput.discriminator = void 0;
_FavoriteMetadataInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "FavoriteMetadataInputTypeEnum",
        "format": ""
    }
];
var FavoriteMetadataInput = _FavoriteMetadataInput;
// models/FavoriteMetadataItem.ts
var _FavoriteMetadataItem = /*#__PURE__*/ function() {
    function _FavoriteMetadataItem() {
        _class_call_check(this, _FavoriteMetadataItem);
    }
    _create_class(_FavoriteMetadataItem, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FavoriteMetadataItem.attributeTypeMap;
            }
        }
    ]);
    return _FavoriteMetadataItem;
}();
_FavoriteMetadataItem.discriminator = void 0;
_FavoriteMetadataItem.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "FavoriteMetadataItemTypeEnum",
        "format": ""
    }
];
var FavoriteMetadataItem = _FavoriteMetadataItem;
// models/FavoriteObjectOptionsInput.ts
var _FavoriteObjectOptionsInput = /*#__PURE__*/ function() {
    function _FavoriteObjectOptionsInput() {
        _class_call_check(this, _FavoriteObjectOptionsInput);
    }
    _create_class(_FavoriteObjectOptionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FavoriteObjectOptionsInput.attributeTypeMap;
            }
        }
    ]);
    return _FavoriteObjectOptionsInput;
}();
_FavoriteObjectOptionsInput.discriminator = void 0;
_FavoriteObjectOptionsInput.attributeTypeMap = [
    {
        "name": "include",
        "baseName": "include",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var FavoriteObjectOptionsInput = _FavoriteObjectOptionsInput;
// models/FetchAnswerDataRequest.ts
var _FetchAnswerDataRequest = /*#__PURE__*/ function() {
    function _FetchAnswerDataRequest() {
        _class_call_check(this, _FetchAnswerDataRequest);
    }
    _create_class(_FetchAnswerDataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchAnswerDataRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchAnswerDataRequest;
}();
_FetchAnswerDataRequest.discriminator = void 0;
_FetchAnswerDataRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_format",
        "baseName": "data_format",
        "type": "FetchAnswerDataRequestDataFormatEnum",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var FetchAnswerDataRequest = _FetchAnswerDataRequest;
// models/FetchAnswerSqlQueryRequest.ts
var _FetchAnswerSqlQueryRequest = /*#__PURE__*/ function() {
    function _FetchAnswerSqlQueryRequest() {
        _class_call_check(this, _FetchAnswerSqlQueryRequest);
    }
    _create_class(_FetchAnswerSqlQueryRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchAnswerSqlQueryRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchAnswerSqlQueryRequest;
}();
_FetchAnswerSqlQueryRequest.discriminator = void 0;
_FetchAnswerSqlQueryRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    }
];
var FetchAnswerSqlQueryRequest = _FetchAnswerSqlQueryRequest;
// models/FetchConnectionDiffStatusResponse.ts
var _FetchConnectionDiffStatusResponse = /*#__PURE__*/ function() {
    function _FetchConnectionDiffStatusResponse() {
        _class_call_check(this, _FetchConnectionDiffStatusResponse);
    }
    _create_class(_FetchConnectionDiffStatusResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchConnectionDiffStatusResponse.attributeTypeMap;
            }
        }
    ]);
    return _FetchConnectionDiffStatusResponse;
}();
_FetchConnectionDiffStatusResponse.discriminator = void 0;
_FetchConnectionDiffStatusResponse.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "boolean",
        "format": ""
    }
];
var FetchConnectionDiffStatusResponse = _FetchConnectionDiffStatusResponse;
// models/FetchLiveboardDataRequest.ts
var _FetchLiveboardDataRequest = /*#__PURE__*/ function() {
    function _FetchLiveboardDataRequest() {
        _class_call_check(this, _FetchLiveboardDataRequest);
    }
    _create_class(_FetchLiveboardDataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchLiveboardDataRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchLiveboardDataRequest;
}();
_FetchLiveboardDataRequest.discriminator = void 0;
_FetchLiveboardDataRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "visualization_identifiers",
        "baseName": "visualization_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "transient_content",
        "baseName": "transient_content",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_format",
        "baseName": "data_format",
        "type": "FetchLiveboardDataRequestDataFormatEnum",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var FetchLiveboardDataRequest = _FetchLiveboardDataRequest;
// models/FetchLiveboardSqlQueryRequest.ts
var _FetchLiveboardSqlQueryRequest = /*#__PURE__*/ function() {
    function _FetchLiveboardSqlQueryRequest() {
        _class_call_check(this, _FetchLiveboardSqlQueryRequest);
    }
    _create_class(_FetchLiveboardSqlQueryRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchLiveboardSqlQueryRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchLiveboardSqlQueryRequest;
}();
_FetchLiveboardSqlQueryRequest.discriminator = void 0;
_FetchLiveboardSqlQueryRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "visualization_identifiers",
        "baseName": "visualization_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var FetchLiveboardSqlQueryRequest = _FetchLiveboardSqlQueryRequest;
// models/FetchLogsRequest.ts
var _FetchLogsRequest = /*#__PURE__*/ function() {
    function _FetchLogsRequest() {
        _class_call_check(this, _FetchLogsRequest);
    }
    _create_class(_FetchLogsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchLogsRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchLogsRequest;
}();
_FetchLogsRequest.discriminator = void 0;
_FetchLogsRequest.attributeTypeMap = [
    {
        "name": "log_type",
        "baseName": "log_type",
        "type": "FetchLogsRequestLogTypeEnum",
        "format": ""
    },
    {
        "name": "start_epoch_time_in_millis",
        "baseName": "start_epoch_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "end_epoch_time_in_millis",
        "baseName": "end_epoch_time_in_millis",
        "type": "number",
        "format": "float"
    }
];
var FetchLogsRequest = _FetchLogsRequest;
// models/FetchPermissionsOfPrincipalsRequest.ts
var _FetchPermissionsOfPrincipalsRequest = /*#__PURE__*/ function() {
    function _FetchPermissionsOfPrincipalsRequest() {
        _class_call_check(this, _FetchPermissionsOfPrincipalsRequest);
    }
    _create_class(_FetchPermissionsOfPrincipalsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchPermissionsOfPrincipalsRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchPermissionsOfPrincipalsRequest;
}();
_FetchPermissionsOfPrincipalsRequest.discriminator = void 0;
_FetchPermissionsOfPrincipalsRequest.attributeTypeMap = [
    {
        "name": "principals",
        "baseName": "principals",
        "type": "Array<PrincipalsInput>",
        "format": ""
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<PermissionsMetadataTypeInput>",
        "format": ""
    }
];
var FetchPermissionsOfPrincipalsRequest = _FetchPermissionsOfPrincipalsRequest;
// models/FetchPermissionsOnMetadataRequest.ts
var _FetchPermissionsOnMetadataRequest = /*#__PURE__*/ function() {
    function _FetchPermissionsOnMetadataRequest() {
        _class_call_check(this, _FetchPermissionsOnMetadataRequest);
    }
    _create_class(_FetchPermissionsOnMetadataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FetchPermissionsOnMetadataRequest.attributeTypeMap;
            }
        }
    ]);
    return _FetchPermissionsOnMetadataRequest;
}();
_FetchPermissionsOnMetadataRequest.discriminator = void 0;
_FetchPermissionsOnMetadataRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<PermissionsMetadataTypeInput>",
        "format": ""
    },
    {
        "name": "principals",
        "baseName": "principals",
        "type": "Array<PrincipalsInput>",
        "format": ""
    },
    {
        "name": "include_dependent_objects",
        "baseName": "include_dependent_objects",
        "type": "boolean",
        "format": ""
    }
];
var FetchPermissionsOnMetadataRequest = _FetchPermissionsOnMetadataRequest;
// models/ForceLogoutUsersRequest.ts
var _ForceLogoutUsersRequest = /*#__PURE__*/ function() {
    function _ForceLogoutUsersRequest() {
        _class_call_check(this, _ForceLogoutUsersRequest);
    }
    _create_class(_ForceLogoutUsersRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ForceLogoutUsersRequest.attributeTypeMap;
            }
        }
    ]);
    return _ForceLogoutUsersRequest;
}();
_ForceLogoutUsersRequest.discriminator = void 0;
_ForceLogoutUsersRequest.attributeTypeMap = [
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var ForceLogoutUsersRequest = _ForceLogoutUsersRequest;
// models/Frequency.ts
var _Frequency = /*#__PURE__*/ function() {
    function _Frequency() {
        _class_call_check(this, _Frequency);
    }
    _create_class(_Frequency, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Frequency.attributeTypeMap;
            }
        }
    ]);
    return _Frequency;
}();
_Frequency.discriminator = void 0;
_Frequency.attributeTypeMap = [
    {
        "name": "cron_expression",
        "baseName": "cron_expression",
        "type": "CronExpression",
        "format": ""
    }
];
var Frequency = _Frequency;
// models/FrequencyInput.ts
var _FrequencyInput = /*#__PURE__*/ function() {
    function _FrequencyInput() {
        _class_call_check(this, _FrequencyInput);
    }
    _create_class(_FrequencyInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _FrequencyInput.attributeTypeMap;
            }
        }
    ]);
    return _FrequencyInput;
}();
_FrequencyInput.discriminator = void 0;
_FrequencyInput.attributeTypeMap = [
    {
        "name": "cron_expression",
        "baseName": "cron_expression",
        "type": "CronExpressionInput",
        "format": ""
    }
];
var FrequencyInput = _FrequencyInput;
// models/GenericInfo.ts
var _GenericInfo = /*#__PURE__*/ function() {
    function _GenericInfo() {
        _class_call_check(this, _GenericInfo);
    }
    _create_class(_GenericInfo, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _GenericInfo.attributeTypeMap;
            }
        }
    ]);
    return _GenericInfo;
}();
_GenericInfo.discriminator = void 0;
_GenericInfo.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var GenericInfo = _GenericInfo;
// models/GetFullAccessTokenRequest.ts
var _GetFullAccessTokenRequest = /*#__PURE__*/ function() {
    function _GetFullAccessTokenRequest() {
        _class_call_check(this, _GetFullAccessTokenRequest);
    }
    _create_class(_GetFullAccessTokenRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _GetFullAccessTokenRequest.attributeTypeMap;
            }
        }
    ]);
    return _GetFullAccessTokenRequest;
}();
_GetFullAccessTokenRequest.discriminator = void 0;
_GetFullAccessTokenRequest.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "secret_key",
        "baseName": "secret_key",
        "type": "string",
        "format": ""
    },
    {
        "name": "validity_time_in_sec",
        "baseName": "validity_time_in_sec",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "org_id",
        "baseName": "org_id",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "auto_create",
        "baseName": "auto_create",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "jwt_user_options",
        "baseName": "jwt_user_options",
        "type": "JWTUserOptions",
        "format": ""
    }
];
var GetFullAccessTokenRequest = _GetFullAccessTokenRequest;
// models/GetObjectAccessTokenRequest.ts
var _GetObjectAccessTokenRequest = /*#__PURE__*/ function() {
    function _GetObjectAccessTokenRequest() {
        _class_call_check(this, _GetObjectAccessTokenRequest);
    }
    _create_class(_GetObjectAccessTokenRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _GetObjectAccessTokenRequest.attributeTypeMap;
            }
        }
    ]);
    return _GetObjectAccessTokenRequest;
}();
_GetObjectAccessTokenRequest.discriminator = void 0;
_GetObjectAccessTokenRequest.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    },
    {
        "name": "object_id",
        "baseName": "object_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "secret_key",
        "baseName": "secret_key",
        "type": "string",
        "format": ""
    },
    {
        "name": "validity_time_in_sec",
        "baseName": "validity_time_in_sec",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "org_id",
        "baseName": "org_id",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "auto_create",
        "baseName": "auto_create",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "jwt_user_options",
        "baseName": "jwt_user_options",
        "type": "JWTUserOptions",
        "format": ""
    }
];
var GetObjectAccessTokenRequest = _GetObjectAccessTokenRequest;
// models/GetTokenResponse.ts
var _GetTokenResponse = /*#__PURE__*/ function() {
    function _GetTokenResponse() {
        _class_call_check(this, _GetTokenResponse);
    }
    _create_class(_GetTokenResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _GetTokenResponse.attributeTypeMap;
            }
        }
    ]);
    return _GetTokenResponse;
}();
_GetTokenResponse.discriminator = void 0;
_GetTokenResponse.attributeTypeMap = [
    {
        "name": "token",
        "baseName": "token",
        "type": "string",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "expiration_time_in_millis",
        "baseName": "expiration_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "valid_for_user_id",
        "baseName": "valid_for_user_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "valid_for_username",
        "baseName": "valid_for_username",
        "type": "string",
        "format": ""
    }
];
var GetTokenResponse = _GetTokenResponse;
// models/GroupsImportListInput.ts
var _GroupsImportListInput = /*#__PURE__*/ function() {
    function _GroupsImportListInput() {
        _class_call_check(this, _GroupsImportListInput);
    }
    _create_class(_GroupsImportListInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _GroupsImportListInput.attributeTypeMap;
            }
        }
    ]);
    return _GroupsImportListInput;
}();
_GroupsImportListInput.discriminator = void 0;
_GroupsImportListInput.attributeTypeMap = [
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "group_identifier",
        "baseName": "group_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "default_liveboard_identifiers",
        "baseName": "default_liveboard_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<GroupsImportListInputPrivilegesEnum>",
        "format": ""
    },
    {
        "name": "sub_group_identifiers",
        "baseName": "sub_group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "GroupsImportListInputTypeEnum",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "GroupsImportListInputVisibilityEnum",
        "format": ""
    }
];
var GroupsImportListInput = _GroupsImportListInput;
// models/ImportMetadataTMLRequest.ts
var _ImportMetadataTMLRequest = /*#__PURE__*/ function() {
    function _ImportMetadataTMLRequest() {
        _class_call_check(this, _ImportMetadataTMLRequest);
    }
    _create_class(_ImportMetadataTMLRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportMetadataTMLRequest.attributeTypeMap;
            }
        }
    ]);
    return _ImportMetadataTMLRequest;
}();
_ImportMetadataTMLRequest.discriminator = void 0;
_ImportMetadataTMLRequest.attributeTypeMap = [
    {
        "name": "metadata_tmls",
        "baseName": "metadata_tmls",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "import_policy",
        "baseName": "import_policy",
        "type": "ImportMetadataTMLRequestImportPolicyEnum",
        "format": ""
    },
    {
        "name": "create_new",
        "baseName": "create_new",
        "type": "boolean",
        "format": ""
    }
];
var ImportMetadataTMLRequest = _ImportMetadataTMLRequest;
// models/ImportUser.ts
var _ImportUser = /*#__PURE__*/ function() {
    function _ImportUser() {
        _class_call_check(this, _ImportUser);
    }
    _create_class(_ImportUser, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportUser.attributeTypeMap;
            }
        }
    ]);
    return _ImportUser;
}();
_ImportUser.discriminator = void 0;
_ImportUser.attributeTypeMap = [
    {
        "name": "user_identifier",
        "baseName": "user_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "account_type",
        "baseName": "account_type",
        "type": "ImportUserAccountTypeEnum",
        "format": ""
    },
    {
        "name": "account_status",
        "baseName": "account_status",
        "type": "ImportUserAccountStatusEnum",
        "format": ""
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "ImportUserVisibilityEnum",
        "format": ""
    },
    {
        "name": "notify_on_share",
        "baseName": "notify_on_share",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "show_onboarding_experience",
        "baseName": "show_onboarding_experience",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "onboarding_experience_completed",
        "baseName": "onboarding_experience_completed",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "home_liveboard_identifier",
        "baseName": "home_liveboard_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "favorite_metadata",
        "baseName": "favorite_metadata",
        "type": "Array<FavoriteMetadataInput>",
        "format": ""
    }
];
var ImportUser = _ImportUser;
// models/ImportUserGroupsRequest.ts
var _ImportUserGroupsRequest = /*#__PURE__*/ function() {
    function _ImportUserGroupsRequest() {
        _class_call_check(this, _ImportUserGroupsRequest);
    }
    _create_class(_ImportUserGroupsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportUserGroupsRequest.attributeTypeMap;
            }
        }
    ]);
    return _ImportUserGroupsRequest;
}();
_ImportUserGroupsRequest.discriminator = void 0;
_ImportUserGroupsRequest.attributeTypeMap = [
    {
        "name": "groups",
        "baseName": "groups",
        "type": "Array<GroupsImportListInput>",
        "format": ""
    },
    {
        "name": "delete_unspecified_groups",
        "baseName": "delete_unspecified_groups",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "dry_run",
        "baseName": "dry_run",
        "type": "boolean",
        "format": ""
    }
];
var ImportUserGroupsRequest = _ImportUserGroupsRequest;
// models/ImportUserGroupsResponse.ts
var _ImportUserGroupsResponse = /*#__PURE__*/ function() {
    function _ImportUserGroupsResponse() {
        _class_call_check(this, _ImportUserGroupsResponse);
    }
    _create_class(_ImportUserGroupsResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportUserGroupsResponse.attributeTypeMap;
            }
        }
    ]);
    return _ImportUserGroupsResponse;
}();
_ImportUserGroupsResponse.discriminator = void 0;
_ImportUserGroupsResponse.attributeTypeMap = [
    {
        "name": "groups_added",
        "baseName": "groups_added",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "groups_deleted",
        "baseName": "groups_deleted",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "groups_updated",
        "baseName": "groups_updated",
        "type": "Array<UserGroup>",
        "format": ""
    }
];
var ImportUserGroupsResponse = _ImportUserGroupsResponse;
// models/ImportUserType.ts
var _ImportUserType = /*#__PURE__*/ function() {
    function _ImportUserType() {
        _class_call_check(this, _ImportUserType);
    }
    _create_class(_ImportUserType, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportUserType.attributeTypeMap;
            }
        }
    ]);
    return _ImportUserType;
}();
_ImportUserType.discriminator = void 0;
_ImportUserType.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var ImportUserType = _ImportUserType;
// models/ImportUsersRequest.ts
var _ImportUsersRequest = /*#__PURE__*/ function() {
    function _ImportUsersRequest() {
        _class_call_check(this, _ImportUsersRequest);
    }
    _create_class(_ImportUsersRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportUsersRequest.attributeTypeMap;
            }
        }
    ]);
    return _ImportUsersRequest;
}();
_ImportUsersRequest.discriminator = void 0;
_ImportUsersRequest.attributeTypeMap = [
    {
        "name": "users",
        "baseName": "users",
        "type": "Array<ImportUser>",
        "format": ""
    },
    {
        "name": "default_password",
        "baseName": "default_password",
        "type": "string",
        "format": ""
    },
    {
        "name": "dry_run",
        "baseName": "dry_run",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "delete_unspecified_users",
        "baseName": "delete_unspecified_users",
        "type": "boolean",
        "format": ""
    }
];
var ImportUsersRequest = _ImportUsersRequest;
// models/ImportUsersResponse.ts
var _ImportUsersResponse = /*#__PURE__*/ function() {
    function _ImportUsersResponse() {
        _class_call_check(this, _ImportUsersResponse);
    }
    _create_class(_ImportUsersResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ImportUsersResponse.attributeTypeMap;
            }
        }
    ]);
    return _ImportUsersResponse;
}();
_ImportUsersResponse.discriminator = void 0;
_ImportUsersResponse.attributeTypeMap = [
    {
        "name": "users_added",
        "baseName": "users_added",
        "type": "Array<ImportUserType>",
        "format": ""
    },
    {
        "name": "users_updated",
        "baseName": "users_updated",
        "type": "Array<ImportUserType>",
        "format": ""
    },
    {
        "name": "users_deleted",
        "baseName": "users_deleted",
        "type": "Array<ImportUserType>",
        "format": ""
    }
];
var ImportUsersResponse = _ImportUsersResponse;
// models/JWTMetadataObject.ts
var _JWTMetadataObject = /*#__PURE__*/ function() {
    function _JWTMetadataObject() {
        _class_call_check(this, _JWTMetadataObject);
    }
    _create_class(_JWTMetadataObject, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _JWTMetadataObject.attributeTypeMap;
            }
        }
    ]);
    return _JWTMetadataObject;
}();
_JWTMetadataObject.discriminator = void 0;
_JWTMetadataObject.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "JWTMetadataObjectTypeEnum",
        "format": ""
    }
];
var JWTMetadataObject = _JWTMetadataObject;
// models/JWTParameter.ts
var _JWTParameter = /*#__PURE__*/ function() {
    function _JWTParameter() {
        _class_call_check(this, _JWTParameter);
    }
    _create_class(_JWTParameter, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _JWTParameter.attributeTypeMap;
            }
        }
    ]);
    return _JWTParameter;
}();
_JWTParameter.discriminator = void 0;
_JWTParameter.attributeTypeMap = [
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var JWTParameter = _JWTParameter;
// models/JWTUserOptions.ts
var _JWTUserOptions = /*#__PURE__*/ function() {
    function _JWTUserOptions() {
        _class_call_check(this, _JWTUserOptions);
    }
    _create_class(_JWTUserOptions, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _JWTUserOptions.attributeTypeMap;
            }
        }
    ]);
    return _JWTUserOptions;
}();
_JWTUserOptions.discriminator = void 0;
_JWTUserOptions.attributeTypeMap = [
    {
        "name": "parameters",
        "baseName": "parameters",
        "type": "Array<JWTUserOptionsParametersInner>",
        "format": ""
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<JWTMetadataObject>",
        "format": ""
    }
];
var JWTUserOptions = _JWTUserOptions;
// models/JWTUserOptionsParametersInner.ts
var _JWTUserOptionsParametersInner = /*#__PURE__*/ function() {
    function _JWTUserOptionsParametersInner() {
        _class_call_check(this, _JWTUserOptionsParametersInner);
    }
    _create_class(_JWTUserOptionsParametersInner, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _JWTUserOptionsParametersInner.attributeTypeMap;
            }
        }
    ]);
    return _JWTUserOptionsParametersInner;
}();
_JWTUserOptionsParametersInner.discriminator = void 0;
_JWTUserOptionsParametersInner.attributeTypeMap = [
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var JWTUserOptionsParametersInner = _JWTUserOptionsParametersInner;
// models/LiveboardContent.ts
var _LiveboardContent = /*#__PURE__*/ function() {
    function _LiveboardContent() {
        _class_call_check(this, _LiveboardContent);
    }
    _create_class(_LiveboardContent, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _LiveboardContent.attributeTypeMap;
            }
        }
    ]);
    return _LiveboardContent;
}();
_LiveboardContent.discriminator = void 0;
_LiveboardContent.attributeTypeMap = [
    {
        "name": "available_data_row_count",
        "baseName": "available_data_row_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "column_names",
        "baseName": "column_names",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "data_rows",
        "baseName": "data_rows",
        "type": "Array<any>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "returned_data_row_count",
        "baseName": "returned_data_row_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "sampling_ratio",
        "baseName": "sampling_ratio",
        "type": "number",
        "format": "float"
    },
    {
        "name": "visualization_id",
        "baseName": "visualization_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "visualization_name",
        "baseName": "visualization_name",
        "type": "string",
        "format": ""
    }
];
var LiveboardContent = _LiveboardContent;
// models/LiveboardDataResponse.ts
var _LiveboardDataResponse = /*#__PURE__*/ function() {
    function _LiveboardDataResponse() {
        _class_call_check(this, _LiveboardDataResponse);
    }
    _create_class(_LiveboardDataResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _LiveboardDataResponse.attributeTypeMap;
            }
        }
    ]);
    return _LiveboardDataResponse;
}();
_LiveboardDataResponse.discriminator = void 0;
_LiveboardDataResponse.attributeTypeMap = [
    {
        "name": "metadata_id",
        "baseName": "metadata_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "contents",
        "baseName": "contents",
        "type": "Array<LiveboardContent>",
        "format": ""
    }
];
var LiveboardDataResponse = _LiveboardDataResponse;
// models/LiveboardOptions.ts
var _LiveboardOptions = /*#__PURE__*/ function() {
    function _LiveboardOptions() {
        _class_call_check(this, _LiveboardOptions);
    }
    _create_class(_LiveboardOptions, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _LiveboardOptions.attributeTypeMap;
            }
        }
    ]);
    return _LiveboardOptions;
}();
_LiveboardOptions.discriminator = void 0;
_LiveboardOptions.attributeTypeMap = [
    {
        "name": "visualization_identifiers",
        "baseName": "visualization_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var LiveboardOptions = _LiveboardOptions;
// models/LiveboardOptionsInput.ts
var _LiveboardOptionsInput = /*#__PURE__*/ function() {
    function _LiveboardOptionsInput() {
        _class_call_check(this, _LiveboardOptionsInput);
    }
    _create_class(_LiveboardOptionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _LiveboardOptionsInput.attributeTypeMap;
            }
        }
    ]);
    return _LiveboardOptionsInput;
}();
_LiveboardOptionsInput.discriminator = void 0;
_LiveboardOptionsInput.attributeTypeMap = [
    {
        "name": "visualization_identifiers",
        "baseName": "visualization_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var LiveboardOptionsInput = _LiveboardOptionsInput;
// models/LogResponse.ts
var _LogResponse = /*#__PURE__*/ function() {
    function _LogResponse() {
        _class_call_check(this, _LogResponse);
    }
    _create_class(_LogResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _LogResponse.attributeTypeMap;
            }
        }
    ]);
    return _LogResponse;
}();
_LogResponse.discriminator = void 0;
_LogResponse.attributeTypeMap = [
    {
        "name": "date",
        "baseName": "date",
        "type": "string",
        "format": ""
    },
    {
        "name": "log",
        "baseName": "log",
        "type": "string",
        "format": ""
    }
];
var LogResponse = _LogResponse;
// models/LoginRequest.ts
var _LoginRequest = /*#__PURE__*/ function() {
    function _LoginRequest() {
        _class_call_check(this, _LoginRequest);
    }
    _create_class(_LoginRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _LoginRequest.attributeTypeMap;
            }
        }
    ]);
    return _LoginRequest;
}();
_LoginRequest.discriminator = void 0;
_LoginRequest.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string",
        "format": ""
    },
    {
        "name": "org_identifier",
        "baseName": "org_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "remember_me",
        "baseName": "remember_me",
        "type": "boolean",
        "format": ""
    }
];
var LoginRequest = _LoginRequest;
// models/MetadataAssociationItem.ts
var _MetadataAssociationItem = /*#__PURE__*/ function() {
    function _MetadataAssociationItem() {
        _class_call_check(this, _MetadataAssociationItem);
    }
    _create_class(_MetadataAssociationItem, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataAssociationItem.attributeTypeMap;
            }
        }
    ]);
    return _MetadataAssociationItem;
}();
_MetadataAssociationItem.discriminator = void 0;
_MetadataAssociationItem.attributeTypeMap = [
    {
        "name": "action_config",
        "baseName": "action_config",
        "type": "ActionConfig",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string",
        "format": ""
    }
];
var MetadataAssociationItem = _MetadataAssociationItem;
// models/MetadataInput.ts
var _MetadataInput = /*#__PURE__*/ function() {
    function _MetadataInput() {
        _class_call_check(this, _MetadataInput);
    }
    _create_class(_MetadataInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataInput.attributeTypeMap;
            }
        }
    ]);
    return _MetadataInput;
}();
_MetadataInput.discriminator = void 0;
_MetadataInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "MetadataInputTypeEnum",
        "format": ""
    }
];
var MetadataInput = _MetadataInput;
// models/MetadataListItemInput.ts
var _MetadataListItemInput = /*#__PURE__*/ function() {
    function _MetadataListItemInput() {
        _class_call_check(this, _MetadataListItemInput);
    }
    _create_class(_MetadataListItemInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataListItemInput.attributeTypeMap;
            }
        }
    ]);
    return _MetadataListItemInput;
}();
_MetadataListItemInput.discriminator = void 0;
_MetadataListItemInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "name_pattern",
        "baseName": "name_pattern",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "MetadataListItemInputTypeEnum",
        "format": ""
    }
];
var MetadataListItemInput = _MetadataListItemInput;
// models/MetadataObject.ts
var _MetadataObject = /*#__PURE__*/ function() {
    function _MetadataObject() {
        _class_call_check(this, _MetadataObject);
    }
    _create_class(_MetadataObject, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataObject.attributeTypeMap;
            }
        }
    ]);
    return _MetadataObject;
}();
_MetadataObject.discriminator = void 0;
_MetadataObject.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "MetadataObjectTypeEnum",
        "format": ""
    }
];
var MetadataObject = _MetadataObject;
// models/MetadataResponse.ts
var _MetadataResponse = /*#__PURE__*/ function() {
    function _MetadataResponse() {
        _class_call_check(this, _MetadataResponse);
    }
    _create_class(_MetadataResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataResponse.attributeTypeMap;
            }
        }
    ]);
    return _MetadataResponse;
}();
_MetadataResponse.discriminator = void 0;
_MetadataResponse.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "MetadataResponseTypeEnum",
        "format": ""
    }
];
var MetadataResponse = _MetadataResponse;
// models/MetadataSearchResponse.ts
var _MetadataSearchResponse = /*#__PURE__*/ function() {
    function _MetadataSearchResponse() {
        _class_call_check(this, _MetadataSearchResponse);
    }
    _create_class(_MetadataSearchResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataSearchResponse.attributeTypeMap;
            }
        }
    ]);
    return _MetadataSearchResponse;
}();
_MetadataSearchResponse.discriminator = void 0;
_MetadataSearchResponse.attributeTypeMap = [
    {
        "name": "metadata_id",
        "baseName": "metadata_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "MetadataSearchResponseMetadataTypeEnum",
        "format": ""
    },
    {
        "name": "dependent_objects",
        "baseName": "dependent_objects",
        "type": "any",
        "format": ""
    },
    {
        "name": "incomplete_objects",
        "baseName": "incomplete_objects",
        "type": "Array<any>",
        "format": ""
    },
    {
        "name": "metadata_detail",
        "baseName": "metadata_detail",
        "type": "any",
        "format": ""
    },
    {
        "name": "metadata_header",
        "baseName": "metadata_header",
        "type": "any",
        "format": ""
    },
    {
        "name": "visualization_headers",
        "baseName": "visualization_headers",
        "type": "Array<any>",
        "format": ""
    },
    {
        "name": "stats",
        "baseName": "stats",
        "type": "any",
        "format": ""
    }
];
var MetadataSearchResponse = _MetadataSearchResponse;
// models/MetadataSearchSortOptions.ts
var _MetadataSearchSortOptions = /*#__PURE__*/ function() {
    function _MetadataSearchSortOptions() {
        _class_call_check(this, _MetadataSearchSortOptions);
    }
    _create_class(_MetadataSearchSortOptions, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _MetadataSearchSortOptions.attributeTypeMap;
            }
        }
    ]);
    return _MetadataSearchSortOptions;
}();
_MetadataSearchSortOptions.discriminator = void 0;
_MetadataSearchSortOptions.attributeTypeMap = [
    {
        "name": "field_name",
        "baseName": "field_name",
        "type": "MetadataSearchSortOptionsFieldNameEnum",
        "format": ""
    },
    {
        "name": "order",
        "baseName": "order",
        "type": "MetadataSearchSortOptionsOrderEnum",
        "format": ""
    }
];
var MetadataSearchSortOptions = _MetadataSearchSortOptions;
// models/ModelTableList.ts
var _ModelTableList = /*#__PURE__*/ function() {
    function _ModelTableList() {
        _class_call_check(this, _ModelTableList);
    }
    _create_class(_ModelTableList, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ModelTableList.attributeTypeMap;
            }
        }
    ]);
    return _ModelTableList;
}();
_ModelTableList.discriminator = void 0;
_ModelTableList.attributeTypeMap = [
    {
        "name": "model_name",
        "baseName": "model_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "tables",
        "baseName": "tables",
        "type": "Array<string>",
        "format": ""
    }
];
var ModelTableList = _ModelTableList;
// models/ObjectIDAndName.ts
var _ObjectIDAndName = /*#__PURE__*/ function() {
    function _ObjectIDAndName() {
        _class_call_check(this, _ObjectIDAndName);
    }
    _create_class(_ObjectIDAndName, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ObjectIDAndName.attributeTypeMap;
            }
        }
    ]);
    return _ObjectIDAndName;
}();
_ObjectIDAndName.discriminator = void 0;
_ObjectIDAndName.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var ObjectIDAndName = _ObjectIDAndName;
// models/Org.ts
var _Org = /*#__PURE__*/ function() {
    function _Org() {
        _class_call_check(this, _Org);
    }
    _create_class(_Org, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Org.attributeTypeMap;
            }
        }
    ]);
    return _Org;
}();
_Org.discriminator = void 0;
_Org.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var Org = _Org;
// models/OrgResponse.ts
var _OrgResponse = /*#__PURE__*/ function() {
    function _OrgResponse() {
        _class_call_check(this, _OrgResponse);
    }
    _create_class(_OrgResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _OrgResponse.attributeTypeMap;
            }
        }
    ]);
    return _OrgResponse;
}();
_OrgResponse.discriminator = void 0;
_OrgResponse.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "OrgResponseStatusEnum",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "OrgResponseVisibilityEnum",
        "format": ""
    }
];
var OrgResponse = _OrgResponse;
// models/ParametersListItem.ts
var _ParametersListItem = /*#__PURE__*/ function() {
    function _ParametersListItem() {
        _class_call_check(this, _ParametersListItem);
    }
    _create_class(_ParametersListItem, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ParametersListItem.attributeTypeMap;
            }
        }
    ]);
    return _ParametersListItem;
}();
_ParametersListItem.discriminator = void 0;
_ParametersListItem.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string",
        "format": ""
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string",
        "format": ""
    }
];
var ParametersListItem = _ParametersListItem;
// models/ParametersListItemInput.ts
var _ParametersListItemInput = /*#__PURE__*/ function() {
    function _ParametersListItemInput() {
        _class_call_check(this, _ParametersListItemInput);
    }
    _create_class(_ParametersListItemInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ParametersListItemInput.attributeTypeMap;
            }
        }
    ]);
    return _ParametersListItemInput;
}();
_ParametersListItemInput.discriminator = void 0;
_ParametersListItemInput.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string",
        "format": ""
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string",
        "format": ""
    }
];
var ParametersListItemInput = _ParametersListItemInput;
// models/PdfOptions.ts
var _PdfOptions = /*#__PURE__*/ function() {
    function _PdfOptions() {
        _class_call_check(this, _PdfOptions);
    }
    _create_class(_PdfOptions, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PdfOptions.attributeTypeMap;
            }
        }
    ]);
    return _PdfOptions;
}();
_PdfOptions.discriminator = void 0;
_PdfOptions.attributeTypeMap = [
    {
        "name": "complete_liveboard",
        "baseName": "complete_liveboard",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_cover_page",
        "baseName": "include_cover_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_custom_logo",
        "baseName": "include_custom_logo",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_filter_page",
        "baseName": "include_filter_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_page_number",
        "baseName": "include_page_number",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "page_footer_text",
        "baseName": "page_footer_text",
        "type": "string",
        "format": ""
    },
    {
        "name": "page_orientation",
        "baseName": "page_orientation",
        "type": "string",
        "format": ""
    },
    {
        "name": "page_size",
        "baseName": "page_size",
        "type": "PdfOptionsPageSizeEnum",
        "format": ""
    },
    {
        "name": "truncate_table",
        "baseName": "truncate_table",
        "type": "boolean",
        "format": ""
    }
];
var PdfOptions = _PdfOptions;
// models/PdfOptionsInput.ts
var _PdfOptionsInput = /*#__PURE__*/ function() {
    function _PdfOptionsInput() {
        _class_call_check(this, _PdfOptionsInput);
    }
    _create_class(_PdfOptionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PdfOptionsInput.attributeTypeMap;
            }
        }
    ]);
    return _PdfOptionsInput;
}();
_PdfOptionsInput.discriminator = void 0;
_PdfOptionsInput.attributeTypeMap = [
    {
        "name": "include_cover_page",
        "baseName": "include_cover_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_custom_logo",
        "baseName": "include_custom_logo",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_filter_page",
        "baseName": "include_filter_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_page_number",
        "baseName": "include_page_number",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "page_orientation",
        "baseName": "page_orientation",
        "type": "PdfOptionsInputPageOrientationEnum",
        "format": ""
    },
    {
        "name": "truncate_table",
        "baseName": "truncate_table",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "page_footer_text",
        "baseName": "page_footer_text",
        "type": "string",
        "format": ""
    }
];
var PdfOptionsInput = _PdfOptionsInput;
// models/PermissionInput.ts
var _PermissionInput = /*#__PURE__*/ function() {
    function _PermissionInput() {
        _class_call_check(this, _PermissionInput);
    }
    _create_class(_PermissionInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PermissionInput.attributeTypeMap;
            }
        }
    ]);
    return _PermissionInput;
}();
_PermissionInput.discriminator = void 0;
_PermissionInput.attributeTypeMap = [
    {
        "name": "principal",
        "baseName": "principal",
        "type": "PrincipalsInput",
        "format": ""
    },
    {
        "name": "share_mode",
        "baseName": "share_mode",
        "type": "PermissionInputShareModeEnum",
        "format": ""
    }
];
var PermissionInput = _PermissionInput;
// models/PermissionsMetadataTypeInput.ts
var _PermissionsMetadataTypeInput = /*#__PURE__*/ function() {
    function _PermissionsMetadataTypeInput() {
        _class_call_check(this, _PermissionsMetadataTypeInput);
    }
    _create_class(_PermissionsMetadataTypeInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PermissionsMetadataTypeInput.attributeTypeMap;
            }
        }
    ]);
    return _PermissionsMetadataTypeInput;
}();
_PermissionsMetadataTypeInput.discriminator = void 0;
_PermissionsMetadataTypeInput.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "PermissionsMetadataTypeInputTypeEnum",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    }
];
var PermissionsMetadataTypeInput = _PermissionsMetadataTypeInput;
// models/PngOptionsInput.ts
var _PngOptionsInput = /*#__PURE__*/ function() {
    function _PngOptionsInput() {
        _class_call_check(this, _PngOptionsInput);
    }
    _create_class(_PngOptionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PngOptionsInput.attributeTypeMap;
            }
        }
    ]);
    return _PngOptionsInput;
}();
_PngOptionsInput.discriminator = void 0;
_PngOptionsInput.attributeTypeMap = [
    {
        "name": "include_cover_page",
        "baseName": "include_cover_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_filter_page",
        "baseName": "include_filter_page",
        "type": "boolean",
        "format": ""
    }
];
var PngOptionsInput = _PngOptionsInput;
// models/PrincipalsInput.ts
var _PrincipalsInput = /*#__PURE__*/ function() {
    function _PrincipalsInput() {
        _class_call_check(this, _PrincipalsInput);
    }
    _create_class(_PrincipalsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PrincipalsInput.attributeTypeMap;
            }
        }
    ]);
    return _PrincipalsInput;
}();
_PrincipalsInput.discriminator = void 0;
_PrincipalsInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "PrincipalsInputTypeEnum",
        "format": ""
    }
];
var PrincipalsInput = _PrincipalsInput;
// models/PrincipalsListItem.ts
var _PrincipalsListItem = /*#__PURE__*/ function() {
    function _PrincipalsListItem() {
        _class_call_check(this, _PrincipalsListItem);
    }
    _create_class(_PrincipalsListItem, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PrincipalsListItem.attributeTypeMap;
            }
        }
    ]);
    return _PrincipalsListItem;
}();
_PrincipalsListItem.discriminator = void 0;
_PrincipalsListItem.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string",
        "format": ""
    }
];
var PrincipalsListItem = _PrincipalsListItem;
// models/PrincipalsListItemInput.ts
var _PrincipalsListItemInput = /*#__PURE__*/ function() {
    function _PrincipalsListItemInput() {
        _class_call_check(this, _PrincipalsListItemInput);
    }
    _create_class(_PrincipalsListItemInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _PrincipalsListItemInput.attributeTypeMap;
            }
        }
    ]);
    return _PrincipalsListItemInput;
}();
_PrincipalsListItemInput.discriminator = void 0;
_PrincipalsListItemInput.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string",
        "format": ""
    }
];
var PrincipalsListItemInput = _PrincipalsListItemInput;
// models/RecipientDetails.ts
var _RecipientDetails = /*#__PURE__*/ function() {
    function _RecipientDetails() {
        _class_call_check(this, _RecipientDetails);
    }
    _create_class(_RecipientDetails, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RecipientDetails.attributeTypeMap;
            }
        }
    ]);
    return _RecipientDetails;
}();
_RecipientDetails.discriminator = void 0;
_RecipientDetails.attributeTypeMap = [
    {
        "name": "emails",
        "baseName": "emails",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "principals",
        "baseName": "principals",
        "type": "Array<PrincipalsListItem>",
        "format": ""
    }
];
var RecipientDetails = _RecipientDetails;
// models/RecipientDetailsInput.ts
var _RecipientDetailsInput = /*#__PURE__*/ function() {
    function _RecipientDetailsInput() {
        _class_call_check(this, _RecipientDetailsInput);
    }
    _create_class(_RecipientDetailsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RecipientDetailsInput.attributeTypeMap;
            }
        }
    ]);
    return _RecipientDetailsInput;
}();
_RecipientDetailsInput.discriminator = void 0;
_RecipientDetailsInput.attributeTypeMap = [
    {
        "name": "emails",
        "baseName": "emails",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "principals",
        "baseName": "principals",
        "type": "Array<PrincipalsListItemInput>",
        "format": ""
    }
];
var RecipientDetailsInput = _RecipientDetailsInput;
// models/RepoConfigObject.ts
var _RepoConfigObject = /*#__PURE__*/ function() {
    function _RepoConfigObject() {
        _class_call_check(this, _RepoConfigObject);
    }
    _create_class(_RepoConfigObject, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RepoConfigObject.attributeTypeMap;
            }
        }
    ]);
    return _RepoConfigObject;
}();
_RepoConfigObject.discriminator = void 0;
_RepoConfigObject.attributeTypeMap = [
    {
        "name": "repository_url",
        "baseName": "repository_url",
        "type": "string",
        "format": ""
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_branch_name",
        "baseName": "commit_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "branches",
        "baseName": "branches",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "enable_guid_mapping",
        "baseName": "enable_guid_mapping",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "configuration_branch_name",
        "baseName": "configuration_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "org",
        "baseName": "org",
        "type": "Org",
        "format": ""
    }
];
var RepoConfigObject = _RepoConfigObject;
// models/ResetUserPasswordRequest.ts
var _ResetUserPasswordRequest = /*#__PURE__*/ function() {
    function _ResetUserPasswordRequest() {
        _class_call_check(this, _ResetUserPasswordRequest);
    }
    _create_class(_ResetUserPasswordRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ResetUserPasswordRequest.attributeTypeMap;
            }
        }
    ]);
    return _ResetUserPasswordRequest;
}();
_ResetUserPasswordRequest.discriminator = void 0;
_ResetUserPasswordRequest.attributeTypeMap = [
    {
        "name": "new_password",
        "baseName": "new_password",
        "type": "string",
        "format": ""
    },
    {
        "name": "user_identifier",
        "baseName": "user_identifier",
        "type": "string",
        "format": ""
    }
];
var ResetUserPasswordRequest = _ResetUserPasswordRequest;
// models/ResponseActivationURL.ts
var _ResponseActivationURL = /*#__PURE__*/ function() {
    function _ResponseActivationURL() {
        _class_call_check(this, _ResponseActivationURL);
    }
    _create_class(_ResponseActivationURL, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ResponseActivationURL.attributeTypeMap;
            }
        }
    ]);
    return _ResponseActivationURL;
}();
_ResponseActivationURL.discriminator = void 0;
_ResponseActivationURL.attributeTypeMap = [
    {
        "name": "activation_link",
        "baseName": "activation_link",
        "type": "string",
        "format": ""
    }
];
var ResponseActivationURL = _ResponseActivationURL;
// models/ResponseCustomAction.ts
var _ResponseCustomAction = /*#__PURE__*/ function() {
    function _ResponseCustomAction() {
        _class_call_check(this, _ResponseCustomAction);
    }
    _create_class(_ResponseCustomAction, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ResponseCustomAction.attributeTypeMap;
            }
        }
    ]);
    return _ResponseCustomAction;
}();
_ResponseCustomAction.discriminator = void 0;
_ResponseCustomAction.attributeTypeMap = [
    {
        "name": "action_details",
        "baseName": "action_details",
        "type": "ActionDetails",
        "format": ""
    },
    {
        "name": "default_action_config",
        "baseName": "default_action_config",
        "type": "DefaultActionConfig",
        "format": ""
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_association",
        "baseName": "metadata_association",
        "type": "Array<MetadataAssociationItem>",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "user_groups",
        "baseName": "user_groups",
        "type": "Array<ObjectIDAndName>",
        "format": ""
    }
];
var ResponseCustomAction = _ResponseCustomAction;
// models/ResponseSchedule.ts
var _ResponseSchedule = /*#__PURE__*/ function() {
    function _ResponseSchedule() {
        _class_call_check(this, _ResponseSchedule);
    }
    _create_class(_ResponseSchedule, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ResponseSchedule.attributeTypeMap;
            }
        }
    ]);
    return _ResponseSchedule;
}();
_ResponseSchedule.discriminator = void 0;
_ResponseSchedule.attributeTypeMap = [
    {
        "name": "author",
        "baseName": "author",
        "type": "Author",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "any",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "file_format",
        "baseName": "file_format",
        "type": "string",
        "format": ""
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "Frequency",
        "format": ""
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "liveboard_options",
        "baseName": "liveboard_options",
        "type": "LiveboardOptions",
        "format": ""
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "MetadataResponse",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "pdf_options",
        "baseName": "pdf_options",
        "type": "PdfOptions",
        "format": ""
    },
    {
        "name": "recipient_details",
        "baseName": "recipient_details",
        "type": "RecipientDetails",
        "format": ""
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string",
        "format": ""
    },
    {
        "name": "time_zone",
        "baseName": "time_zone",
        "type": "string",
        "format": ""
    },
    {
        "name": "history_runs",
        "baseName": "history_runs",
        "type": "Array<ResponseScheduleRun>",
        "format": ""
    }
];
var ResponseSchedule = _ResponseSchedule;
// models/ResponseScheduleRun.ts
var _ResponseScheduleRun = /*#__PURE__*/ function() {
    function _ResponseScheduleRun() {
        _class_call_check(this, _ResponseScheduleRun);
    }
    _create_class(_ResponseScheduleRun, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ResponseScheduleRun.attributeTypeMap;
            }
        }
    ]);
    return _ResponseScheduleRun;
}();
_ResponseScheduleRun.discriminator = void 0;
_ResponseScheduleRun.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "start_time_in_millis",
        "baseName": "start_time_in_millis",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "end_time_in_millis",
        "baseName": "end_time_in_millis",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string",
        "format": ""
    },
    {
        "name": "detail",
        "baseName": "detail",
        "type": "string",
        "format": ""
    }
];
var ResponseScheduleRun = _ResponseScheduleRun;
// models/RevertCommitRequest.ts
var _RevertCommitRequest = /*#__PURE__*/ function() {
    function _RevertCommitRequest() {
        _class_call_check(this, _RevertCommitRequest);
    }
    _create_class(_RevertCommitRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RevertCommitRequest.attributeTypeMap;
            }
        }
    ]);
    return _RevertCommitRequest;
}();
_RevertCommitRequest.discriminator = void 0;
_RevertCommitRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<MetadataObject>",
        "format": ""
    },
    {
        "name": "branch_name",
        "baseName": "branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "revert_policy",
        "baseName": "revert_policy",
        "type": "RevertCommitRequestRevertPolicyEnum",
        "format": ""
    }
];
var RevertCommitRequest = _RevertCommitRequest;
// models/RevertResponse.ts
var _RevertResponse = /*#__PURE__*/ function() {
    function _RevertResponse() {
        _class_call_check(this, _RevertResponse);
    }
    _create_class(_RevertResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RevertResponse.attributeTypeMap;
            }
        }
    ]);
    return _RevertResponse;
}();
_RevertResponse.discriminator = void 0;
_RevertResponse.attributeTypeMap = [
    {
        "name": "committer",
        "baseName": "committer",
        "type": "CommiterType",
        "format": ""
    },
    {
        "name": "author",
        "baseName": "author",
        "type": "AuthorType",
        "format": ""
    },
    {
        "name": "comment",
        "baseName": "comment",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_time",
        "baseName": "commit_time",
        "type": "string",
        "format": ""
    },
    {
        "name": "commit_id",
        "baseName": "commit_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "branch",
        "baseName": "branch",
        "type": "string",
        "format": ""
    },
    {
        "name": "committed_files",
        "baseName": "committed_files",
        "type": "Array<CommitFileType>",
        "format": ""
    },
    {
        "name": "reverted_metadata",
        "baseName": "reverted_metadata",
        "type": "Array<RevertedMetadata>",
        "format": ""
    }
];
var RevertResponse = _RevertResponse;
// models/RevertedMetadata.ts
var _RevertedMetadata = /*#__PURE__*/ function() {
    function _RevertedMetadata() {
        _class_call_check(this, _RevertedMetadata);
    }
    _create_class(_RevertedMetadata, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RevertedMetadata.attributeTypeMap;
            }
        }
    ]);
    return _RevertedMetadata;
}();
_RevertedMetadata.discriminator = void 0;
_RevertedMetadata.attributeTypeMap = [
    {
        "name": "file_name",
        "baseName": "file_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "string",
        "format": ""
    },
    {
        "name": "status_code",
        "baseName": "status_code",
        "type": "string",
        "format": ""
    },
    {
        "name": "status_message",
        "baseName": "status_message",
        "type": "string",
        "format": ""
    }
];
var RevertedMetadata = _RevertedMetadata;
// models/RevokeTokenRequest.ts
var _RevokeTokenRequest = /*#__PURE__*/ function() {
    function _RevokeTokenRequest() {
        _class_call_check(this, _RevokeTokenRequest);
    }
    _create_class(_RevokeTokenRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RevokeTokenRequest.attributeTypeMap;
            }
        }
    ]);
    return _RevokeTokenRequest;
}();
_RevokeTokenRequest.discriminator = void 0;
_RevokeTokenRequest.attributeTypeMap = [
    {
        "name": "user_identifier",
        "baseName": "user_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "token",
        "baseName": "token",
        "type": "string",
        "format": ""
    }
];
var RevokeTokenRequest = _RevokeTokenRequest;
// models/RiseSetter.ts
var _RiseSetter = /*#__PURE__*/ function() {
    function _RiseSetter() {
        _class_call_check(this, _RiseSetter);
    }
    _create_class(_RiseSetter, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RiseSetter.attributeTypeMap;
            }
        }
    ]);
    return _RiseSetter;
}();
_RiseSetter.discriminator = void 0;
_RiseSetter.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string",
        "format": ""
    },
    {
        "name": "path",
        "baseName": "path",
        "type": "string",
        "format": ""
    }
];
var RiseSetter = _RiseSetter;
// models/Role.ts
var _Role = /*#__PURE__*/ function() {
    function _Role() {
        _class_call_check(this, _Role);
    }
    _create_class(_Role, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Role.attributeTypeMap;
            }
        }
    ]);
    return _Role;
}();
_Role.discriminator = void 0;
_Role.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var Role = _Role;
// models/RoleResponse.ts
var _RoleResponse = /*#__PURE__*/ function() {
    function _RoleResponse() {
        _class_call_check(this, _RoleResponse);
    }
    _create_class(_RoleResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RoleResponse.attributeTypeMap;
            }
        }
    ]);
    return _RoleResponse;
}();
_RoleResponse.discriminator = void 0;
_RoleResponse.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "groups_assigned_count",
        "baseName": "groups_assigned_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "orgs",
        "baseName": "orgs",
        "type": "Array<GenericInfo>",
        "format": ""
    },
    {
        "name": "groups",
        "baseName": "groups",
        "type": "Array<GenericInfo>",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<RoleResponsePrivilegesEnum>",
        "format": ""
    },
    {
        "name": "permission",
        "baseName": "permission",
        "type": "RoleResponsePermissionEnum",
        "format": ""
    },
    {
        "name": "author_id",
        "baseName": "author_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "modifier_id",
        "baseName": "modifier_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "any",
        "format": ""
    },
    {
        "name": "modification_time_in_millis",
        "baseName": "modification_time_in_millis",
        "type": "any",
        "format": ""
    },
    {
        "name": "deleted",
        "baseName": "deleted",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "deprecated",
        "baseName": "deprecated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "external",
        "baseName": "external",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "hidden",
        "baseName": "hidden",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "shared_via_connection",
        "baseName": "shared_via_connection",
        "type": "boolean",
        "format": ""
    }
];
var RoleResponse = _RoleResponse;
// models/RuntimeFilter.ts
var _RuntimeFilter = /*#__PURE__*/ function() {
    function _RuntimeFilter() {
        _class_call_check(this, _RuntimeFilter);
    }
    _create_class(_RuntimeFilter, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RuntimeFilter.attributeTypeMap;
            }
        }
    ]);
    return _RuntimeFilter;
}();
_RuntimeFilter.discriminator = void 0;
_RuntimeFilter.attributeTypeMap = [
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    }
];
var RuntimeFilter = _RuntimeFilter;
// models/RuntimeParamOverride.ts
var _RuntimeParamOverride = /*#__PURE__*/ function() {
    function _RuntimeParamOverride() {
        _class_call_check(this, _RuntimeParamOverride);
    }
    _create_class(_RuntimeParamOverride, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RuntimeParamOverride.attributeTypeMap;
            }
        }
    ]);
    return _RuntimeParamOverride;
}();
_RuntimeParamOverride.discriminator = void 0;
_RuntimeParamOverride.attributeTypeMap = [
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var RuntimeParamOverride = _RuntimeParamOverride;
// models/RuntimeSort.ts
var _RuntimeSort = /*#__PURE__*/ function() {
    function _RuntimeSort() {
        _class_call_check(this, _RuntimeSort);
    }
    _create_class(_RuntimeSort, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _RuntimeSort.attributeTypeMap;
            }
        }
    ]);
    return _RuntimeSort;
}();
_RuntimeSort.discriminator = void 0;
_RuntimeSort.attributeTypeMap = [
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    }
];
var RuntimeSort = _RuntimeSort;
// models/ScheduleHistoryRunsOptionsInput.ts
var _ScheduleHistoryRunsOptionsInput = /*#__PURE__*/ function() {
    function _ScheduleHistoryRunsOptionsInput() {
        _class_call_check(this, _ScheduleHistoryRunsOptionsInput);
    }
    _create_class(_ScheduleHistoryRunsOptionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ScheduleHistoryRunsOptionsInput.attributeTypeMap;
            }
        }
    ]);
    return _ScheduleHistoryRunsOptionsInput;
}();
_ScheduleHistoryRunsOptionsInput.discriminator = void 0;
_ScheduleHistoryRunsOptionsInput.attributeTypeMap = [
    {
        "name": "include_history_runs",
        "baseName": "include_history_runs",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    }
];
var ScheduleHistoryRunsOptionsInput = _ScheduleHistoryRunsOptionsInput;
// models/SchedulesPdfOptionsInput.ts
var _SchedulesPdfOptionsInput = /*#__PURE__*/ function() {
    function _SchedulesPdfOptionsInput() {
        _class_call_check(this, _SchedulesPdfOptionsInput);
    }
    _create_class(_SchedulesPdfOptionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SchedulesPdfOptionsInput.attributeTypeMap;
            }
        }
    ]);
    return _SchedulesPdfOptionsInput;
}();
_SchedulesPdfOptionsInput.discriminator = void 0;
_SchedulesPdfOptionsInput.attributeTypeMap = [
    {
        "name": "complete_liveboard",
        "baseName": "complete_liveboard",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_cover_page",
        "baseName": "include_cover_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_custom_logo",
        "baseName": "include_custom_logo",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_filter_page",
        "baseName": "include_filter_page",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_page_number",
        "baseName": "include_page_number",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "page_footer_text",
        "baseName": "page_footer_text",
        "type": "string",
        "format": ""
    },
    {
        "name": "page_orientation",
        "baseName": "page_orientation",
        "type": "string",
        "format": ""
    },
    {
        "name": "page_size",
        "baseName": "page_size",
        "type": "SchedulesPdfOptionsInputPageSizeEnum",
        "format": ""
    },
    {
        "name": "truncate_table",
        "baseName": "truncate_table",
        "type": "boolean",
        "format": ""
    }
];
var SchedulesPdfOptionsInput = _SchedulesPdfOptionsInput;
// models/SchemaObject.ts
var _SchemaObject = /*#__PURE__*/ function() {
    function _SchemaObject() {
        _class_call_check(this, _SchemaObject);
    }
    _create_class(_SchemaObject, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SchemaObject.attributeTypeMap;
            }
        }
    ]);
    return _SchemaObject;
}();
_SchemaObject.discriminator = void 0;
_SchemaObject.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "tables",
        "baseName": "tables",
        "type": "Array<Table>",
        "format": ""
    }
];
var SchemaObject = _SchemaObject;
// models/Scope.ts
var _Scope = /*#__PURE__*/ function() {
    function _Scope() {
        _class_call_check(this, _Scope);
    }
    _create_class(_Scope, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Scope.attributeTypeMap;
            }
        }
    ]);
    return _Scope;
}();
_Scope.discriminator = void 0;
_Scope.attributeTypeMap = [
    {
        "name": "access_type",
        "baseName": "access_type",
        "type": "string",
        "format": ""
    },
    {
        "name": "org_id",
        "baseName": "org_id",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "metadata_id",
        "baseName": "metadata_id",
        "type": "string",
        "format": ""
    }
];
var Scope = _Scope;
// models/SearchCommitsRequest.ts
var _SearchCommitsRequest = /*#__PURE__*/ function() {
    function _SearchCommitsRequest() {
        _class_call_check(this, _SearchCommitsRequest);
    }
    _create_class(_SearchCommitsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchCommitsRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchCommitsRequest;
}();
_SearchCommitsRequest.discriminator = void 0;
_SearchCommitsRequest.attributeTypeMap = [
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "SearchCommitsRequestMetadataTypeEnum",
        "format": ""
    },
    {
        "name": "branch_name",
        "baseName": "branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    }
];
var SearchCommitsRequest = _SearchCommitsRequest;
// models/SearchConfigRequest.ts
var _SearchConfigRequest = /*#__PURE__*/ function() {
    function _SearchConfigRequest() {
        _class_call_check(this, _SearchConfigRequest);
    }
    _create_class(_SearchConfigRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchConfigRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchConfigRequest;
}();
_SearchConfigRequest.discriminator = void 0;
_SearchConfigRequest.attributeTypeMap = [
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var SearchConfigRequest = _SearchConfigRequest;
// models/SearchConnectionRequest.ts
var _SearchConnectionRequest = /*#__PURE__*/ function() {
    function _SearchConnectionRequest() {
        _class_call_check(this, _SearchConnectionRequest);
    }
    _create_class(_SearchConnectionRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchConnectionRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchConnectionRequest;
}();
_SearchConnectionRequest.discriminator = void 0;
_SearchConnectionRequest.attributeTypeMap = [
    {
        "name": "connections",
        "baseName": "connections",
        "type": "Array<ConnectionInput>",
        "format": ""
    },
    {
        "name": "data_warehouse_types",
        "baseName": "data_warehouse_types",
        "type": "Array<SearchConnectionRequestDataWarehouseTypesEnum>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "tag_identifiers",
        "baseName": "tag_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "data_warehouse_object_type",
        "baseName": "data_warehouse_object_type",
        "type": "SearchConnectionRequestDataWarehouseObjectTypeEnum",
        "format": ""
    },
    {
        "name": "sort_options",
        "baseName": "sort_options",
        "type": "SortOptionInput",
        "format": ""
    },
    {
        "name": "include_details",
        "baseName": "include_details",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "configuration",
        "baseName": "configuration",
        "type": "any",
        "format": ""
    },
    {
        "name": "authentication_type",
        "baseName": "authentication_type",
        "type": "SearchConnectionRequestAuthenticationTypeEnum",
        "format": ""
    }
];
var SearchConnectionRequest = _SearchConnectionRequest;
// models/SearchConnectionResponse.ts
var _SearchConnectionResponse = /*#__PURE__*/ function() {
    function _SearchConnectionResponse() {
        _class_call_check(this, _SearchConnectionResponse);
    }
    _create_class(_SearchConnectionResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchConnectionResponse.attributeTypeMap;
            }
        }
    ]);
    return _SearchConnectionResponse;
}();
_SearchConnectionResponse.discriminator = void 0;
_SearchConnectionResponse.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_warehouse_type",
        "baseName": "data_warehouse_type",
        "type": "SearchConnectionResponseDataWarehouseTypeEnum",
        "format": ""
    },
    {
        "name": "data_warehouse_objects",
        "baseName": "data_warehouse_objects",
        "type": "DataWarehouseObjects",
        "format": ""
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "any",
        "format": ""
    }
];
var SearchConnectionResponse = _SearchConnectionResponse;
// models/SearchCustomActionsRequest.ts
var _SearchCustomActionsRequest = /*#__PURE__*/ function() {
    function _SearchCustomActionsRequest() {
        _class_call_check(this, _SearchCustomActionsRequest);
    }
    _create_class(_SearchCustomActionsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchCustomActionsRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchCustomActionsRequest;
}();
_SearchCustomActionsRequest.discriminator = void 0;
_SearchCustomActionsRequest.attributeTypeMap = [
    {
        "name": "custom_action_identifier",
        "baseName": "custom_action_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "name_pattern",
        "baseName": "name_pattern",
        "type": "string",
        "format": ""
    },
    {
        "name": "default_action_config",
        "baseName": "default_action_config",
        "type": "DefaultActionConfigSearchInput",
        "format": ""
    },
    {
        "name": "include_group_associations",
        "baseName": "include_group_associations",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_metadata_associations",
        "baseName": "include_metadata_associations",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<CustomActionMetadataTypeInput>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "SearchCustomActionsRequestTypeEnum",
        "format": ""
    }
];
var SearchCustomActionsRequest = _SearchCustomActionsRequest;
// models/SearchDataRequest.ts
var _SearchDataRequest = /*#__PURE__*/ function() {
    function _SearchDataRequest() {
        _class_call_check(this, _SearchDataRequest);
    }
    _create_class(_SearchDataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchDataRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchDataRequest;
}();
_SearchDataRequest.discriminator = void 0;
_SearchDataRequest.attributeTypeMap = [
    {
        "name": "query_string",
        "baseName": "query_string",
        "type": "string",
        "format": ""
    },
    {
        "name": "logical_table_identifier",
        "baseName": "logical_table_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_format",
        "baseName": "data_format",
        "type": "SearchDataRequestDataFormatEnum",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "runtime_filter",
        "baseName": "runtime_filter",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_sort",
        "baseName": "runtime_sort",
        "type": "any",
        "format": ""
    },
    {
        "name": "runtime_param_override",
        "baseName": "runtime_param_override",
        "type": "any",
        "format": ""
    }
];
var SearchDataRequest = _SearchDataRequest;
// models/SearchDataResponse.ts
var _SearchDataResponse = /*#__PURE__*/ function() {
    function _SearchDataResponse() {
        _class_call_check(this, _SearchDataResponse);
    }
    _create_class(_SearchDataResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchDataResponse.attributeTypeMap;
            }
        }
    ]);
    return _SearchDataResponse;
}();
_SearchDataResponse.discriminator = void 0;
_SearchDataResponse.attributeTypeMap = [
    {
        "name": "contents",
        "baseName": "contents",
        "type": "Array<AnswerContent>",
        "format": ""
    }
];
var SearchDataResponse = _SearchDataResponse;
// models/SearchMetadataRequest.ts
var _SearchMetadataRequest = /*#__PURE__*/ function() {
    function _SearchMetadataRequest() {
        _class_call_check(this, _SearchMetadataRequest);
    }
    _create_class(_SearchMetadataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchMetadataRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchMetadataRequest;
}();
_SearchMetadataRequest.discriminator = void 0;
_SearchMetadataRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<MetadataListItemInput>",
        "format": ""
    },
    {
        "name": "permissions",
        "baseName": "permissions",
        "type": "Array<PermissionInput>",
        "format": ""
    },
    {
        "name": "created_by_user_identifiers",
        "baseName": "created_by_user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "dependent_object_version",
        "baseName": "dependent_object_version",
        "type": "SearchMetadataRequestDependentObjectVersionEnum",
        "format": ""
    },
    {
        "name": "exclude_objects",
        "baseName": "exclude_objects",
        "type": "Array<ExcludeMetadataListItemInput>",
        "format": ""
    },
    {
        "name": "favorite_object_options",
        "baseName": "favorite_object_options",
        "type": "FavoriteObjectOptionsInput",
        "format": ""
    },
    {
        "name": "include_auto_created_objects",
        "baseName": "include_auto_created_objects",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_dependent_objects",
        "baseName": "include_dependent_objects",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_details",
        "baseName": "include_details",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_headers",
        "baseName": "include_headers",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_hidden_objects",
        "baseName": "include_hidden_objects",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_incomplete_objects",
        "baseName": "include_incomplete_objects",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_visualization_headers",
        "baseName": "include_visualization_headers",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "include_worksheet_search_assist_data",
        "baseName": "include_worksheet_search_assist_data",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "modified_by_user_identifiers",
        "baseName": "modified_by_user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "sort_options",
        "baseName": "sort_options",
        "type": "MetadataSearchSortOptions",
        "format": ""
    },
    {
        "name": "tag_identifiers",
        "baseName": "tag_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "include_stats",
        "baseName": "include_stats",
        "type": "boolean",
        "format": ""
    }
];
var SearchMetadataRequest = _SearchMetadataRequest;
// models/SearchOrgsRequest.ts
var _SearchOrgsRequest = /*#__PURE__*/ function() {
    function _SearchOrgsRequest() {
        _class_call_check(this, _SearchOrgsRequest);
    }
    _create_class(_SearchOrgsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchOrgsRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchOrgsRequest;
}();
_SearchOrgsRequest.discriminator = void 0;
_SearchOrgsRequest.attributeTypeMap = [
    {
        "name": "org_identifier",
        "baseName": "org_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "SearchOrgsRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "SearchOrgsRequestStatusEnum",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var SearchOrgsRequest = _SearchOrgsRequest;
// models/SearchRoleResponse.ts
var _SearchRoleResponse = /*#__PURE__*/ function() {
    function _SearchRoleResponse() {
        _class_call_check(this, _SearchRoleResponse);
    }
    _create_class(_SearchRoleResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchRoleResponse.attributeTypeMap;
            }
        }
    ]);
    return _SearchRoleResponse;
}();
_SearchRoleResponse.discriminator = void 0;
_SearchRoleResponse.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "groups_assigned_count",
        "baseName": "groups_assigned_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "orgs",
        "baseName": "orgs",
        "type": "Array<GenericInfo>",
        "format": ""
    },
    {
        "name": "groups",
        "baseName": "groups",
        "type": "Array<GenericInfo>",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<SearchRoleResponsePrivilegesEnum>",
        "format": ""
    },
    {
        "name": "permission",
        "baseName": "permission",
        "type": "SearchRoleResponsePermissionEnum",
        "format": ""
    },
    {
        "name": "author_id",
        "baseName": "author_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "modifier_id",
        "baseName": "modifier_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "any",
        "format": ""
    },
    {
        "name": "modification_time_in_millis",
        "baseName": "modification_time_in_millis",
        "type": "any",
        "format": ""
    },
    {
        "name": "deleted",
        "baseName": "deleted",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "deprecated",
        "baseName": "deprecated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "external",
        "baseName": "external",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "hidden",
        "baseName": "hidden",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "shared_via_connection",
        "baseName": "shared_via_connection",
        "type": "boolean",
        "format": ""
    }
];
var SearchRoleResponse = _SearchRoleResponse;
// models/SearchRolesRequest.ts
var _SearchRolesRequest = /*#__PURE__*/ function() {
    function _SearchRolesRequest() {
        _class_call_check(this, _SearchRolesRequest);
    }
    _create_class(_SearchRolesRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchRolesRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchRolesRequest;
}();
_SearchRolesRequest.discriminator = void 0;
_SearchRolesRequest.attributeTypeMap = [
    {
        "name": "role_identifiers",
        "baseName": "role_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<SearchRolesRequestPrivilegesEnum>",
        "format": ""
    },
    {
        "name": "deprecated",
        "baseName": "deprecated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "external",
        "baseName": "external",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "shared_via_connection",
        "baseName": "shared_via_connection",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "permissions",
        "baseName": "permissions",
        "type": "Array<SearchRolesRequestPermissionsEnum>",
        "format": ""
    }
];
var SearchRolesRequest = _SearchRolesRequest;
// models/SearchSchedulesRequest.ts
var _SearchSchedulesRequest = /*#__PURE__*/ function() {
    function _SearchSchedulesRequest() {
        _class_call_check(this, _SearchSchedulesRequest);
    }
    _create_class(_SearchSchedulesRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchSchedulesRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchSchedulesRequest;
}();
_SearchSchedulesRequest.discriminator = void 0;
_SearchSchedulesRequest.attributeTypeMap = [
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Array<MetadataInput>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "sort_options",
        "baseName": "sort_options",
        "type": "SortingOptions",
        "format": ""
    },
    {
        "name": "history_runs_options",
        "baseName": "history_runs_options",
        "type": "ScheduleHistoryRunsOptionsInput",
        "format": ""
    },
    {
        "name": "schedule_identifiers",
        "baseName": "schedule_identifiers",
        "type": "Array<string>",
        "format": ""
    }
];
var SearchSchedulesRequest = _SearchSchedulesRequest;
// models/SearchTagsRequest.ts
var _SearchTagsRequest = /*#__PURE__*/ function() {
    function _SearchTagsRequest() {
        _class_call_check(this, _SearchTagsRequest);
    }
    _create_class(_SearchTagsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchTagsRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchTagsRequest;
}();
_SearchTagsRequest.discriminator = void 0;
_SearchTagsRequest.attributeTypeMap = [
    {
        "name": "tag_identifier",
        "baseName": "tag_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "name_pattern",
        "baseName": "name_pattern",
        "type": "string",
        "format": ""
    },
    {
        "name": "color",
        "baseName": "color",
        "type": "string",
        "format": ""
    }
];
var SearchTagsRequest = _SearchTagsRequest;
// models/SearchUserGroupsRequest.ts
var _SearchUserGroupsRequest = /*#__PURE__*/ function() {
    function _SearchUserGroupsRequest() {
        _class_call_check(this, _SearchUserGroupsRequest);
    }
    _create_class(_SearchUserGroupsRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchUserGroupsRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchUserGroupsRequest;
}();
_SearchUserGroupsRequest.discriminator = void 0;
_SearchUserGroupsRequest.attributeTypeMap = [
    {
        "name": "default_liveboard_identifiers",
        "baseName": "default_liveboard_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "name_pattern",
        "baseName": "name_pattern",
        "type": "string",
        "format": ""
    },
    {
        "name": "group_identifier",
        "baseName": "group_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<SearchUserGroupsRequestPrivilegesEnum>",
        "format": ""
    },
    {
        "name": "sub_group_identifiers",
        "baseName": "sub_group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "SearchUserGroupsRequestTypeEnum",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "SearchUserGroupsRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "role_identifiers",
        "baseName": "role_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "sort_options",
        "baseName": "sort_options",
        "type": "SortOptions",
        "format": ""
    }
];
var SearchUserGroupsRequest = _SearchUserGroupsRequest;
// models/SearchUsersRequest.ts
var _SearchUsersRequest = /*#__PURE__*/ function() {
    function _SearchUsersRequest() {
        _class_call_check(this, _SearchUsersRequest);
    }
    _create_class(_SearchUsersRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SearchUsersRequest.attributeTypeMap;
            }
        }
    ]);
    return _SearchUsersRequest;
}();
_SearchUsersRequest.discriminator = void 0;
_SearchUsersRequest.attributeTypeMap = [
    {
        "name": "user_identifier",
        "baseName": "user_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "name_pattern",
        "baseName": "name_pattern",
        "type": "string",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "SearchUsersRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<SearchUsersRequestPrivilegesEnum>",
        "format": ""
    },
    {
        "name": "account_type",
        "baseName": "account_type",
        "type": "SearchUsersRequestAccountTypeEnum",
        "format": ""
    },
    {
        "name": "account_status",
        "baseName": "account_status",
        "type": "SearchUsersRequestAccountStatusEnum",
        "format": ""
    },
    {
        "name": "notify_on_share",
        "baseName": "notify_on_share",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "show_onboarding_experience",
        "baseName": "show_onboarding_experience",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "onboarding_experience_completed",
        "baseName": "onboarding_experience_completed",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "home_liveboard_identifier",
        "baseName": "home_liveboard_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "favorite_metadata",
        "baseName": "favorite_metadata",
        "type": "Array<FavoriteMetadataInput>",
        "format": ""
    },
    {
        "name": "record_offset",
        "baseName": "record_offset",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "record_size",
        "baseName": "record_size",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "sort_options",
        "baseName": "sort_options",
        "type": "SortOptions",
        "format": ""
    },
    {
        "name": "role_identifiers",
        "baseName": "role_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "include_favorite_metadata",
        "baseName": "include_favorite_metadata",
        "type": "boolean",
        "format": ""
    }
];
var SearchUsersRequest = _SearchUsersRequest;
// models/ShareMetadataRequest.ts
var _ShareMetadataRequest = /*#__PURE__*/ function() {
    function _ShareMetadataRequest() {
        _class_call_check(this, _ShareMetadataRequest);
    }
    _create_class(_ShareMetadataRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ShareMetadataRequest.attributeTypeMap;
            }
        }
    ]);
    return _ShareMetadataRequest;
}();
_ShareMetadataRequest.discriminator = void 0;
_ShareMetadataRequest.attributeTypeMap = [
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "ShareMetadataRequestMetadataTypeEnum",
        "format": ""
    },
    {
        "name": "metadata_identifiers",
        "baseName": "metadata_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "permissions",
        "baseName": "permissions",
        "type": "Array<SharePermissionsInput>",
        "format": ""
    },
    {
        "name": "visualization_identifiers",
        "baseName": "visualization_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "emails",
        "baseName": "emails",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string",
        "format": ""
    },
    {
        "name": "enable_custom_url",
        "baseName": "enable_custom_url",
        "type": "boolean",
        "format": ""
    }
];
var ShareMetadataRequest = _ShareMetadataRequest;
// models/SharePermissionsInput.ts
var _SharePermissionsInput = /*#__PURE__*/ function() {
    function _SharePermissionsInput() {
        _class_call_check(this, _SharePermissionsInput);
    }
    _create_class(_SharePermissionsInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SharePermissionsInput.attributeTypeMap;
            }
        }
    ]);
    return _SharePermissionsInput;
}();
_SharePermissionsInput.discriminator = void 0;
_SharePermissionsInput.attributeTypeMap = [
    {
        "name": "principal",
        "baseName": "principal",
        "type": "PrincipalsInput",
        "format": ""
    },
    {
        "name": "share_mode",
        "baseName": "share_mode",
        "type": "SharePermissionsInputShareModeEnum",
        "format": ""
    }
];
var SharePermissionsInput = _SharePermissionsInput;
// models/SortOptionInput.ts
var _SortOptionInput = /*#__PURE__*/ function() {
    function _SortOptionInput() {
        _class_call_check(this, _SortOptionInput);
    }
    _create_class(_SortOptionInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SortOptionInput.attributeTypeMap;
            }
        }
    ]);
    return _SortOptionInput;
}();
_SortOptionInput.discriminator = void 0;
_SortOptionInput.attributeTypeMap = [
    {
        "name": "field_name",
        "baseName": "field_name",
        "type": "SortOptionInputFieldNameEnum",
        "format": ""
    },
    {
        "name": "order",
        "baseName": "order",
        "type": "SortOptionInputOrderEnum",
        "format": ""
    }
];
var SortOptionInput = _SortOptionInput;
// models/SortOptions.ts
var _SortOptions = /*#__PURE__*/ function() {
    function _SortOptions() {
        _class_call_check(this, _SortOptions);
    }
    _create_class(_SortOptions, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SortOptions.attributeTypeMap;
            }
        }
    ]);
    return _SortOptions;
}();
_SortOptions.discriminator = void 0;
_SortOptions.attributeTypeMap = [
    {
        "name": "field_name",
        "baseName": "field_name",
        "type": "SortOptionsFieldNameEnum",
        "format": ""
    },
    {
        "name": "order",
        "baseName": "order",
        "type": "SortOptionsOrderEnum",
        "format": ""
    }
];
var SortOptions = _SortOptions;
// models/SortingOptions.ts
var _SortingOptions = /*#__PURE__*/ function() {
    function _SortingOptions() {
        _class_call_check(this, _SortingOptions);
    }
    _create_class(_SortingOptions, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SortingOptions.attributeTypeMap;
            }
        }
    ]);
    return _SortingOptions;
}();
_SortingOptions.discriminator = void 0;
_SortingOptions.attributeTypeMap = [
    {
        "name": "field_name",
        "baseName": "field_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "order",
        "baseName": "order",
        "type": "string",
        "format": ""
    }
];
var SortingOptions = _SortingOptions;
// models/SqlQuery.ts
var _SqlQuery = /*#__PURE__*/ function() {
    function _SqlQuery() {
        _class_call_check(this, _SqlQuery);
    }
    _create_class(_SqlQuery, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SqlQuery.attributeTypeMap;
            }
        }
    ]);
    return _SqlQuery;
}();
_SqlQuery.discriminator = void 0;
_SqlQuery.attributeTypeMap = [
    {
        "name": "metadata_id",
        "baseName": "metadata_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "sql_query",
        "baseName": "sql_query",
        "type": "string",
        "format": ""
    }
];
var SqlQuery = _SqlQuery;
// models/SqlQueryResponse.ts
var _SqlQueryResponse = /*#__PURE__*/ function() {
    function _SqlQueryResponse() {
        _class_call_check(this, _SqlQueryResponse);
    }
    _create_class(_SqlQueryResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SqlQueryResponse.attributeTypeMap;
            }
        }
    ]);
    return _SqlQueryResponse;
}();
_SqlQueryResponse.discriminator = void 0;
_SqlQueryResponse.attributeTypeMap = [
    {
        "name": "metadata_id",
        "baseName": "metadata_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_name",
        "baseName": "metadata_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "SqlQueryResponseMetadataTypeEnum",
        "format": ""
    },
    {
        "name": "sql_queries",
        "baseName": "sql_queries",
        "type": "Array<SqlQuery>",
        "format": ""
    }
];
var SqlQueryResponse = _SqlQueryResponse;
// models/SystemConfig.ts
var _SystemConfig = /*#__PURE__*/ function() {
    function _SystemConfig() {
        _class_call_check(this, _SystemConfig);
    }
    _create_class(_SystemConfig, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SystemConfig.attributeTypeMap;
            }
        }
    ]);
    return _SystemConfig;
}();
_SystemConfig.discriminator = void 0;
_SystemConfig.attributeTypeMap = [
    {
        "name": "onboarding_content_url",
        "baseName": "onboarding_content_url",
        "type": "string",
        "format": ""
    }
];
var SystemConfig = _SystemConfig;
// models/SystemInfo.ts
var _SystemInfo = /*#__PURE__*/ function() {
    function _SystemInfo() {
        _class_call_check(this, _SystemInfo);
    }
    _create_class(_SystemInfo, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _SystemInfo.attributeTypeMap;
            }
        }
    ]);
    return _SystemInfo;
}();
_SystemInfo.discriminator = void 0;
_SystemInfo.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "release_version",
        "baseName": "release_version",
        "type": "string",
        "format": ""
    },
    {
        "name": "time_zone",
        "baseName": "time_zone",
        "type": "string",
        "format": ""
    },
    {
        "name": "locale",
        "baseName": "locale",
        "type": "string",
        "format": ""
    },
    {
        "name": "date_format",
        "baseName": "date_format",
        "type": "string",
        "format": ""
    },
    {
        "name": "api_version",
        "baseName": "api_version",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string",
        "format": ""
    },
    {
        "name": "environment",
        "baseName": "environment",
        "type": "string",
        "format": ""
    },
    {
        "name": "license",
        "baseName": "license",
        "type": "string",
        "format": ""
    },
    {
        "name": "date_time_format",
        "baseName": "date_time_format",
        "type": "string",
        "format": ""
    },
    {
        "name": "time_format",
        "baseName": "time_format",
        "type": "string",
        "format": ""
    },
    {
        "name": "system_user_id",
        "baseName": "system_user_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "super_user_id",
        "baseName": "super_user_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "hidden_object_id",
        "baseName": "hidden_object_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "system_group_id",
        "baseName": "system_group_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "tsadmin_user_id",
        "baseName": "tsadmin_user_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "admin_group_id",
        "baseName": "admin_group_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "all_tables_connection_id",
        "baseName": "all_tables_connection_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "all_user_group_id",
        "baseName": "all_user_group_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "accept_language",
        "baseName": "accept_language",
        "type": "string",
        "format": ""
    },
    {
        "name": "all_user_group_member_user_count",
        "baseName": "all_user_group_member_user_count",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "logical_model_version",
        "baseName": "logical_model_version",
        "type": "number",
        "format": "int32"
    }
];
var SystemInfo = _SystemInfo;
// models/Table.ts
var _Table = /*#__PURE__*/ function() {
    function _Table() {
        _class_call_check(this, _Table);
    }
    _create_class(_Table, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Table.attributeTypeMap;
            }
        }
    ]);
    return _Table;
}();
_Table.discriminator = void 0;
_Table.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "columns",
        "baseName": "columns",
        "type": "Array<Column>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "selected",
        "baseName": "selected",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "linked",
        "baseName": "linked",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "relationships",
        "baseName": "relationships",
        "type": "Array<any>",
        "format": ""
    }
];
var Table = _Table;
// models/Tag.ts
var _Tag = /*#__PURE__*/ function() {
    function _Tag() {
        _class_call_check(this, _Tag);
    }
    _create_class(_Tag, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Tag.attributeTypeMap;
            }
        }
    ]);
    return _Tag;
}();
_Tag.discriminator = void 0;
_Tag.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "color",
        "baseName": "color",
        "type": "string",
        "format": ""
    },
    {
        "name": "deleted",
        "baseName": "deleted",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "hidden",
        "baseName": "hidden",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "external",
        "baseName": "external",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "deprecated",
        "baseName": "deprecated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "modification_time_in_millis",
        "baseName": "modification_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "author_id",
        "baseName": "author_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "modifier_id",
        "baseName": "modifier_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "owner_id",
        "baseName": "owner_id",
        "type": "string",
        "format": ""
    }
];
var Tag = _Tag;
// models/TagMetadataTypeInput.ts
var _TagMetadataTypeInput = /*#__PURE__*/ function() {
    function _TagMetadataTypeInput() {
        _class_call_check(this, _TagMetadataTypeInput);
    }
    _create_class(_TagMetadataTypeInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _TagMetadataTypeInput.attributeTypeMap;
            }
        }
    ]);
    return _TagMetadataTypeInput;
}();
_TagMetadataTypeInput.discriminator = void 0;
_TagMetadataTypeInput.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "TagMetadataTypeInputTypeEnum",
        "format": ""
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string",
        "format": ""
    }
];
var TagMetadataTypeInput = _TagMetadataTypeInput;
// models/Token.ts
var _Token = /*#__PURE__*/ function() {
    function _Token() {
        _class_call_check(this, _Token);
    }
    _create_class(_Token, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _Token.attributeTypeMap;
            }
        }
    ]);
    return _Token;
}();
_Token.discriminator = void 0;
_Token.attributeTypeMap = [
    {
        "name": "token",
        "baseName": "token",
        "type": "string",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "expiration_time_in_millis",
        "baseName": "expiration_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "scope",
        "baseName": "scope",
        "type": "Scope",
        "format": ""
    },
    {
        "name": "valid_for_user_id",
        "baseName": "valid_for_user_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "valid_for_username",
        "baseName": "valid_for_username",
        "type": "string",
        "format": ""
    }
];
var Token = _Token;
// models/URL.ts
var _URL = /*#__PURE__*/ function() {
    function _URL() {
        _class_call_check(this, _URL);
    }
    _create_class(_URL, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _URL.attributeTypeMap;
            }
        }
    ]);
    return _URL;
}();
_URL.discriminator = void 0;
_URL.attributeTypeMap = [
    {
        "name": "authentication",
        "baseName": "authentication",
        "type": "Authentication",
        "format": ""
    },
    {
        "name": "parameters",
        "baseName": "parameters",
        "type": "Array<ParametersListItem>",
        "format": ""
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string",
        "format": ""
    },
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string",
        "format": ""
    }
];
var URL2 = _URL;
// models/URLInput.ts
var _URLInput = /*#__PURE__*/ function() {
    function _URLInput() {
        _class_call_check(this, _URLInput);
    }
    _create_class(_URLInput, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _URLInput.attributeTypeMap;
            }
        }
    ]);
    return _URLInput;
}();
_URLInput.discriminator = void 0;
_URLInput.attributeTypeMap = [
    {
        "name": "authentication",
        "baseName": "authentication",
        "type": "AuthenticationInput",
        "format": ""
    },
    {
        "name": "parameters",
        "baseName": "parameters",
        "type": "Array<ParametersListItemInput>",
        "format": ""
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string",
        "format": ""
    },
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string",
        "format": ""
    }
];
var URLInput = _URLInput;
// models/URLInputMandatory.ts
var _URLInputMandatory = /*#__PURE__*/ function() {
    function _URLInputMandatory() {
        _class_call_check(this, _URLInputMandatory);
    }
    _create_class(_URLInputMandatory, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _URLInputMandatory.attributeTypeMap;
            }
        }
    ]);
    return _URLInputMandatory;
}();
_URLInputMandatory.discriminator = void 0;
_URLInputMandatory.attributeTypeMap = [
    {
        "name": "authentication",
        "baseName": "authentication",
        "type": "AuthenticationInput",
        "format": ""
    },
    {
        "name": "parameters",
        "baseName": "parameters",
        "type": "Array<ParametersListItemInput>",
        "format": ""
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string",
        "format": ""
    },
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string",
        "format": ""
    }
];
var URLInputMandatory = _URLInputMandatory;
// models/UpdateConfigRequest.ts
var _UpdateConfigRequest = /*#__PURE__*/ function() {
    function _UpdateConfigRequest() {
        _class_call_check(this, _UpdateConfigRequest);
    }
    _create_class(_UpdateConfigRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateConfigRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateConfigRequest;
}();
_UpdateConfigRequest.discriminator = void 0;
_UpdateConfigRequest.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string",
        "format": ""
    },
    {
        "name": "access_token",
        "baseName": "access_token",
        "type": "string",
        "format": ""
    },
    {
        "name": "org_identifier",
        "baseName": "org_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "branch_names",
        "baseName": "branch_names",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "commit_branch_name",
        "baseName": "commit_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "default_branch_name",
        "baseName": "default_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "enable_guid_mapping",
        "baseName": "enable_guid_mapping",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "configuration_branch_name",
        "baseName": "configuration_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "guid_mapping_branch_name",
        "baseName": "guid_mapping_branch_name",
        "type": "string",
        "format": ""
    }
];
var UpdateConfigRequest = _UpdateConfigRequest;
// models/UpdateConnectionRequest.ts
var _UpdateConnectionRequest = /*#__PURE__*/ function() {
    function _UpdateConnectionRequest() {
        _class_call_check(this, _UpdateConnectionRequest);
    }
    _create_class(_UpdateConnectionRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateConnectionRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateConnectionRequest;
}();
_UpdateConnectionRequest.discriminator = void 0;
_UpdateConnectionRequest.attributeTypeMap = [
    {
        "name": "connection_identifier",
        "baseName": "connection_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "data_warehouse_config",
        "baseName": "data_warehouse_config",
        "type": "any",
        "format": ""
    },
    {
        "name": "validate",
        "baseName": "validate",
        "type": "boolean",
        "format": ""
    }
];
var UpdateConnectionRequest = _UpdateConnectionRequest;
// models/UpdateCustomActionRequest.ts
var _UpdateCustomActionRequest = /*#__PURE__*/ function() {
    function _UpdateCustomActionRequest() {
        _class_call_check(this, _UpdateCustomActionRequest);
    }
    _create_class(_UpdateCustomActionRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateCustomActionRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateCustomActionRequest;
}();
_UpdateCustomActionRequest.discriminator = void 0;
_UpdateCustomActionRequest.attributeTypeMap = [
    {
        "name": "action_details",
        "baseName": "action_details",
        "type": "ActionDetailsInput",
        "format": ""
    },
    {
        "name": "associate_metadata",
        "baseName": "associate_metadata",
        "type": "Array<AssociateMetadataInput>",
        "format": ""
    },
    {
        "name": "default_action_config",
        "baseName": "default_action_config",
        "type": "DefaultActionConfigInput",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "operation",
        "baseName": "operation",
        "type": "UpdateCustomActionRequestOperationEnum",
        "format": ""
    }
];
var UpdateCustomActionRequest = _UpdateCustomActionRequest;
// models/UpdateOrgRequest.ts
var _UpdateOrgRequest = /*#__PURE__*/ function() {
    function _UpdateOrgRequest() {
        _class_call_check(this, _UpdateOrgRequest);
    }
    _create_class(_UpdateOrgRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateOrgRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateOrgRequest;
}();
_UpdateOrgRequest.discriminator = void 0;
_UpdateOrgRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "operation",
        "baseName": "operation",
        "type": "UpdateOrgRequestOperationEnum",
        "format": ""
    }
];
var UpdateOrgRequest = _UpdateOrgRequest;
// models/UpdateRoleRequest.ts
var _UpdateRoleRequest = /*#__PURE__*/ function() {
    function _UpdateRoleRequest() {
        _class_call_check(this, _UpdateRoleRequest);
    }
    _create_class(_UpdateRoleRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateRoleRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateRoleRequest;
}();
_UpdateRoleRequest.discriminator = void 0;
_UpdateRoleRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<UpdateRoleRequestPrivilegesEnum>",
        "format": ""
    }
];
var UpdateRoleRequest = _UpdateRoleRequest;
// models/UpdateScheduleRequest.ts
var _UpdateScheduleRequest = /*#__PURE__*/ function() {
    function _UpdateScheduleRequest() {
        _class_call_check(this, _UpdateScheduleRequest);
    }
    _create_class(_UpdateScheduleRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateScheduleRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateScheduleRequest;
}();
_UpdateScheduleRequest.discriminator = void 0;
_UpdateScheduleRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "metadata_type",
        "baseName": "metadata_type",
        "type": "UpdateScheduleRequestMetadataTypeEnum",
        "format": ""
    },
    {
        "name": "metadata_identifier",
        "baseName": "metadata_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "file_format",
        "baseName": "file_format",
        "type": "UpdateScheduleRequestFileFormatEnum",
        "format": ""
    },
    {
        "name": "liveboard_options",
        "baseName": "liveboard_options",
        "type": "LiveboardOptionsInput",
        "format": ""
    },
    {
        "name": "pdf_options",
        "baseName": "pdf_options",
        "type": "SchedulesPdfOptionsInput",
        "format": ""
    },
    {
        "name": "time_zone",
        "baseName": "time_zone",
        "type": "UpdateScheduleRequestTimeZoneEnum",
        "format": ""
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "FrequencyInput",
        "format": ""
    },
    {
        "name": "recipient_details",
        "baseName": "recipient_details",
        "type": "RecipientDetailsInput",
        "format": ""
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "UpdateScheduleRequestStatusEnum",
        "format": ""
    }
];
var UpdateScheduleRequest = _UpdateScheduleRequest;
// models/UpdateSystemConfigRequest.ts
var _UpdateSystemConfigRequest = /*#__PURE__*/ function() {
    function _UpdateSystemConfigRequest() {
        _class_call_check(this, _UpdateSystemConfigRequest);
    }
    _create_class(_UpdateSystemConfigRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateSystemConfigRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateSystemConfigRequest;
}();
_UpdateSystemConfigRequest.discriminator = void 0;
_UpdateSystemConfigRequest.attributeTypeMap = [
    {
        "name": "configuration",
        "baseName": "configuration",
        "type": "any",
        "format": ""
    }
];
var UpdateSystemConfigRequest = _UpdateSystemConfigRequest;
// models/UpdateTagRequest.ts
var _UpdateTagRequest = /*#__PURE__*/ function() {
    function _UpdateTagRequest() {
        _class_call_check(this, _UpdateTagRequest);
    }
    _create_class(_UpdateTagRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateTagRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateTagRequest;
}();
_UpdateTagRequest.discriminator = void 0;
_UpdateTagRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "color",
        "baseName": "color",
        "type": "string",
        "format": ""
    }
];
var UpdateTagRequest = _UpdateTagRequest;
// models/UpdateUserGroupRequest.ts
var _UpdateUserGroupRequest = /*#__PURE__*/ function() {
    function _UpdateUserGroupRequest() {
        _class_call_check(this, _UpdateUserGroupRequest);
    }
    _create_class(_UpdateUserGroupRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateUserGroupRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateUserGroupRequest;
}();
_UpdateUserGroupRequest.discriminator = void 0;
_UpdateUserGroupRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "default_liveboard_identifiers",
        "baseName": "default_liveboard_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<UpdateUserGroupRequestPrivilegesEnum>",
        "format": ""
    },
    {
        "name": "sub_group_identifiers",
        "baseName": "sub_group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "UpdateUserGroupRequestTypeEnum",
        "format": ""
    },
    {
        "name": "user_identifiers",
        "baseName": "user_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "UpdateUserGroupRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "role_identifiers",
        "baseName": "role_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "operation",
        "baseName": "operation",
        "type": "UpdateUserGroupRequestOperationEnum",
        "format": ""
    }
];
var UpdateUserGroupRequest = _UpdateUserGroupRequest;
// models/UpdateUserRequest.ts
var _UpdateUserRequest = /*#__PURE__*/ function() {
    function _UpdateUserRequest() {
        _class_call_check(this, _UpdateUserRequest);
    }
    _create_class(_UpdateUserRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UpdateUserRequest.attributeTypeMap;
            }
        }
    ]);
    return _UpdateUserRequest;
}();
_UpdateUserRequest.discriminator = void 0;
_UpdateUserRequest.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "UpdateUserRequestVisibilityEnum",
        "format": ""
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "account_status",
        "baseName": "account_status",
        "type": "UpdateUserRequestAccountStatusEnum",
        "format": ""
    },
    {
        "name": "notify_on_share",
        "baseName": "notify_on_share",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "show_onboarding_experience",
        "baseName": "show_onboarding_experience",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "onboarding_experience_completed",
        "baseName": "onboarding_experience_completed",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "account_type",
        "baseName": "account_type",
        "type": "UpdateUserRequestAccountTypeEnum",
        "format": ""
    },
    {
        "name": "group_identifiers",
        "baseName": "group_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "home_liveboard_identifier",
        "baseName": "home_liveboard_identifier",
        "type": "string",
        "format": ""
    },
    {
        "name": "favorite_metadata",
        "baseName": "favorite_metadata",
        "type": "Array<FavoriteMetadataInput>",
        "format": ""
    },
    {
        "name": "org_identifiers",
        "baseName": "org_identifiers",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "operation",
        "baseName": "operation",
        "type": "UpdateUserRequestOperationEnum",
        "format": ""
    },
    {
        "name": "preferred_locale",
        "baseName": "preferred_locale",
        "type": "UpdateUserRequestPreferredLocaleEnum",
        "format": ""
    },
    {
        "name": "extended_properties",
        "baseName": "extended_properties",
        "type": "any",
        "format": ""
    },
    {
        "name": "extended_preferences",
        "baseName": "extended_preferences",
        "type": "any",
        "format": ""
    }
];
var UpdateUserRequest = _UpdateUserRequest;
// models/User.ts
var _User = /*#__PURE__*/ function() {
    function _User() {
        _class_call_check(this, _User);
    }
    _create_class(_User, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _User.attributeTypeMap;
            }
        }
    ]);
    return _User;
}();
_User.discriminator = void 0;
_User.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "UserVisibilityEnum",
        "format": ""
    },
    {
        "name": "author_id",
        "baseName": "author_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "can_change_password",
        "baseName": "can_change_password",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "complete_detail",
        "baseName": "complete_detail",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "current_org",
        "baseName": "current_org",
        "type": "Org",
        "format": ""
    },
    {
        "name": "deleted",
        "baseName": "deleted",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "deprecated",
        "baseName": "deprecated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "account_type",
        "baseName": "account_type",
        "type": "UserAccountTypeEnum",
        "format": ""
    },
    {
        "name": "account_status",
        "baseName": "account_status",
        "type": "UserAccountStatusEnum",
        "format": ""
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string",
        "format": ""
    },
    {
        "name": "expiration_time_in_millis",
        "baseName": "expiration_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "external",
        "baseName": "external",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "favorite_metadata",
        "baseName": "favorite_metadata",
        "type": "Array<FavoriteMetadataItem>",
        "format": ""
    },
    {
        "name": "first_login_time_in_millis",
        "baseName": "first_login_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "group_mask",
        "baseName": "group_mask",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "hidden",
        "baseName": "hidden",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "home_liveboard",
        "baseName": "home_liveboard",
        "type": "ObjectIDAndName",
        "format": ""
    },
    {
        "name": "incomplete_details",
        "baseName": "incomplete_details",
        "type": "any",
        "format": ""
    },
    {
        "name": "is_first_login",
        "baseName": "is_first_login",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "modification_time_in_millis",
        "baseName": "modification_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "modifier_id",
        "baseName": "modifier_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "notify_on_share",
        "baseName": "notify_on_share",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "onboarding_experience_completed",
        "baseName": "onboarding_experience_completed",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "orgs",
        "baseName": "orgs",
        "type": "Array<Org>",
        "format": ""
    },
    {
        "name": "owner_id",
        "baseName": "owner_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "parent_type",
        "baseName": "parent_type",
        "type": "UserParentTypeEnum",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "show_onboarding_experience",
        "baseName": "show_onboarding_experience",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "super_user",
        "baseName": "super_user",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "system_user",
        "baseName": "system_user",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "tags",
        "baseName": "tags",
        "type": "Array<ObjectIDAndName>",
        "format": ""
    },
    {
        "name": "tenant_id",
        "baseName": "tenant_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "user_groups",
        "baseName": "user_groups",
        "type": "Array<ObjectIDAndName>",
        "format": ""
    },
    {
        "name": "user_inherited_groups",
        "baseName": "user_inherited_groups",
        "type": "Array<ObjectIDAndName>",
        "format": ""
    },
    {
        "name": "welcome_email_sent",
        "baseName": "welcome_email_sent",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "org_privileges",
        "baseName": "org_privileges",
        "type": "any",
        "format": ""
    },
    {
        "name": "preferred_locale",
        "baseName": "preferred_locale",
        "type": "string",
        "format": ""
    },
    {
        "name": "extended_properties",
        "baseName": "extended_properties",
        "type": "any",
        "format": ""
    },
    {
        "name": "extended_preferences",
        "baseName": "extended_preferences",
        "type": "any",
        "format": ""
    }
];
var User = _User;
// models/UserGroup.ts
var _UserGroup = /*#__PURE__*/ function() {
    function _UserGroup() {
        _class_call_check(this, _UserGroup);
    }
    _create_class(_UserGroup, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UserGroup.attributeTypeMap;
            }
        }
    ]);
    return _UserGroup;
}();
_UserGroup.discriminator = void 0;
_UserGroup.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    }
];
var UserGroup = _UserGroup;
// models/UserGroupResponse.ts
var _UserGroupResponse = /*#__PURE__*/ function() {
    function _UserGroupResponse() {
        _class_call_check(this, _UserGroupResponse);
    }
    _create_class(_UserGroupResponse, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _UserGroupResponse.attributeTypeMap;
            }
        }
    ]);
    return _UserGroupResponse;
}();
_UserGroupResponse.discriminator = void 0;
_UserGroupResponse.attributeTypeMap = [
    {
        "name": "author_id",
        "baseName": "author_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "complete_detail",
        "baseName": "complete_detail",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "content",
        "baseName": "content",
        "type": "any",
        "format": ""
    },
    {
        "name": "creation_time_in_millis",
        "baseName": "creation_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "default_liveboards",
        "baseName": "default_liveboards",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "deleted",
        "baseName": "deleted",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "deprecated",
        "baseName": "deprecated",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string",
        "format": ""
    },
    {
        "name": "display_name",
        "baseName": "display_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "external",
        "baseName": "external",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "generation_number",
        "baseName": "generation_number",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "hidden",
        "baseName": "hidden",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "index",
        "baseName": "index",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "index_version",
        "baseName": "index_version",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "metadata_version",
        "baseName": "metadata_version",
        "type": "number",
        "format": "int32"
    },
    {
        "name": "modification_time_in_millis",
        "baseName": "modification_time_in_millis",
        "type": "number",
        "format": "float"
    },
    {
        "name": "modifier_id",
        "baseName": "modifier_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string",
        "format": ""
    },
    {
        "name": "orgs",
        "baseName": "orgs",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "owner_id",
        "baseName": "owner_id",
        "type": "string",
        "format": ""
    },
    {
        "name": "parent_type",
        "baseName": "parent_type",
        "type": "UserGroupResponseParentTypeEnum",
        "format": ""
    },
    {
        "name": "privileges",
        "baseName": "privileges",
        "type": "Array<string>",
        "format": ""
    },
    {
        "name": "sub_groups",
        "baseName": "sub_groups",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "system_group",
        "baseName": "system_group",
        "type": "boolean",
        "format": ""
    },
    {
        "name": "tags",
        "baseName": "tags",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "UserGroupResponseTypeEnum",
        "format": ""
    },
    {
        "name": "users",
        "baseName": "users",
        "type": "Array<UserGroup>",
        "format": ""
    },
    {
        "name": "visibility",
        "baseName": "visibility",
        "type": "UserGroupResponseVisibilityEnum",
        "format": ""
    },
    {
        "name": "roles",
        "baseName": "roles",
        "type": "Array<Role>",
        "format": ""
    }
];
var UserGroupResponse = _UserGroupResponse;
// models/ValidateMergeRequest.ts
var _ValidateMergeRequest = /*#__PURE__*/ function() {
    function _ValidateMergeRequest() {
        _class_call_check(this, _ValidateMergeRequest);
    }
    _create_class(_ValidateMergeRequest, null, [
        {
            key: "getAttributeTypeMap",
            value: function getAttributeTypeMap() {
                return _ValidateMergeRequest.attributeTypeMap;
            }
        }
    ]);
    return _ValidateMergeRequest;
}();
_ValidateMergeRequest.discriminator = void 0;
_ValidateMergeRequest.attributeTypeMap = [
    {
        "name": "source_branch_name",
        "baseName": "source_branch_name",
        "type": "string",
        "format": ""
    },
    {
        "name": "target_branch_name",
        "baseName": "target_branch_name",
        "type": "string",
        "format": ""
    }
];
var ValidateMergeRequest = _ValidateMergeRequest;
// middleware.ts
var PromiseMiddlewareWrapper = /*#__PURE__*/ function() {
    function PromiseMiddlewareWrapper(middleware) {
        _class_call_check(this, PromiseMiddlewareWrapper);
        this.middleware = middleware;
    }
    _create_class(PromiseMiddlewareWrapper, [
        {
            key: "pre",
            value: function pre(context) {
                return from(this.middleware.pre(context));
            }
        },
        {
            key: "post",
            value: function post(context) {
                return from(this.middleware.post(context));
            }
        }
    ]);
    return PromiseMiddlewareWrapper;
}();
// servers.ts
var ServerConfiguration = /*#__PURE__*/ function() {
    function ServerConfiguration(url, variableConfiguration) {
        _class_call_check(this, ServerConfiguration);
        this.url = url;
        this.variableConfiguration = variableConfiguration;
    }
    _create_class(ServerConfiguration, [
        {
            /**
   * Sets the value of the variables of this server. Variables are included in 
   * the `url` of this ServerConfiguration in the form `{variableName}`
   *
   * @param variableConfiguration a partial variable configuration for the 
   * variables contained in the url
   */ key: "setVariables",
            value: function setVariables(variableConfiguration) {
                Object.assign(this.variableConfiguration, variableConfiguration);
            }
        },
        {
            key: "getConfiguration",
            value: function getConfiguration() {
                return this.variableConfiguration;
            }
        },
        {
            key: "getUrl",
            value: function getUrl() {
                var replacedUrl = this.url;
                for(var key in this.variableConfiguration){
                    var re = new RegExp("{" + key + "}", "g");
                    replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);
                }
                return replacedUrl;
            }
        },
        {
            /**
   * Creates a new request context for this server using the url with variables
   * replaced with their respective values and the endpoint of the request appended.
   *
   * @param endpoint the endpoint to be queried on the server
   * @param httpMethod httpMethod to be used
   *
   */ key: "makeRequestContext",
            value: function makeRequestContext(endpoint, httpMethod) {
                return new RequestContext2(this.getUrl() + endpoint, httpMethod);
            }
        }
    ]);
    return ServerConfiguration;
}();
var server1 = new ServerConfiguration("{base-url}", {
    "base-url": "https://localhost:443"
});
var servers = [
    server1
];
// configuration.ts
function createConfiguration() {
    var conf = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var configuration = {
        baseServer: conf.baseServer !== void 0 ? conf.baseServer : server1,
        httpApi: conf.httpApi || new IsomorphicFetchHttpLibrary(),
        middleware: conf.middleware || [],
        authMethods: configureAuthMethods(conf.authMethods)
    };
    if (conf.promiseMiddleware) {
        conf.promiseMiddleware.forEach(function(m) {
            return configuration.middleware.push(new PromiseMiddlewareWrapper(m));
        });
    }
    return configuration;
}
// apis/exception.ts
var ApiException = /*#__PURE__*/ function(Error1) {
    _inherits(ApiException, Error1);
    var _super = _create_super(ApiException);
    function ApiException(code, message, body, headers) {
        _class_call_check(this, ApiException);
        var _this;
        _this = _super.call(this, "HTTP-Code: " + code + "\nMessage: " + message + "\nBody: " + JSON.stringify(body) + "\nHeaders: " + JSON.stringify(headers));
        _this.code = code;
        _this.body = body;
        _this.headers = headers;
        return _this;
    }
    return ApiException;
}(_wrap_native_super(Error));
// apis/baseapi.ts
var BaseAPIRequestFactory = function BaseAPIRequestFactory(configuration) {
    _class_call_check(this, BaseAPIRequestFactory);
    this.configuration = configuration;
};
var RequiredError = /*#__PURE__*/ function(Error1) {
    _inherits(RequiredError, Error1);
    var _super = _create_super(RequiredError);
    function RequiredError(api, method, field) {
        _class_call_check(this, RequiredError);
        var _this;
        _this = _super.call(this, "Required parameter " + field + " was null or undefined when calling " + api + "." + method + ".");
        _this.api = api;
        _this.method = method;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(_wrap_native_super(Error));
// models/ObjectSerializer.ts
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var supportedMediaTypes = {
    "application/json": Infinity,
    "application/octet-stream": 0,
    "application/x-www-form-urlencoded": 0
};
var enumsMap = /* @__PURE__ */ new Set([
    "ActionConfigInputPositionEnum",
    "ActionConfigInputCreatePositionEnum",
    "AssociateMetadataInputTypeEnum",
    "AssociateMetadataInputCreateTypeEnum",
    "AuthorMetadataTypeInputTypeEnum",
    "CreateConnectionRequestDataWarehouseTypeEnum",
    "CreateConnectionResponseDataWarehouseTypeEnum",
    "CreateRoleRequestPrivilegesEnum",
    "CreateScheduleRequestMetadataTypeEnum",
    "CreateScheduleRequestFileFormatEnum",
    "CreateScheduleRequestTimeZoneEnum",
    "CreateUserGroupRequestPrivilegesEnum",
    "CreateUserGroupRequestTypeEnum",
    "CreateUserGroupRequestVisibilityEnum",
    "CreateUserRequestAccountTypeEnum",
    "CreateUserRequestAccountStatusEnum",
    "CreateUserRequestVisibilityEnum",
    "CreateUserRequestPreferredLocaleEnum",
    "CustomActionMetadataTypeInputTypeEnum",
    "DeleteMetadataTypeInputTypeEnum",
    "DeployCommitRequestDeployTypeEnum",
    "DeployCommitRequestDeployPolicyEnum",
    "ExcludeMetadataListItemInputTypeEnum",
    "ExportAnswerReportRequestFileFormatEnum",
    "ExportLiveboardReportRequestFileFormatEnum",
    "ExportMetadataTMLRequestEdocFormatEnum",
    "ExportMetadataTypeInputTypeEnum",
    "FavoriteMetadataInputTypeEnum",
    "FavoriteMetadataItemTypeEnum",
    "FetchAnswerDataRequestDataFormatEnum",
    "FetchLiveboardDataRequestDataFormatEnum",
    "FetchLogsRequestLogTypeEnum",
    "GroupsImportListInputPrivilegesEnum",
    "GroupsImportListInputTypeEnum",
    "GroupsImportListInputVisibilityEnum",
    "ImportMetadataTMLRequestImportPolicyEnum",
    "ImportUserAccountTypeEnum",
    "ImportUserAccountStatusEnum",
    "ImportUserVisibilityEnum",
    "JWTMetadataObjectTypeEnum",
    "MetadataInputTypeEnum",
    "MetadataListItemInputTypeEnum",
    "MetadataObjectTypeEnum",
    "MetadataResponseTypeEnum",
    "MetadataSearchResponseMetadataTypeEnum",
    "MetadataSearchSortOptionsFieldNameEnum",
    "MetadataSearchSortOptionsOrderEnum",
    "OrgResponseStatusEnum",
    "OrgResponseVisibilityEnum",
    "PdfOptionsPageSizeEnum",
    "PdfOptionsInputPageOrientationEnum",
    "PermissionInputShareModeEnum",
    "PermissionsMetadataTypeInputTypeEnum",
    "PrincipalsInputTypeEnum",
    "RevertCommitRequestRevertPolicyEnum",
    "RoleResponsePrivilegesEnum",
    "RoleResponsePermissionEnum",
    "SchedulesPdfOptionsInputPageSizeEnum",
    "SearchCommitsRequestMetadataTypeEnum",
    "SearchConnectionRequestDataWarehouseTypesEnum",
    "SearchConnectionRequestDataWarehouseObjectTypeEnum",
    "SearchConnectionRequestAuthenticationTypeEnum",
    "SearchConnectionResponseDataWarehouseTypeEnum",
    "SearchCustomActionsRequestTypeEnum",
    "SearchDataRequestDataFormatEnum",
    "SearchMetadataRequestDependentObjectVersionEnum",
    "SearchOrgsRequestVisibilityEnum",
    "SearchOrgsRequestStatusEnum",
    "SearchRoleResponsePrivilegesEnum",
    "SearchRoleResponsePermissionEnum",
    "SearchRolesRequestPrivilegesEnum",
    "SearchRolesRequestPermissionsEnum",
    "SearchUserGroupsRequestPrivilegesEnum",
    "SearchUserGroupsRequestTypeEnum",
    "SearchUserGroupsRequestVisibilityEnum",
    "SearchUsersRequestVisibilityEnum",
    "SearchUsersRequestPrivilegesEnum",
    "SearchUsersRequestAccountTypeEnum",
    "SearchUsersRequestAccountStatusEnum",
    "ShareMetadataRequestMetadataTypeEnum",
    "SharePermissionsInputShareModeEnum",
    "SortOptionInputFieldNameEnum",
    "SortOptionInputOrderEnum",
    "SortOptionsFieldNameEnum",
    "SortOptionsOrderEnum",
    "SqlQueryResponseMetadataTypeEnum",
    "TagMetadataTypeInputTypeEnum",
    "UpdateCustomActionRequestOperationEnum",
    "UpdateOrgRequestOperationEnum",
    "UpdateRoleRequestPrivilegesEnum",
    "UpdateScheduleRequestMetadataTypeEnum",
    "UpdateScheduleRequestFileFormatEnum",
    "UpdateScheduleRequestTimeZoneEnum",
    "UpdateScheduleRequestStatusEnum",
    "UpdateUserGroupRequestPrivilegesEnum",
    "UpdateUserGroupRequestTypeEnum",
    "UpdateUserGroupRequestVisibilityEnum",
    "UpdateUserGroupRequestOperationEnum",
    "UpdateUserRequestVisibilityEnum",
    "UpdateUserRequestAccountStatusEnum",
    "UpdateUserRequestAccountTypeEnum",
    "UpdateUserRequestOperationEnum",
    "UpdateUserRequestPreferredLocaleEnum",
    "UserVisibilityEnum",
    "UserAccountTypeEnum",
    "UserAccountStatusEnum",
    "UserParentTypeEnum",
    "UserGroupResponseParentTypeEnum",
    "UserGroupResponseTypeEnum",
    "UserGroupResponseVisibilityEnum"
]);
var typeMap = {
    "APIKey": APIKey,
    "APIKeyInput": APIKeyInput,
    "ActionConfig": ActionConfig,
    "ActionConfigInput": ActionConfigInput,
    "ActionConfigInputCreate": ActionConfigInputCreate,
    "ActionDetails": ActionDetails,
    "ActionDetailsInput": ActionDetailsInput,
    "ActionDetailsInputCreate": ActionDetailsInputCreate,
    "AnswerContent": AnswerContent,
    "AnswerDataResponse": AnswerDataResponse,
    "AssignChangeAuthorRequest": AssignChangeAuthorRequest,
    "AssignTagRequest": AssignTagRequest,
    "AssociateMetadataInput": AssociateMetadataInput,
    "AssociateMetadataInputCreate": AssociateMetadataInputCreate,
    "Authentication": Authentication,
    "AuthenticationInput": AuthenticationInput,
    "Author": Author,
    "AuthorMetadataTypeInput": AuthorMetadataTypeInput,
    "AuthorType": AuthorType,
    "BasicAuth": BasicAuth,
    "BasicAuthInput": BasicAuthInput,
    "CALLBACK": CALLBACK,
    "CALLBACKInput": CALLBACKInput,
    "CALLBACKInputMandatory": CALLBACKInputMandatory,
    "ChangeUserPasswordRequest": ChangeUserPasswordRequest,
    "Column": Column,
    "CommitBranchRequest": CommitBranchRequest,
    "CommitFileType": CommitFileType,
    "CommitHistoryResponse": CommitHistoryResponse,
    "CommitResponse": CommitResponse,
    "CommiterType": CommiterType,
    "ConnectionInput": ConnectionInput,
    "CreateConfigRequest": CreateConfigRequest,
    "CreateConnectionRequest": CreateConnectionRequest,
    "CreateConnectionResponse": CreateConnectionResponse,
    "CreateCustomActionRequest": CreateCustomActionRequest,
    "CreateOrgRequest": CreateOrgRequest,
    "CreateRoleRequest": CreateRoleRequest,
    "CreateScheduleRequest": CreateScheduleRequest,
    "CreateTagRequest": CreateTagRequest,
    "CreateUserGroupRequest": CreateUserGroupRequest,
    "CreateUserRequest": CreateUserRequest,
    "CronExpression": CronExpression,
    "CronExpressionInput": CronExpressionInput,
    "CustomActionMetadataTypeInput": CustomActionMetadataTypeInput,
    "DataWarehouseObjectInput": DataWarehouseObjectInput,
    "DataWarehouseObjects": DataWarehouseObjects,
    "Database": Database,
    "DefaultActionConfig": DefaultActionConfig,
    "DefaultActionConfigInput": DefaultActionConfigInput,
    "DefaultActionConfigInputCreate": DefaultActionConfigInputCreate,
    "DefaultActionConfigSearchInput": DefaultActionConfigSearchInput,
    "DeleteConfigRequest": DeleteConfigRequest,
    "DeleteConnectionRequest": DeleteConnectionRequest,
    "DeleteMetadataRequest": DeleteMetadataRequest,
    "DeleteMetadataTypeInput": DeleteMetadataTypeInput,
    "DeployCommitRequest": DeployCommitRequest,
    "DeployResponse": DeployResponse,
    "ErrorResponse": ErrorResponse,
    "ExcludeMetadataListItemInput": ExcludeMetadataListItemInput,
    "ExportAnswerReportRequest": ExportAnswerReportRequest,
    "ExportLiveboardReportRequest": ExportLiveboardReportRequest,
    "ExportMetadataTMLRequest": ExportMetadataTMLRequest,
    "ExportMetadataTypeInput": ExportMetadataTypeInput,
    "FavoriteMetadataInput": FavoriteMetadataInput,
    "FavoriteMetadataItem": FavoriteMetadataItem,
    "FavoriteObjectOptionsInput": FavoriteObjectOptionsInput,
    "FetchAnswerDataRequest": FetchAnswerDataRequest,
    "FetchAnswerSqlQueryRequest": FetchAnswerSqlQueryRequest,
    "FetchConnectionDiffStatusResponse": FetchConnectionDiffStatusResponse,
    "FetchLiveboardDataRequest": FetchLiveboardDataRequest,
    "FetchLiveboardSqlQueryRequest": FetchLiveboardSqlQueryRequest,
    "FetchLogsRequest": FetchLogsRequest,
    "FetchPermissionsOfPrincipalsRequest": FetchPermissionsOfPrincipalsRequest,
    "FetchPermissionsOnMetadataRequest": FetchPermissionsOnMetadataRequest,
    "ForceLogoutUsersRequest": ForceLogoutUsersRequest,
    "Frequency": Frequency,
    "FrequencyInput": FrequencyInput,
    "GenericInfo": GenericInfo,
    "GetFullAccessTokenRequest": GetFullAccessTokenRequest,
    "GetObjectAccessTokenRequest": GetObjectAccessTokenRequest,
    "GetTokenResponse": GetTokenResponse,
    "GroupsImportListInput": GroupsImportListInput,
    "ImportMetadataTMLRequest": ImportMetadataTMLRequest,
    "ImportUser": ImportUser,
    "ImportUserGroupsRequest": ImportUserGroupsRequest,
    "ImportUserGroupsResponse": ImportUserGroupsResponse,
    "ImportUserType": ImportUserType,
    "ImportUsersRequest": ImportUsersRequest,
    "ImportUsersResponse": ImportUsersResponse,
    "JWTMetadataObject": JWTMetadataObject,
    "JWTParameter": JWTParameter,
    "JWTUserOptions": JWTUserOptions,
    "JWTUserOptionsParametersInner": JWTUserOptionsParametersInner,
    "LiveboardContent": LiveboardContent,
    "LiveboardDataResponse": LiveboardDataResponse,
    "LiveboardOptions": LiveboardOptions,
    "LiveboardOptionsInput": LiveboardOptionsInput,
    "LogResponse": LogResponse,
    "LoginRequest": LoginRequest,
    "MetadataAssociationItem": MetadataAssociationItem,
    "MetadataInput": MetadataInput,
    "MetadataListItemInput": MetadataListItemInput,
    "MetadataObject": MetadataObject,
    "MetadataResponse": MetadataResponse,
    "MetadataSearchResponse": MetadataSearchResponse,
    "MetadataSearchSortOptions": MetadataSearchSortOptions,
    "ModelTableList": ModelTableList,
    "ObjectIDAndName": ObjectIDAndName,
    "Org": Org,
    "OrgResponse": OrgResponse,
    "ParametersListItem": ParametersListItem,
    "ParametersListItemInput": ParametersListItemInput,
    "PdfOptions": PdfOptions,
    "PdfOptionsInput": PdfOptionsInput,
    "PermissionInput": PermissionInput,
    "PermissionsMetadataTypeInput": PermissionsMetadataTypeInput,
    "PngOptionsInput": PngOptionsInput,
    "PrincipalsInput": PrincipalsInput,
    "PrincipalsListItem": PrincipalsListItem,
    "PrincipalsListItemInput": PrincipalsListItemInput,
    "RecipientDetails": RecipientDetails,
    "RecipientDetailsInput": RecipientDetailsInput,
    "RepoConfigObject": RepoConfigObject,
    "ResetUserPasswordRequest": ResetUserPasswordRequest,
    "ResponseActivationURL": ResponseActivationURL,
    "ResponseCustomAction": ResponseCustomAction,
    "ResponseSchedule": ResponseSchedule,
    "ResponseScheduleRun": ResponseScheduleRun,
    "RevertCommitRequest": RevertCommitRequest,
    "RevertResponse": RevertResponse,
    "RevertedMetadata": RevertedMetadata,
    "RevokeTokenRequest": RevokeTokenRequest,
    "RiseSetter": RiseSetter,
    "Role": Role,
    "RoleResponse": RoleResponse,
    "RuntimeFilter": RuntimeFilter,
    "RuntimeParamOverride": RuntimeParamOverride,
    "RuntimeSort": RuntimeSort,
    "ScheduleHistoryRunsOptionsInput": ScheduleHistoryRunsOptionsInput,
    "SchedulesPdfOptionsInput": SchedulesPdfOptionsInput,
    "SchemaObject": SchemaObject,
    "Scope": Scope,
    "SearchCommitsRequest": SearchCommitsRequest,
    "SearchConfigRequest": SearchConfigRequest,
    "SearchConnectionRequest": SearchConnectionRequest,
    "SearchConnectionResponse": SearchConnectionResponse,
    "SearchCustomActionsRequest": SearchCustomActionsRequest,
    "SearchDataRequest": SearchDataRequest,
    "SearchDataResponse": SearchDataResponse,
    "SearchMetadataRequest": SearchMetadataRequest,
    "SearchOrgsRequest": SearchOrgsRequest,
    "SearchRoleResponse": SearchRoleResponse,
    "SearchRolesRequest": SearchRolesRequest,
    "SearchSchedulesRequest": SearchSchedulesRequest,
    "SearchTagsRequest": SearchTagsRequest,
    "SearchUserGroupsRequest": SearchUserGroupsRequest,
    "SearchUsersRequest": SearchUsersRequest,
    "ShareMetadataRequest": ShareMetadataRequest,
    "SharePermissionsInput": SharePermissionsInput,
    "SortOptionInput": SortOptionInput,
    "SortOptions": SortOptions,
    "SortingOptions": SortingOptions,
    "SqlQuery": SqlQuery,
    "SqlQueryResponse": SqlQueryResponse,
    "SystemConfig": SystemConfig,
    "SystemInfo": SystemInfo,
    "Table": Table,
    "Tag": Tag,
    "TagMetadataTypeInput": TagMetadataTypeInput,
    "Token": Token,
    "URL": URL2,
    "URLInput": URLInput,
    "URLInputMandatory": URLInputMandatory,
    "UpdateConfigRequest": UpdateConfigRequest,
    "UpdateConnectionRequest": UpdateConnectionRequest,
    "UpdateCustomActionRequest": UpdateCustomActionRequest,
    "UpdateOrgRequest": UpdateOrgRequest,
    "UpdateRoleRequest": UpdateRoleRequest,
    "UpdateScheduleRequest": UpdateScheduleRequest,
    "UpdateSystemConfigRequest": UpdateSystemConfigRequest,
    "UpdateTagRequest": UpdateTagRequest,
    "UpdateUserGroupRequest": UpdateUserGroupRequest,
    "UpdateUserRequest": UpdateUserRequest,
    "User": User,
    "UserGroup": UserGroup,
    "UserGroupResponse": UserGroupResponse,
    "ValidateMergeRequest": ValidateMergeRequest
};
var ObjectSerializer = /*#__PURE__*/ function() {
    function _ObjectSerializer() {
        _class_call_check(this, _ObjectSerializer);
    }
    _create_class(_ObjectSerializer, null, [
        {
            key: "findCorrectType",
            value: function findCorrectType(data, expectedType) {
                if (data == void 0) {
                    return expectedType;
                } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
                    return expectedType;
                } else if (expectedType === "Date") {
                    return expectedType;
                } else {
                    if (enumsMap.has(expectedType)) {
                        return expectedType;
                    }
                    if (!typeMap[expectedType]) {
                        return expectedType;
                    }
                    var discriminatorProperty = typeMap[expectedType].discriminator;
                    if (discriminatorProperty == null) {
                        return expectedType;
                    } else {
                        if (data[discriminatorProperty]) {
                            var discriminatorType = data[discriminatorProperty];
                            if (typeMap[discriminatorType]) {
                                return discriminatorType;
                            } else {
                                return expectedType;
                            }
                        } else {
                            return expectedType;
                        }
                    }
                }
            }
        },
        {
            key: "serialize",
            value: function serialize(data, type, format) {
                if (data == void 0) {
                    return data;
                } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
                    return data;
                } else if (type.lastIndexOf("Array<", 0) === 0) {
                    var subType = type.replace("Array<", "");
                    subType = subType.substring(0, subType.length - 1);
                    var transformedData = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var date = _step.value;
                            transformedData.push(_ObjectSerializer.serialize(date, subType, format));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return transformedData;
                } else if (type === "Date") {
                    if (format == "date") {
                        var month = data.getMonth() + 1;
                        month = month < 10 ? "0" + month.toString() : month.toString();
                        var day = data.getDate();
                        day = day < 10 ? "0" + day.toString() : day.toString();
                        return data.getFullYear() + "-" + month + "-" + day;
                    } else {
                        return data.toISOString();
                    }
                } else {
                    if (enumsMap.has(type)) {
                        return data;
                    }
                    if (!typeMap[type]) {
                        return data;
                    }
                    type = this.findCorrectType(data, type);
                    var attributeTypes = typeMap[type].getAttributeTypeMap();
                    var instance = {};
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = attributeTypes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var attributeType = _step1.value;
                            instance[attributeType.baseName] = _ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
                        }
                    } catch (err) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                _iterator1.return();
                            }
                        } finally{
                            if (_didIteratorError1) {
                                throw _iteratorError1;
                            }
                        }
                    }
                    return instance;
                }
            }
        },
        {
            key: "deserialize",
            value: function deserialize(data, type, format) {
                type = _ObjectSerializer.findCorrectType(data, type);
                if (data == void 0) {
                    return data;
                } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
                    return data;
                } else if (type.lastIndexOf("Array<", 0) === 0) {
                    var subType = type.replace("Array<", "");
                    subType = subType.substring(0, subType.length - 1);
                    var transformedData = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var date = _step.value;
                            transformedData.push(_ObjectSerializer.deserialize(date, subType, format));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return transformedData;
                } else if (type === "Date") {
                    return new Date(data);
                } else {
                    if (enumsMap.has(type)) {
                        return data;
                    }
                    if (!typeMap[type]) {
                        return data;
                    }
                    var instance = new typeMap[type]();
                    var attributeTypes = typeMap[type].getAttributeTypeMap();
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = attributeTypes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var attributeType = _step1.value;
                            var value = _ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                            if (value !== void 0) {
                                instance[attributeType.name] = value;
                            }
                        }
                    } catch (err) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                _iterator1.return();
                            }
                        } finally{
                            if (_didIteratorError1) {
                                throw _iteratorError1;
                            }
                        }
                    }
                    return instance;
                }
            }
        },
        {
            key: "normalizeMediaType",
            value: /**
   * Normalize media type
   *
   * We currently do not handle any media types attributes, i.e. anything
   * after a semicolon. All content is assumed to be UTF-8 compatible.
   */ function normalizeMediaType(mediaType) {
                if (mediaType === void 0) {
                    return void 0;
                }
                return mediaType.split(";")[0].trim().toLowerCase();
            }
        },
        {
            key: "getPreferredMediaType",
            value: /**
   * From a list of possible media types, choose the one we can handle best.
   *
   * The order of the given media types does not have any impact on the choice
   * made.
   */ function getPreferredMediaType(mediaTypes) {
                if (!mediaTypes) {
                    return "application/json";
                }
                var normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
                var selectedMediaType = void 0;
                var selectedRank = -Infinity;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = normalMediaTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var mediaType = _step.value;
                        if (supportedMediaTypes[mediaType] > selectedRank) {
                            selectedMediaType = mediaType;
                            selectedRank = supportedMediaTypes[mediaType];
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (selectedMediaType === void 0) {
                    throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
                }
                return selectedMediaType;
            }
        },
        {
            key: "stringify",
            value: /**
   * Convert data to a string according the given media type
   */ function stringify(data, mediaType) {
                if (mediaType === "text/plain") {
                    return String(data);
                }
                if (mediaType === "application/json") {
                    return JSON.stringify(data);
                }
                throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
            }
        },
        {
            key: "parse",
            value: /**
   * Parse data from a string according to the given media type
   */ function parse(rawData, mediaType) {
                if (mediaType === void 0) {
                    throw new Error("Cannot parse content. No Content-Type defined.");
                }
                if (mediaType === "text/plain") {
                    return rawData;
                }
                if (mediaType === "application/json") {
                    return JSON.parse(rawData);
                }
                if (mediaType === "text/html") {
                    return rawData;
                }
                throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
            }
        }
    ]);
    return _ObjectSerializer;
}();
// util.ts
function isCodeInRange(codeRange, code) {
    if (codeRange === "0") {
        return true;
    }
    if (codeRange == code.toString()) {
        return true;
    } else {
        var codeString = code.toString();
        if (codeString.length != codeRange.length) {
            return false;
        }
        for(var i = 0; i < codeString.length; i++){
            if (codeRange.charAt(i) != "X" && codeRange.charAt(i) != codeString.charAt(i)) {
                return false;
            }
        }
        return true;
    }
}
// apis/AuthenticationApi.ts
var AuthenticationApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(AuthenticationApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(AuthenticationApiRequestFactory);
    function AuthenticationApiRequestFactory() {
        _class_call_check(this, AuthenticationApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(AuthenticationApiRequestFactory, [
        {
            key: "getCurrentUserInfo",
            value: /**
   *   Version: 9.0.0.cl or later   Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */ function getCurrentUserInfo(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/user";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentUserToken",
            value: /**
   *  Get token for the currently logged-in user. /n  Version: 9.4.0.cl or later  Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */ function getCurrentUserToken(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/token";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getFullAccessToken",
            value: /**
   *   Version: 9.0.0.cl or later  Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, specify the Org ID in the `org_id` attribute.  **Note**: This feature is available only on clusters with trusted authentication enabled.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getFullAccessTokenRequest 
   */ function getFullAccessToken(getFullAccessTokenRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (getFullAccessTokenRequest === null || getFullAccessTokenRequest === void 0) {
                                    throw new RequiredError("AuthenticationApi", "getFullAccessToken", "getFullAccessTokenRequest");
                                }
                                localVarPath = "/api/rest/2.0/auth/token/full";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(getFullAccessTokenRequest, "GetFullAccessTokenRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getObjectAccessToken",
            value: /**
   *   Version: 9.0.0.cl or later  Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, send the `Org ID` in the API request.  **Note**: This feature is available only if Trusted authentication is enabled on your cluster.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getObjectAccessTokenRequest 
   */ function getObjectAccessToken(getObjectAccessTokenRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (getObjectAccessTokenRequest === null || getObjectAccessTokenRequest === void 0) {
                                    throw new RequiredError("AuthenticationApi", "getObjectAccessToken", "getObjectAccessTokenRequest");
                                }
                                localVarPath = "/api/rest/2.0/auth/token/object";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(getObjectAccessTokenRequest, "GetObjectAccessTokenRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "login",
            value: /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  A successful login returns a session cookie that can be used in your subsequent API requests.      
   * @param loginRequest 
   */ function login(loginRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/login";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(loginRequest, "LoginRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "logout",
            value: /**
   *   Version: 9.0.0.cl or later   Logs out a user from their current session.      
   */ function logout(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/logout";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "revokeToken",
            value: /**
   *   Version: 9.0.0.cl or later   Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token) and [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */ function revokeToken(revokeTokenRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/token/revoke";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(revokeTokenRequest, "RevokeTokenRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return AuthenticationApiRequestFactory;
}(BaseAPIRequestFactory);
var AuthenticationApiResponseProcessor = /*#__PURE__*/ function() {
    function AuthenticationApiResponseProcessor() {
        _class_call_check(this, AuthenticationApiResponseProcessor);
    }
    _create_class(AuthenticationApiResponseProcessor, [
        {
            key: "getCurrentUserInfo",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserInfo
   * @throws ApiException if the response code was not in [200, 299]
   */ function getCurrentUserInfo(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentUserToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function getCurrentUserToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "GetTokenResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "GetTokenResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getFullAccessToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getFullAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function getFullAccessToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getObjectAccessToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getObjectAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function getObjectAccessToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "login",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to login
   * @throws ApiException if the response code was not in [200, 299]
   */ function login(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "logout",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to logout
   * @throws ApiException if the response code was not in [200, 299]
   */ function logout(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "revokeToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revokeToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function revokeToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return AuthenticationApiResponseProcessor;
}();
// apis/ConnectionsApi.ts
var ConnectionsApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(ConnectionsApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(ConnectionsApiRequestFactory);
    function ConnectionsApiRequestFactory() {
        _class_call_check(this, ConnectionsApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(ConnectionsApiRequestFactory, [
        {
            key: "createConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */ function createConnection(createConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createConnectionRequest === null || createConnectionRequest === void 0) {
                                    throw new RequiredError("ConnectionsApi", "createConnection", "createConnectionRequest");
                                }
                                localVarPath = "/api/rest/2.0/connection/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createConnectionRequest, "CreateConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConnectionRequest 
   */ function deleteConnection(deleteConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (deleteConnectionRequest === null || deleteConnectionRequest === void 0) {
                                    throw new RequiredError("ConnectionsApi", "deleteConnection", "deleteConnectionRequest");
                                }
                                localVarPath = "/api/rest/2.0/connection/delete";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deleteConnectionRequest, "DeleteConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`). ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ``` - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.     
   * @param searchConnectionRequest 
   */ function searchConnection(searchConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/connection/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchConnectionRequest, "SearchConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */ function updateConnection(updateConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (updateConnectionRequest === null || updateConnectionRequest === void 0) {
                                    throw new RequiredError("ConnectionsApi", "updateConnection", "updateConnectionRequest");
                                }
                                localVarPath = "/api/rest/2.0/connection/update";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateConnectionRequest, "UpdateConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return ConnectionsApiRequestFactory;
}(BaseAPIRequestFactory);
var ConnectionsApiResponseProcessor = /*#__PURE__*/ function() {
    function ConnectionsApiResponseProcessor() {
        _class_call_check(this, ConnectionsApiResponseProcessor);
    }
    _create_class(ConnectionsApiResponseProcessor, [
        {
            key: "createConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function createConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CreateConnectionResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CreateConnectionResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchConnectionResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchConnectionResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return ConnectionsApiResponseProcessor;
}();
// apis/CustomActionApi.ts
var CustomActionApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(CustomActionApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(CustomActionApiRequestFactory);
    function CustomActionApiRequestFactory() {
        _class_call_check(this, CustomActionApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(CustomActionApiRequestFactory, [
        {
            key: "createCustomAction",
            value: /**
   *   Version: 9.6.0.cl or later  Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param createCustomActionRequest 
   */ function createCustomAction(createCustomActionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createCustomActionRequest === null || createCustomActionRequest === void 0) {
                                    throw new RequiredError("CustomActionApi", "createCustomAction", "createCustomActionRequest");
                                }
                                localVarPath = "/api/rest/2.0/customization/custom-actions";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createCustomActionRequest, "CreateCustomActionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteCustomAction",
            value: /**
   *   Version: 9.6.0.cl or later  Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */ function deleteCustomAction(customActionIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (customActionIdentifier === null || customActionIdentifier === void 0) {
                                    throw new RequiredError("CustomActionApi", "deleteCustomAction", "customActionIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/delete".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchCustomActions",
            value: /**
   *   Version: 9.6.0.cl or later  Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCustomActionsRequest 
   */ function searchCustomActions(searchCustomActionsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/customization/custom-actions/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchCustomActionsRequest, "SearchCustomActionsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateCustomAction",
            value: /**
   *   Version: 9.6.0.cl or later  Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */ function updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (customActionIdentifier === null || customActionIdentifier === void 0) {
                                    throw new RequiredError("CustomActionApi", "updateCustomAction", "customActionIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/update".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateCustomActionRequest, "UpdateCustomActionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return CustomActionApiRequestFactory;
}(BaseAPIRequestFactory);
var CustomActionApiResponseProcessor = /*#__PURE__*/ function() {
    function CustomActionApiResponseProcessor() {
        _class_call_check(this, CustomActionApiResponseProcessor);
    }
    _create_class(CustomActionApiResponseProcessor, [
        {
            key: "createCustomAction",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */ function createCustomAction(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseCustomAction",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseCustomAction",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteCustomAction",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteCustomAction(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchCustomActions",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCustomActions
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchCustomActions(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseCustomAction>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseCustomAction>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateCustomAction",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateCustomAction(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return CustomActionApiResponseProcessor;
}();
// apis/DataApi.ts
var DataApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(DataApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(DataApiRequestFactory);
    function DataApiRequestFactory() {
        _class_call_check(this, DataApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(DataApiRequestFactory, [
        {
            key: "fetchAnswerData",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches data from a saved Answer.  Requires at least view access to the saved Answer.      
   * @param fetchAnswerDataRequest 
   */ function fetchAnswerData(fetchAnswerDataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchAnswerDataRequest === null || fetchAnswerDataRequest === void 0) {
                                    throw new RequiredError("DataApi", "fetchAnswerData", "fetchAnswerDataRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/answer/data";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchAnswerDataRequest, "FetchAnswerDataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardData",
            value: /**
   *   Version: 9.0.0.cl or later  Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param fetchLiveboardDataRequest 
   */ function fetchLiveboardData(fetchLiveboardDataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchLiveboardDataRequest === null || fetchLiveboardDataRequest === void 0) {
                                    throw new RequiredError("DataApi", "fetchLiveboardData", "fetchLiveboardDataRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/liveboard/data";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchLiveboardDataRequest, "FetchLiveboardDataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchData",
            value: /**
   *   Version: 9.0.0.cl or later  Generates an Answer from a given data source.  Requires at least view access to the data source.  #### Usage guidelines  To generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).   ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```      
   * @param searchDataRequest 
   */ function searchData(searchDataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (searchDataRequest === null || searchDataRequest === void 0) {
                                    throw new RequiredError("DataApi", "searchData", "searchDataRequest");
                                }
                                localVarPath = "/api/rest/2.0/searchdata";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchDataRequest, "SearchDataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return DataApiRequestFactory;
}(BaseAPIRequestFactory);
var DataApiResponseProcessor = /*#__PURE__*/ function() {
    function DataApiResponseProcessor() {
        _class_call_check(this, DataApiResponseProcessor);
    }
    _create_class(DataApiResponseProcessor, [
        {
            key: "fetchAnswerData",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerData
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchAnswerData(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "AnswerDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "AnswerDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardData",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardData
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchLiveboardData(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "LiveboardDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "LiveboardDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchData",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchData
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchData(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SearchDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SearchDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return DataApiResponseProcessor;
}();
// apis/GroupsApi.ts
var GroupsApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(GroupsApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(GroupsApiRequestFactory);
    function GroupsApiRequestFactory() {
        _class_call_check(this, GroupsApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(GroupsApiRequestFactory, [
        {
            key: "createUserGroup",
            value: /**
   *   Version: 9.0.0.cl or later  Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */ function createUserGroup(createUserGroupRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createUserGroupRequest === null || createUserGroupRequest === void 0) {
                                    throw new RequiredError("GroupsApi", "createUserGroup", "createUserGroupRequest");
                                }
                                localVarPath = "/api/rest/2.0/groups/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createUserGroupRequest, "CreateUserGroupRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUserGroup",
            value: /**
   *   Version: 9.0.0.cl or later  Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param groupIdentifier GUID or name of the group.
   */ function deleteUserGroup(groupIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (groupIdentifier === null || groupIdentifier === void 0) {
                                    throw new RequiredError("GroupsApi", "deleteUserGroup", "groupIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/groups/{group_identifier}/delete".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "importUserGroups",
            value: /**
   *   Version: 9.0.0.cl or later  Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */ function importUserGroups(importUserGroupsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/groups/import";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(importUserGroupsRequest, "ImportUserGroupsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchUserGroups",
            value: /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUserGroupsRequest 
   */ function searchUserGroups(searchUserGroupsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/groups/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchUserGroupsRequest, "SearchUserGroupsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateUserGroup",
            value: /**
   *   Version: 9.0.0.cl or later  Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */ function updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (groupIdentifier === null || groupIdentifier === void 0) {
                                    throw new RequiredError("GroupsApi", "updateUserGroup", "groupIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/groups/{group_identifier}/update".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateUserGroupRequest, "UpdateUserGroupRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return GroupsApiRequestFactory;
}(BaseAPIRequestFactory);
var GroupsApiResponseProcessor = /*#__PURE__*/ function() {
    function GroupsApiResponseProcessor() {
        _class_call_check(this, GroupsApiResponseProcessor);
    }
    _create_class(GroupsApiResponseProcessor, [
        {
            key: "createUserGroup",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */ function createUserGroup(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "UserGroupResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "UserGroupResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUserGroup",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteUserGroup(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "importUserGroups",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */ function importUserGroups(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUserGroupsResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUserGroupsResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchUserGroups",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchUserGroups(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<UserGroupResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<UserGroupResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateUserGroup",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateUserGroup(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return GroupsApiResponseProcessor;
}();
// apis/LogApi.ts
var LogApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(LogApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(LogApiRequestFactory);
    function LogApiRequestFactory() {
        _class_call_check(this, LogApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(LogApiRequestFactory, [
        {
            key: "fetchLogs",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance      
   * @param fetchLogsRequest 
   */ function fetchLogs(fetchLogsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchLogsRequest === null || fetchLogsRequest === void 0) {
                                    throw new RequiredError("LogApi", "fetchLogs", "fetchLogsRequest");
                                }
                                localVarPath = "/api/rest/2.0/logs/fetch";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchLogsRequest, "FetchLogsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return LogApiRequestFactory;
}(BaseAPIRequestFactory);
var LogApiResponseProcessor = /*#__PURE__*/ function() {
    function LogApiResponseProcessor() {
        _class_call_check(this, LogApiResponseProcessor);
    }
    _create_class(LogApiResponseProcessor, [
        {
            key: "fetchLogs",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLogs
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchLogs(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<LogResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<LogResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return LogApiResponseProcessor;
}();
// apis/MetadataApi.ts
var MetadataApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(MetadataApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(MetadataApiRequestFactory);
    function MetadataApiRequestFactory() {
        _class_call_check(this, MetadataApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(MetadataApiRequestFactory, [
        {
            key: "deleteMetadata",
            value: /**
   *   Version: 9.0.0.cl or later  Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteMetadataRequest 
   */ function deleteMetadata(deleteMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (deleteMetadataRequest === null || deleteMetadataRequest === void 0) {
                                    throw new RequiredError("MetadataApi", "deleteMetadata", "deleteMetadataRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/delete";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deleteMetadataRequest, "DeleteMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "exportMetadataTML",
            value: /**
   *   Version: 9.0.0.cl or later  Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.      
   * @param exportMetadataTMLRequest 
   */ function exportMetadataTML(exportMetadataTMLRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (exportMetadataTMLRequest === null || exportMetadataTMLRequest === void 0) {
                                    throw new RequiredError("MetadataApi", "exportMetadataTML", "exportMetadataTMLRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/tml/export";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(exportMetadataTMLRequest, "ExportMetadataTMLRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchAnswerSqlQuery",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */ function fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchAnswerSqlQueryRequest === null || fetchAnswerSqlQueryRequest === void 0) {
                                    throw new RequiredError("MetadataApi", "fetchAnswerSqlQuery", "fetchAnswerSqlQueryRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/answer/sql";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchAnswerSqlQueryRequest, "FetchAnswerSqlQueryRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardSqlQuery",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */ function fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchLiveboardSqlQueryRequest === null || fetchLiveboardSqlQueryRequest === void 0) {
                                    throw new RequiredError("MetadataApi", "fetchLiveboardSqlQuery", "fetchLiveboardSqlQueryRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/liveboard/sql";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchLiveboardSqlQueryRequest, "FetchLiveboardSqlQueryRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "importMetadataTML",
            value: /**
   *   Version: 9.0.0.cl or later  Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.      
   * @param importMetadataTMLRequest 
   */ function importMetadataTML(importMetadataTMLRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (importMetadataTMLRequest === null || importMetadataTMLRequest === void 0) {
                                    throw new RequiredError("MetadataApi", "importMetadataTML", "importMetadataTMLRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/tml/import";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(importMetadataTMLRequest, "ImportMetadataTMLRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchMetadata",
            value: /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  * To get all metadata objects, send the API request without any attributes. * To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. * To get a specific metadata object, specify the GUID. * To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response.      
   * @param searchMetadataRequest 
   */ function searchMetadata(searchMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/metadata/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchMetadataRequest, "SearchMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return MetadataApiRequestFactory;
}(BaseAPIRequestFactory);
var MetadataApiResponseProcessor = /*#__PURE__*/ function() {
    function MetadataApiResponseProcessor() {
        _class_call_check(this, MetadataApiResponseProcessor);
    }
    _create_class(MetadataApiResponseProcessor, [
        {
            key: "deleteMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "exportMetadataTML",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */ function exportMetadataTML(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchAnswerSqlQuery",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchAnswerSqlQuery(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardSqlQuery",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchLiveboardSqlQuery(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "importMetadataTML",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */ function importMetadataTML(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<MetadataSearchResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<MetadataSearchResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return MetadataApiResponseProcessor;
}();
// apis/OrgsApi.ts
var OrgsApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(OrgsApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(OrgsApiRequestFactory);
    function OrgsApiRequestFactory() {
        _class_call_check(this, OrgsApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(OrgsApiRequestFactory, [
        {
            key: "createOrg",
            value: /**
   *   Version: 9.0.0.cl or later  Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param createOrgRequest 
   */ function createOrg(createOrgRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createOrgRequest === null || createOrgRequest === void 0) {
                                    throw new RequiredError("OrgsApi", "createOrg", "createOrgRequest");
                                }
                                localVarPath = "/api/rest/2.0/orgs/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createOrgRequest, "CreateOrgRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteOrg",
            value: /**
   *   Version: 9.0.0.cl or later  Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */ function deleteOrg(orgIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (orgIdentifier === null || orgIdentifier === void 0) {
                                    throw new RequiredError("OrgsApi", "deleteOrg", "orgIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/orgs/{org_identifier}/delete".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchOrgs",
            value: /**
   *   Version: 9.0.0.cl or later  Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param searchOrgsRequest 
   */ function searchOrgs(searchOrgsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/orgs/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchOrgsRequest, "SearchOrgsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateOrg",
            value: /**
   *   Version: 9.0.0.cl or later  Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */ function updateOrg(orgIdentifier, updateOrgRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (orgIdentifier === null || orgIdentifier === void 0) {
                                    throw new RequiredError("OrgsApi", "updateOrg", "orgIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/orgs/{org_identifier}/update".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateOrgRequest, "UpdateOrgRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return OrgsApiRequestFactory;
}(BaseAPIRequestFactory);
var OrgsApiResponseProcessor = /*#__PURE__*/ function() {
    function OrgsApiResponseProcessor() {
        _class_call_check(this, OrgsApiResponseProcessor);
    }
    _create_class(OrgsApiResponseProcessor, [
        {
            key: "createOrg",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createOrg
   * @throws ApiException if the response code was not in [200, 299]
   */ function createOrg(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "OrgResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "OrgResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteOrg",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteOrg
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteOrg(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchOrgs",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchOrgs
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchOrgs(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<OrgResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<OrgResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateOrg",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateOrg
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateOrg(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return OrgsApiResponseProcessor;
}();
// apis/ReportsApi.ts
var ReportsApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(ReportsApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(ReportsApiRequestFactory);
    function ReportsApiRequestFactory() {
        _class_call_check(this, ReportsApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(ReportsApiRequestFactory, [
        {
            key: "exportAnswerReport",
            value: /**
   *   Version: 9.0.0.cl or later  Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  You can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.      
   * @param exportAnswerReportRequest 
   */ function exportAnswerReport(exportAnswerReportRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (exportAnswerReportRequest === null || exportAnswerReportRequest === void 0) {
                                    throw new RequiredError("ReportsApi", "exportAnswerReport", "exportAnswerReportRequest");
                                }
                                localVarPath = "/api/rest/2.0/report/answer";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(exportAnswerReportRequest, "ExportAnswerReportRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "exportLiveboardReport",
            value: /**
   *   Version: 9.0.0.cl or later  Exports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  You can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param exportLiveboardReportRequest 
   */ function exportLiveboardReport(exportLiveboardReportRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (exportLiveboardReportRequest === null || exportLiveboardReportRequest === void 0) {
                                    throw new RequiredError("ReportsApi", "exportLiveboardReport", "exportLiveboardReportRequest");
                                }
                                localVarPath = "/api/rest/2.0/report/liveboard";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(exportLiveboardReportRequest, "ExportLiveboardReportRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return ReportsApiRequestFactory;
}(BaseAPIRequestFactory);
var ReportsApiResponseProcessor = /*#__PURE__*/ function() {
    function ReportsApiResponseProcessor() {
        _class_call_check(this, ReportsApiResponseProcessor);
    }
    _create_class(ReportsApiResponseProcessor, [
        {
            key: "exportAnswerReport",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportAnswerReport
   * @throws ApiException if the response code was not in [200, 299]
   */ function exportAnswerReport(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("200", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "exportLiveboardReport",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportLiveboardReport
   * @throws ApiException if the response code was not in [200, 299]
   */ function exportLiveboardReport(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("200", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return ReportsApiResponseProcessor;
}();
// apis/RolesApi.ts
var RolesApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(RolesApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(RolesApiRequestFactory);
    function RolesApiRequestFactory() {
        _class_call_check(this, RolesApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(RolesApiRequestFactory, [
        {
            key: "createRole",
            value: /**
   * Creates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param createRoleRequest 
   */ function createRole(createRoleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createRoleRequest === null || createRoleRequest === void 0) {
                                    throw new RequiredError("RolesApi", "createRole", "createRoleRequest");
                                }
                                localVarPath = "/api/rest/2.0/roles/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createRoleRequest, "CreateRoleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteRole",
            value: /**
   * Deletes a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   */ function deleteRole(roleIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (roleIdentifier === null || roleIdentifier === void 0) {
                                    throw new RequiredError("RolesApi", "deleteRole", "roleIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/roles/{role_identifier}/delete".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchRoles",
            value: /**
   * Gets Roles configured on a ThoughtSpot instance. Requires cluster Administration, Role Administration or Group Administration privileges. /n  Version: 9.5.0.cl or later
   * @param searchRolesRequest 
   */ function searchRoles(searchRolesRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/roles/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchRolesRequest, "SearchRolesRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateRole",
            value: /**
   * Updates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   * @param updateRoleRequest 
   */ function updateRole(roleIdentifier, updateRoleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (roleIdentifier === null || roleIdentifier === void 0) {
                                    throw new RequiredError("RolesApi", "updateRole", "roleIdentifier");
                                }
                                if (updateRoleRequest === null || updateRoleRequest === void 0) {
                                    throw new RequiredError("RolesApi", "updateRole", "updateRoleRequest");
                                }
                                localVarPath = "/api/rest/2.0/roles/{role_identifier}/update".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateRoleRequest, "UpdateRoleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return RolesApiRequestFactory;
}(BaseAPIRequestFactory);
var RolesApiResponseProcessor = /*#__PURE__*/ function() {
    function RolesApiResponseProcessor() {
        _class_call_check(this, RolesApiResponseProcessor);
    }
    _create_class(RolesApiResponseProcessor, [
        {
            key: "createRole",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createRole
   * @throws ApiException if the response code was not in [200, 299]
   */ function createRole(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid parameters.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Internal error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteRole",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteRole
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteRole(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Internal error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchRoles",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchRoles
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchRoles(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchRoleResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Internal error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchRoleResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateRole",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateRole
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateRole(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return RolesApiResponseProcessor;
}();
// apis/SchedulesApi.ts
var SchedulesApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(SchedulesApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(SchedulesApiRequestFactory);
    function SchedulesApiRequestFactory() {
        _class_call_check(this, SchedulesApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(SchedulesApiRequestFactory, [
        {
            key: "createSchedule",
            value: /**
   *  Create schedule. /n  Version: 9.4.0.cl or later  Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).      
   * @param createScheduleRequest 
   */ function createSchedule(createScheduleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createScheduleRequest === null || createScheduleRequest === void 0) {
                                    throw new RequiredError("SchedulesApi", "createSchedule", "createScheduleRequest");
                                }
                                localVarPath = "/api/rest/2.0/schedules/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createScheduleRequest, "CreateScheduleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteSchedule",
            value: /**
   *  Deletes a scheduled job. /n  Version: 9.4.0.cl or later  Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.         
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */ function deleteSchedule(scheduleIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
                                    throw new RequiredError("SchedulesApi", "deleteSchedule", "scheduleIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/delete".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchSchedules",
            value: /**
   *  Search Schedules /n  Version: 9.4.0.cl or later  Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.      
   * @param searchSchedulesRequest 
   */ function searchSchedules(searchSchedulesRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/schedules/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchSchedulesRequest, "SearchSchedulesRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateSchedule",
            value: /**
   *  Update schedule. /n  Version: 9.4.0.cl or later  Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */ function updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
                                    throw new RequiredError("SchedulesApi", "updateSchedule", "scheduleIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/update".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateScheduleRequest, "UpdateScheduleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return SchedulesApiRequestFactory;
}(BaseAPIRequestFactory);
var SchedulesApiResponseProcessor = /*#__PURE__*/ function() {
    function SchedulesApiResponseProcessor() {
        _class_call_check(this, SchedulesApiResponseProcessor);
    }
    _create_class(SchedulesApiResponseProcessor, [
        {
            key: "createSchedule",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */ function createSchedule(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseSchedule",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseSchedule",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteSchedule",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteSchedule(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchSchedules",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchSchedules
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchSchedules(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseSchedule>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseSchedule>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateSchedule",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateSchedule(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return SchedulesApiResponseProcessor;
}();
// apis/SecurityApi.ts
var SecurityApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(SecurityApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(SecurityApiRequestFactory);
    function SecurityApiRequestFactory() {
        _class_call_check(this, SecurityApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(SecurityApiRequestFactory, [
        {
            key: "assignChangeAuthor",
            value: /**
   *   Version: 9.0.0.cl or later  Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param assignChangeAuthorRequest 
   */ function assignChangeAuthor(assignChangeAuthorRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (assignChangeAuthorRequest === null || assignChangeAuthorRequest === void 0) {
                                    throw new RequiredError("SecurityApi", "assignChangeAuthor", "assignChangeAuthorRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/metadata/assign";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(assignChangeAuthorRequest, "AssignChangeAuthorRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOfPrincipals",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.  #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */ function fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchPermissionsOfPrincipalsRequest === null || fetchPermissionsOfPrincipalsRequest === void 0) {
                                    throw new RequiredError("SecurityApi", "fetchPermissionsOfPrincipals", "fetchPermissionsOfPrincipalsRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/principals/fetch-permissions";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchPermissionsOfPrincipalsRequest, "FetchPermissionsOfPrincipalsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOnMetadata",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */ function fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchPermissionsOnMetadataRequest === null || fetchPermissionsOnMetadataRequest === void 0) {
                                    throw new RequiredError("SecurityApi", "fetchPermissionsOnMetadata", "fetchPermissionsOnMetadataRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/metadata/fetch-permissions";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchPermissionsOnMetadataRequest, "FetchPermissionsOnMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "shareMetadata",
            value: /**
   *   Version: 9.0.0.cl or later  Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */ function shareMetadata(shareMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (shareMetadataRequest === null || shareMetadataRequest === void 0) {
                                    throw new RequiredError("SecurityApi", "shareMetadata", "shareMetadataRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/metadata/share";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(shareMetadataRequest, "ShareMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return SecurityApiRequestFactory;
}(BaseAPIRequestFactory);
var SecurityApiResponseProcessor = /*#__PURE__*/ function() {
    function SecurityApiResponseProcessor() {
        _class_call_check(this, SecurityApiResponseProcessor);
    }
    _create_class(SecurityApiResponseProcessor, [
        {
            key: "assignChangeAuthor",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignChangeAuthor
   * @throws ApiException if the response code was not in [200, 299]
   */ function assignChangeAuthor(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOfPrincipals",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOfPrincipals
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchPermissionsOfPrincipals(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOnMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOnMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchPermissionsOnMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "shareMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to shareMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function shareMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return SecurityApiResponseProcessor;
}();
// apis/SystemApi.ts
var SystemApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(SystemApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(SystemApiRequestFactory);
    function SystemApiRequestFactory() {
        _class_call_check(this, SystemApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(SystemApiRequestFactory, [
        {
            key: "getSystemConfig",
            value: /**
   *   Version: 9.0.0.cl or later  Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.  This API does not require any parameters to be passed in the request.      
   */ function getSystemConfig(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/system/config";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemInformation",
            value: /**
   *   Version: 9.0.0.cl or later  Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.  This API does not require any parameters to be passed in the request.        
   */ function getSystemInformation(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/system";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemOverrideInfo",
            value: /**
   *   Version: 9.2.0.cl or later  Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  This API does not require any parameters to be passed in the request.        
   */ function getSystemOverrideInfo(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/system/config-overrides";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateSystemConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Updates the current configuration of the cluster. You must send the configuration settings in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.      
   * @param updateSystemConfigRequest 
   */ function updateSystemConfig(updateSystemConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (updateSystemConfigRequest === null || updateSystemConfigRequest === void 0) {
                                    throw new RequiredError("SystemApi", "updateSystemConfig", "updateSystemConfigRequest");
                                }
                                localVarPath = "/api/rest/2.0/system/config-update";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateSystemConfigRequest, "UpdateSystemConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return SystemApiRequestFactory;
}(BaseAPIRequestFactory);
var SystemApiResponseProcessor = /*#__PURE__*/ function() {
    function SystemApiResponseProcessor() {
        _class_call_check(this, SystemApiResponseProcessor);
    }
    _create_class(SystemApiResponseProcessor, [
        {
            key: "getSystemConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function getSystemConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemConfig",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemConfig",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemInformation",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemInformation
   * @throws ApiException if the response code was not in [200, 299]
   */ function getSystemInformation(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemInfo",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemInfo",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemOverrideInfo",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemOverrideInfo
   * @throws ApiException if the response code was not in [200, 299]
   */ function getSystemOverrideInfo(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateSystemConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateSystemConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return SystemApiResponseProcessor;
}();
// apis/TagsApi.ts
var TagsApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(TagsApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(TagsApiRequestFactory);
    function TagsApiRequestFactory() {
        _class_call_check(this, TagsApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(TagsApiRequestFactory, [
        {
            key: "assignTag",
            value: /**
   *   Version: 9.0.0.cl or later  Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ function assignTag(assignTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (assignTagRequest === null || assignTagRequest === void 0) {
                                    throw new RequiredError("TagsApi", "assignTag", "assignTagRequest");
                                }
                                localVarPath = "/api/rest/2.0/tags/assign";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createTag",
            value: /**
   *   Version: 9.0.0.cl or later  Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createTagRequest 
   */ function createTag(createTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createTagRequest === null || createTagRequest === void 0) {
                                    throw new RequiredError("TagsApi", "createTag", "createTagRequest");
                                }
                                localVarPath = "/api/rest/2.0/tags/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createTagRequest, "CreateTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteTag",
            value: /**
   *   Version: 9.0.0.cl or later  Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */ function deleteTag(tagIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (tagIdentifier === null || tagIdentifier === void 0) {
                                    throw new RequiredError("TagsApi", "deleteTag", "tagIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/tags/{tag_identifier}/delete".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchTags",
            value: /**
   *   Version: 9.0.0.cl or later  Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */ function searchTags(searchTagsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/tags/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchTagsRequest, "SearchTagsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "unassignTag",
            value: /**
   *   Version: 9.0.0.cl or later  Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ function unassignTag(assignTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (assignTagRequest === null || assignTagRequest === void 0) {
                                    throw new RequiredError("TagsApi", "unassignTag", "assignTagRequest");
                                }
                                localVarPath = "/api/rest/2.0/tags/unassign";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateTag",
            value: /**
   *   Version: 9.0.0.cl or later  Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */ function updateTag(tagIdentifier, updateTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (tagIdentifier === null || tagIdentifier === void 0) {
                                    throw new RequiredError("TagsApi", "updateTag", "tagIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/tags/{tag_identifier}/update".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateTagRequest, "UpdateTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return TagsApiRequestFactory;
}(BaseAPIRequestFactory);
var TagsApiResponseProcessor = /*#__PURE__*/ function() {
    function TagsApiResponseProcessor() {
        _class_call_check(this, TagsApiResponseProcessor);
    }
    _create_class(TagsApiResponseProcessor, [
        {
            key: "assignTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function assignTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function createTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Tag",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Tag",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchTags",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchTags
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchTags(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<Tag>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<Tag>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "unassignTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unassignTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function unassignTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return TagsApiResponseProcessor;
}();
// apis/ThoughtSpotRestApi.ts
var ThoughtSpotRestApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(ThoughtSpotRestApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(ThoughtSpotRestApiRequestFactory);
    function ThoughtSpotRestApiRequestFactory() {
        _class_call_check(this, ThoughtSpotRestApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(ThoughtSpotRestApiRequestFactory, [
        {
            key: "assignChangeAuthor",
            value: /**
   *   Version: 9.0.0.cl or later  Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param assignChangeAuthorRequest 
   */ function assignChangeAuthor(assignChangeAuthorRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (assignChangeAuthorRequest === null || assignChangeAuthorRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "assignChangeAuthor", "assignChangeAuthorRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/metadata/assign";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(assignChangeAuthorRequest, "AssignChangeAuthorRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "assignTag",
            value: /**
   *   Version: 9.0.0.cl or later  Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ function assignTag(assignTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (assignTagRequest === null || assignTagRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "assignTag", "assignTagRequest");
                                }
                                localVarPath = "/api/rest/2.0/tags/assign";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "changeUserPassword",
            value: /**
   *   Version: 9.0.0.cl or later  Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param changeUserPasswordRequest 
   */ function changeUserPassword(changeUserPasswordRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (changeUserPasswordRequest === null || changeUserPasswordRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "changeUserPassword", "changeUserPasswordRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/change-password";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(changeUserPasswordRequest, "ChangeUserPasswordRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "commitBranch",
            value: /**
   *   Version: 9.2.0.cl or later  Commits TML files of metadata objects to the Git branch configured on your instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param commitBranchRequest 
   */ function commitBranch(commitBranchRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (commitBranchRequest === null || commitBranchRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "commitBranch", "commitBranchRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/branches/commit";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(commitBranchRequest, "CommitBranchRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param createConfigRequest 
   */ function createConfig(createConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createConfigRequest === null || createConfigRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createConfig", "createConfigRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/config/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createConfigRequest, "CreateConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */ function createConnection(createConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createConnectionRequest === null || createConnectionRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createConnection", "createConnectionRequest");
                                }
                                localVarPath = "/api/rest/2.0/connection/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createConnectionRequest, "CreateConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createCustomAction",
            value: /**
   *   Version: 9.6.0.cl or later  Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param createCustomActionRequest 
   */ function createCustomAction(createCustomActionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createCustomActionRequest === null || createCustomActionRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createCustomAction", "createCustomActionRequest");
                                }
                                localVarPath = "/api/rest/2.0/customization/custom-actions";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createCustomActionRequest, "CreateCustomActionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createOrg",
            value: /**
   *   Version: 9.0.0.cl or later  Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param createOrgRequest 
   */ function createOrg(createOrgRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createOrgRequest === null || createOrgRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createOrg", "createOrgRequest");
                                }
                                localVarPath = "/api/rest/2.0/orgs/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createOrgRequest, "CreateOrgRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createRole",
            value: /**
   * Creates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param createRoleRequest 
   */ function createRole(createRoleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createRoleRequest === null || createRoleRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createRole", "createRoleRequest");
                                }
                                localVarPath = "/api/rest/2.0/roles/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createRoleRequest, "CreateRoleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createSchedule",
            value: /**
   *  Create schedule. /n  Version: 9.4.0.cl or later  Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).      
   * @param createScheduleRequest 
   */ function createSchedule(createScheduleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createScheduleRequest === null || createScheduleRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createSchedule", "createScheduleRequest");
                                }
                                localVarPath = "/api/rest/2.0/schedules/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createScheduleRequest, "CreateScheduleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createTag",
            value: /**
   *   Version: 9.0.0.cl or later  Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createTagRequest 
   */ function createTag(createTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createTagRequest === null || createTagRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createTag", "createTagRequest");
                                }
                                localVarPath = "/api/rest/2.0/tags/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createTagRequest, "CreateTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createUser",
            value: /**
   *   Version: 9.0.0.cl or later  Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createUserRequest 
   */ function createUser(createUserRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createUserRequest === null || createUserRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createUser", "createUserRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createUserRequest, "CreateUserRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createUserGroup",
            value: /**
   *   Version: 9.0.0.cl or later  Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */ function createUserGroup(createUserGroupRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createUserGroupRequest === null || createUserGroupRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "createUserGroup", "createUserGroupRequest");
                                }
                                localVarPath = "/api/rest/2.0/groups/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createUserGroupRequest, "CreateUserGroupRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConfigRequest 
   */ function deleteConfig(deleteConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/vcs/git/config/delete";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deleteConfigRequest, "DeleteConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConnectionRequest 
   */ function deleteConnection(deleteConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (deleteConnectionRequest === null || deleteConnectionRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteConnection", "deleteConnectionRequest");
                                }
                                localVarPath = "/api/rest/2.0/connection/delete";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deleteConnectionRequest, "DeleteConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteCustomAction",
            value: /**
   *   Version: 9.6.0.cl or later  Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */ function deleteCustomAction(customActionIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (customActionIdentifier === null || customActionIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteCustomAction", "customActionIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/delete".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteMetadata",
            value: /**
   *   Version: 9.0.0.cl or later  Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteMetadataRequest 
   */ function deleteMetadata(deleteMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (deleteMetadataRequest === null || deleteMetadataRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteMetadata", "deleteMetadataRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/delete";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deleteMetadataRequest, "DeleteMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteOrg",
            value: /**
   *   Version: 9.0.0.cl or later  Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */ function deleteOrg(orgIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (orgIdentifier === null || orgIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteOrg", "orgIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/orgs/{org_identifier}/delete".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteRole",
            value: /**
   * Deletes a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   */ function deleteRole(roleIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (roleIdentifier === null || roleIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteRole", "roleIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/roles/{role_identifier}/delete".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteSchedule",
            value: /**
   *  Deletes a scheduled job. /n  Version: 9.4.0.cl or later  Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.         
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */ function deleteSchedule(scheduleIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteSchedule", "scheduleIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/delete".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteTag",
            value: /**
   *   Version: 9.0.0.cl or later  Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */ function deleteTag(tagIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (tagIdentifier === null || tagIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteTag", "tagIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/tags/{tag_identifier}/delete".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUser",
            value: /**
   *   Version: 9.0.0.cl or later  Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   */ function deleteUser(userIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (userIdentifier === null || userIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteUser", "userIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/users/{user_identifier}/delete".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUserGroup",
            value: /**
   *   Version: 9.0.0.cl or later  Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param groupIdentifier GUID or name of the group.
   */ function deleteUserGroup(groupIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (groupIdentifier === null || groupIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deleteUserGroup", "groupIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/groups/{group_identifier}/delete".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deployCommit",
            value: /**
   *   Version: 9.2.0.cl or later  Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.      
   * @param deployCommitRequest 
   */ function deployCommit(deployCommitRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (deployCommitRequest === null || deployCommitRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "deployCommit", "deployCommitRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/commits/deploy";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deployCommitRequest, "DeployCommitRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "exportAnswerReport",
            value: /**
   *   Version: 9.0.0.cl or later  Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  You can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.      
   * @param exportAnswerReportRequest 
   */ function exportAnswerReport(exportAnswerReportRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (exportAnswerReportRequest === null || exportAnswerReportRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "exportAnswerReport", "exportAnswerReportRequest");
                                }
                                localVarPath = "/api/rest/2.0/report/answer";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(exportAnswerReportRequest, "ExportAnswerReportRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "exportLiveboardReport",
            value: /**
   *   Version: 9.0.0.cl or later  Exports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  You can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param exportLiveboardReportRequest 
   */ function exportLiveboardReport(exportLiveboardReportRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (exportLiveboardReportRequest === null || exportLiveboardReportRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "exportLiveboardReport", "exportLiveboardReportRequest");
                                }
                                localVarPath = "/api/rest/2.0/report/liveboard";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(exportLiveboardReportRequest, "ExportLiveboardReportRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "exportMetadataTML",
            value: /**
   *   Version: 9.0.0.cl or later  Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.      
   * @param exportMetadataTMLRequest 
   */ function exportMetadataTML(exportMetadataTMLRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (exportMetadataTMLRequest === null || exportMetadataTMLRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "exportMetadataTML", "exportMetadataTMLRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/tml/export";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(exportMetadataTMLRequest, "ExportMetadataTMLRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchAnswerData",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches data from a saved Answer.  Requires at least view access to the saved Answer.      
   * @param fetchAnswerDataRequest 
   */ function fetchAnswerData(fetchAnswerDataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchAnswerDataRequest === null || fetchAnswerDataRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchAnswerData", "fetchAnswerDataRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/answer/data";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchAnswerDataRequest, "FetchAnswerDataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchAnswerSqlQuery",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */ function fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchAnswerSqlQueryRequest === null || fetchAnswerSqlQueryRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchAnswerSqlQuery", "fetchAnswerSqlQueryRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/answer/sql";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchAnswerSqlQueryRequest, "FetchAnswerSqlQueryRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardData",
            value: /**
   *   Version: 9.0.0.cl or later  Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param fetchLiveboardDataRequest 
   */ function fetchLiveboardData(fetchLiveboardDataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchLiveboardDataRequest === null || fetchLiveboardDataRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchLiveboardData", "fetchLiveboardDataRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/liveboard/data";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchLiveboardDataRequest, "FetchLiveboardDataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardSqlQuery",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */ function fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchLiveboardSqlQueryRequest === null || fetchLiveboardSqlQueryRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchLiveboardSqlQuery", "fetchLiveboardSqlQueryRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/liveboard/sql";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchLiveboardSqlQueryRequest, "FetchLiveboardSqlQueryRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLogs",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance      
   * @param fetchLogsRequest 
   */ function fetchLogs(fetchLogsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchLogsRequest === null || fetchLogsRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchLogs", "fetchLogsRequest");
                                }
                                localVarPath = "/api/rest/2.0/logs/fetch";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchLogsRequest, "FetchLogsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOfPrincipals",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.  #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */ function fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchPermissionsOfPrincipalsRequest === null || fetchPermissionsOfPrincipalsRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchPermissionsOfPrincipals", "fetchPermissionsOfPrincipalsRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/principals/fetch-permissions";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchPermissionsOfPrincipalsRequest, "FetchPermissionsOfPrincipalsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOnMetadata",
            value: /**
   *   Version: 9.0.0.cl or later  Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */ function fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (fetchPermissionsOnMetadataRequest === null || fetchPermissionsOnMetadataRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "fetchPermissionsOnMetadata", "fetchPermissionsOnMetadataRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/metadata/fetch-permissions";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(fetchPermissionsOnMetadataRequest, "FetchPermissionsOnMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "forceLogoutUsers",
            value: /**
   *   Version: 9.0.0.cl or later  Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param forceLogoutUsersRequest 
   */ function forceLogoutUsers(forceLogoutUsersRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/users/force-logout";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(forceLogoutUsersRequest, "ForceLogoutUsersRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentUserInfo",
            value: /**
   *   Version: 9.0.0.cl or later   Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */ function getCurrentUserInfo(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/user";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentUserToken",
            value: /**
   *  Get token for the currently logged-in user. /n  Version: 9.4.0.cl or later  Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */ function getCurrentUserToken(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/token";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getFullAccessToken",
            value: /**
   *   Version: 9.0.0.cl or later  Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, specify the Org ID in the `org_id` attribute.  **Note**: This feature is available only on clusters with trusted authentication enabled.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getFullAccessTokenRequest 
   */ function getFullAccessToken(getFullAccessTokenRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (getFullAccessTokenRequest === null || getFullAccessTokenRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "getFullAccessToken", "getFullAccessTokenRequest");
                                }
                                localVarPath = "/api/rest/2.0/auth/token/full";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(getFullAccessTokenRequest, "GetFullAccessTokenRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getObjectAccessToken",
            value: /**
   *   Version: 9.0.0.cl or later  Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, send the `Org ID` in the API request.  **Note**: This feature is available only if Trusted authentication is enabled on your cluster.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getObjectAccessTokenRequest 
   */ function getObjectAccessToken(getObjectAccessTokenRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (getObjectAccessTokenRequest === null || getObjectAccessTokenRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "getObjectAccessToken", "getObjectAccessTokenRequest");
                                }
                                localVarPath = "/api/rest/2.0/auth/token/object";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(getObjectAccessTokenRequest, "GetObjectAccessTokenRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemConfig",
            value: /**
   *   Version: 9.0.0.cl or later  Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.  This API does not require any parameters to be passed in the request.      
   */ function getSystemConfig(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/system/config";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemInformation",
            value: /**
   *   Version: 9.0.0.cl or later  Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.  This API does not require any parameters to be passed in the request.        
   */ function getSystemInformation(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/system";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemOverrideInfo",
            value: /**
   *   Version: 9.2.0.cl or later  Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  This API does not require any parameters to be passed in the request.        
   */ function getSystemOverrideInfo(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/system/config-overrides";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "importMetadataTML",
            value: /**
   *   Version: 9.0.0.cl or later  Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.      
   * @param importMetadataTMLRequest 
   */ function importMetadataTML(importMetadataTMLRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (importMetadataTMLRequest === null || importMetadataTMLRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "importMetadataTML", "importMetadataTMLRequest");
                                }
                                localVarPath = "/api/rest/2.0/metadata/tml/import";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(importMetadataTMLRequest, "ImportMetadataTMLRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "importUserGroups",
            value: /**
   *   Version: 9.0.0.cl or later  Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */ function importUserGroups(importUserGroupsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/groups/import";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(importUserGroupsRequest, "ImportUserGroupsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "importUsers",
            value: /**
   *   Version: 9.0.0.cl or later  Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param importUsersRequest 
   */ function importUsers(importUsersRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (importUsersRequest === null || importUsersRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "importUsers", "importUsersRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/import";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(importUsersRequest, "ImportUsersRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "login",
            value: /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  A successful login returns a session cookie that can be used in your subsequent API requests.      
   * @param loginRequest 
   */ function login(loginRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/login";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(loginRequest, "LoginRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "logout",
            value: /**
   *   Version: 9.0.0.cl or later   Logs out a user from their current session.      
   */ function logout(_options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/session/logout";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "resetUserPassword",
            value: /**
   *   Version: 9.0.0.cl or later  Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param resetUserPasswordRequest 
   */ function resetUserPassword(resetUserPasswordRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (resetUserPasswordRequest === null || resetUserPasswordRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "resetUserPassword", "resetUserPasswordRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/reset-password";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(resetUserPasswordRequest, "ResetUserPasswordRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "revertCommit",
            value: /**
   *   Version: 9.2.0.cl or later  Reverts TML objects to a previous commit specified in the API request.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */ function revertCommit(commitId, revertCommitRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (commitId === null || commitId === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "revertCommit", "commitId");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/commits/{commit_id}/revert".replace("{commit_id}", encodeURIComponent(String(commitId)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(revertCommitRequest, "RevertCommitRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "revokeToken",
            value: /**
   *   Version: 9.0.0.cl or later   Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token) and [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */ function revokeToken(revokeTokenRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/auth/token/revoke";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(revokeTokenRequest, "RevokeTokenRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchCommits",
            value: /**
   *   Version: 9.2.0.cl or later  Gets a list of commits for a given metadata object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCommitsRequest 
   */ function searchCommits(searchCommitsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (searchCommitsRequest === null || searchCommitsRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "searchCommits", "searchCommitsRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/commits/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchCommitsRequest, "SearchCommitsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchConfigRequest 
   */ function searchConfig(searchConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/vcs/git/config/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchConfigRequest, "SearchConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`). ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ``` - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.     
   * @param searchConnectionRequest 
   */ function searchConnection(searchConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/connection/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchConnectionRequest, "SearchConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchCustomActions",
            value: /**
   *   Version: 9.6.0.cl or later  Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCustomActionsRequest 
   */ function searchCustomActions(searchCustomActionsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/customization/custom-actions/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchCustomActionsRequest, "SearchCustomActionsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchData",
            value: /**
   *   Version: 9.0.0.cl or later  Generates an Answer from a given data source.  Requires at least view access to the data source.  #### Usage guidelines  To generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).   ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```      
   * @param searchDataRequest 
   */ function searchData(searchDataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (searchDataRequest === null || searchDataRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "searchData", "searchDataRequest");
                                }
                                localVarPath = "/api/rest/2.0/searchdata";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchDataRequest, "SearchDataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchMetadata",
            value: /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  * To get all metadata objects, send the API request without any attributes. * To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. * To get a specific metadata object, specify the GUID. * To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response.      
   * @param searchMetadataRequest 
   */ function searchMetadata(searchMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/metadata/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchMetadataRequest, "SearchMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchOrgs",
            value: /**
   *   Version: 9.0.0.cl or later  Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param searchOrgsRequest 
   */ function searchOrgs(searchOrgsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/orgs/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchOrgsRequest, "SearchOrgsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchRoles",
            value: /**
   * Gets Roles configured on a ThoughtSpot instance. Requires cluster Administration, Role Administration or Group Administration privileges. /n  Version: 9.5.0.cl or later
   * @param searchRolesRequest 
   */ function searchRoles(searchRolesRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/roles/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchRolesRequest, "SearchRolesRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchSchedules",
            value: /**
   *  Search Schedules /n  Version: 9.4.0.cl or later  Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.      
   * @param searchSchedulesRequest 
   */ function searchSchedules(searchSchedulesRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/schedules/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchSchedulesRequest, "SearchSchedulesRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchTags",
            value: /**
   *   Version: 9.0.0.cl or later  Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */ function searchTags(searchTagsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/tags/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchTagsRequest, "SearchTagsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchUserGroups",
            value: /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUserGroupsRequest 
   */ function searchUserGroups(searchUserGroupsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/groups/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchUserGroupsRequest, "SearchUserGroupsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchUsers",
            value: /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUsersRequest 
   */ function searchUsers(searchUsersRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/users/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchUsersRequest, "SearchUsersRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "shareMetadata",
            value: /**
   *   Version: 9.0.0.cl or later  Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */ function shareMetadata(shareMetadataRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (shareMetadataRequest === null || shareMetadataRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "shareMetadata", "shareMetadataRequest");
                                }
                                localVarPath = "/api/rest/2.0/security/metadata/share";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(shareMetadataRequest, "ShareMetadataRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "unassignTag",
            value: /**
   *   Version: 9.0.0.cl or later  Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ function unassignTag(assignTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (assignTagRequest === null || assignTagRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "unassignTag", "assignTagRequest");
                                }
                                localVarPath = "/api/rest/2.0/tags/unassign";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param updateConfigRequest 
   */ function updateConfig(updateConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/vcs/git/config/update";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateConfigRequest, "UpdateConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateConnection",
            value: /**
   *   Version: 9.2.0.cl or later  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */ function updateConnection(updateConnectionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (updateConnectionRequest === null || updateConnectionRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateConnection", "updateConnectionRequest");
                                }
                                localVarPath = "/api/rest/2.0/connection/update";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateConnectionRequest, "UpdateConnectionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateCustomAction",
            value: /**
   *   Version: 9.6.0.cl or later  Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */ function updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (customActionIdentifier === null || customActionIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateCustomAction", "customActionIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/update".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateCustomActionRequest, "UpdateCustomActionRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateOrg",
            value: /**
   *   Version: 9.0.0.cl or later  Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */ function updateOrg(orgIdentifier, updateOrgRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (orgIdentifier === null || orgIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateOrg", "orgIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/orgs/{org_identifier}/update".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateOrgRequest, "UpdateOrgRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateRole",
            value: /**
   * Updates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   * @param updateRoleRequest 
   */ function updateRole(roleIdentifier, updateRoleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (roleIdentifier === null || roleIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateRole", "roleIdentifier");
                                }
                                if (updateRoleRequest === null || updateRoleRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateRole", "updateRoleRequest");
                                }
                                localVarPath = "/api/rest/2.0/roles/{role_identifier}/update".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateRoleRequest, "UpdateRoleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateSchedule",
            value: /**
   *  Update schedule. /n  Version: 9.4.0.cl or later  Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */ function updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateSchedule", "scheduleIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/update".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateScheduleRequest, "UpdateScheduleRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateSystemConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Updates the current configuration of the cluster. You must send the configuration settings in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.      
   * @param updateSystemConfigRequest 
   */ function updateSystemConfig(updateSystemConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (updateSystemConfigRequest === null || updateSystemConfigRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateSystemConfig", "updateSystemConfigRequest");
                                }
                                localVarPath = "/api/rest/2.0/system/config-update";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateSystemConfigRequest, "UpdateSystemConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateTag",
            value: /**
   *   Version: 9.0.0.cl or later  Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */ function updateTag(tagIdentifier, updateTagRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (tagIdentifier === null || tagIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateTag", "tagIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/tags/{tag_identifier}/update".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateTagRequest, "UpdateTagRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateUser",
            value: /**
   *   Version: 9.0.0.cl or later  Updates a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */ function updateUser(userIdentifier, updateUserRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (userIdentifier === null || userIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateUser", "userIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/users/{user_identifier}/update".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateUserRequest, "UpdateUserRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateUserGroup",
            value: /**
   *   Version: 9.0.0.cl or later  Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */ function updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (groupIdentifier === null || groupIdentifier === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "updateUserGroup", "groupIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/groups/{group_identifier}/update".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateUserGroupRequest, "UpdateUserGroupRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "validateMerge",
            value: /**
   *   Version: 9.2.0.cl or later  Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param validateMergeRequest 
   */ function validateMerge(validateMergeRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (validateMergeRequest === null || validateMergeRequest === void 0) {
                                    throw new RequiredError("ThoughtSpotRestApi", "validateMerge", "validateMergeRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/branches/validate";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(validateMergeRequest, "ValidateMergeRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return ThoughtSpotRestApiRequestFactory;
}(BaseAPIRequestFactory);
var ThoughtSpotRestApiResponseProcessor = /*#__PURE__*/ function() {
    function ThoughtSpotRestApiResponseProcessor() {
        _class_call_check(this, ThoughtSpotRestApiResponseProcessor);
    }
    _create_class(ThoughtSpotRestApiResponseProcessor, [
        {
            key: "assignChangeAuthor",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignChangeAuthor
   * @throws ApiException if the response code was not in [200, 299]
   */ function assignChangeAuthor(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "assignTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function assignTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "changeUserPassword",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to changeUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */ function changeUserPassword(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "commitBranch",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to commitBranch
   * @throws ApiException if the response code was not in [200, 299]
   */ function commitBranch(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CommitResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CommitResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function createConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function createConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CreateConnectionResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CreateConnectionResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createCustomAction",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */ function createCustomAction(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseCustomAction",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseCustomAction",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createOrg",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createOrg
   * @throws ApiException if the response code was not in [200, 299]
   */ function createOrg(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "OrgResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "OrgResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createRole",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createRole
   * @throws ApiException if the response code was not in [200, 299]
   */ function createRole(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid parameters.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Internal error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createSchedule",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */ function createSchedule(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseSchedule",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ResponseSchedule",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function createTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Tag",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Tag",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createUser",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUser
   * @throws ApiException if the response code was not in [200, 299]
   */ function createUser(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createUserGroup",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */ function createUserGroup(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "UserGroupResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "UserGroupResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteCustomAction",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteCustomAction(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteOrg",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteOrg
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteOrg(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteRole",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteRole
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteRole(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Internal error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteSchedule",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteSchedule(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUser",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUser
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteUser(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUserGroup",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteUserGroup(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deployCommit",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deployCommit
   * @throws ApiException if the response code was not in [200, 299]
   */ function deployCommit(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "exportAnswerReport",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportAnswerReport
   * @throws ApiException if the response code was not in [200, 299]
   */ function exportAnswerReport(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("200", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "exportLiveboardReport",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportLiveboardReport
   * @throws ApiException if the response code was not in [200, 299]
   */ function exportLiveboardReport(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("200", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "exportMetadataTML",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */ function exportMetadataTML(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchAnswerData",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerData
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchAnswerData(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "AnswerDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "AnswerDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchAnswerSqlQuery",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchAnswerSqlQuery(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardData",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardData
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchLiveboardData(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "LiveboardDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "LiveboardDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLiveboardSqlQuery",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchLiveboardSqlQuery(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SqlQueryResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchLogs",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLogs
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchLogs(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<LogResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<LogResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOfPrincipals",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOfPrincipals
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchPermissionsOfPrincipals(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "fetchPermissionsOnMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOnMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function fetchPermissionsOnMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "forceLogoutUsers",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to forceLogoutUsers
   * @throws ApiException if the response code was not in [200, 299]
   */ function forceLogoutUsers(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentUserInfo",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserInfo
   * @throws ApiException if the response code was not in [200, 299]
   */ function getCurrentUserInfo(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getCurrentUserToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function getCurrentUserToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "GetTokenResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "GetTokenResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getFullAccessToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getFullAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function getFullAccessToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getObjectAccessToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getObjectAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function getObjectAccessToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Token",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function getSystemConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemConfig",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemConfig",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemInformation",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemInformation
   * @throws ApiException if the response code was not in [200, 299]
   */ function getSystemInformation(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemInfo",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SystemInfo",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "getSystemOverrideInfo",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemOverrideInfo
   * @throws ApiException if the response code was not in [200, 299]
   */ function getSystemOverrideInfo(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "any",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "importMetadataTML",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */ function importMetadataTML(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<any>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "importUserGroups",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */ function importUserGroups(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUserGroupsResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUserGroupsResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "importUsers",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUsers
   * @throws ApiException if the response code was not in [200, 299]
   */ function importUsers(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUsersResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUsersResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "login",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to login
   * @throws ApiException if the response code was not in [200, 299]
   */ function login(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "logout",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to logout
   * @throws ApiException if the response code was not in [200, 299]
   */ function logout(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "resetUserPassword",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to resetUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */ function resetUserPassword(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "revertCommit",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revertCommit
   * @throws ApiException if the response code was not in [200, 299]
   */ function revertCommit(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RevertResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RevertResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "revokeToken",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revokeToken
   * @throws ApiException if the response code was not in [200, 299]
   */ function revokeToken(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchCommits",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCommits
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchCommits(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<CommitHistoryResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<CommitHistoryResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<RepoConfigObject>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<RepoConfigObject>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchConnectionResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchConnectionResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchCustomActions",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCustomActions
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchCustomActions(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseCustomAction>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseCustomAction>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchData",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchData
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchData(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SearchDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "SearchDataResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<MetadataSearchResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<MetadataSearchResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchOrgs",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchOrgs
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchOrgs(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<OrgResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<OrgResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchRoles",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchRoles
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchRoles(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchRoleResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Internal error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<SearchRoleResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchSchedules",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchSchedules
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchSchedules(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseSchedule>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<ResponseSchedule>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchTags",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchTags
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchTags(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<Tag>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<Tag>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchUserGroups",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchUserGroups(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<UserGroupResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<UserGroupResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchUsers",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUsers
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchUsers(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<User>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<User>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "shareMetadata",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to shareMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */ function shareMetadata(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "unassignTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unassignTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function unassignTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateConnection",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConnection
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateConnection(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateCustomAction",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateCustomAction(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateOrg",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateOrg
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateOrg(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateRole",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateRole
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateRole(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RoleResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateSchedule",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateSchedule(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateSystemConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateSystemConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateTag",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateTag
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateTag(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateUser",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUser
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateUser(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateUserGroup",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateUserGroup(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "validateMerge",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateMerge
   * @throws ApiException if the response code was not in [200, 299]
   */ function validateMerge(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return ThoughtSpotRestApiResponseProcessor;
}();
// apis/UsersApi.ts
var UsersApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(UsersApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(UsersApiRequestFactory);
    function UsersApiRequestFactory() {
        _class_call_check(this, UsersApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(UsersApiRequestFactory, [
        {
            key: "changeUserPassword",
            value: /**
   *   Version: 9.0.0.cl or later  Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param changeUserPasswordRequest 
   */ function changeUserPassword(changeUserPasswordRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (changeUserPasswordRequest === null || changeUserPasswordRequest === void 0) {
                                    throw new RequiredError("UsersApi", "changeUserPassword", "changeUserPasswordRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/change-password";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(changeUserPasswordRequest, "ChangeUserPasswordRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createUser",
            value: /**
   *   Version: 9.0.0.cl or later  Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createUserRequest 
   */ function createUser(createUserRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createUserRequest === null || createUserRequest === void 0) {
                                    throw new RequiredError("UsersApi", "createUser", "createUserRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createUserRequest, "CreateUserRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUser",
            value: /**
   *   Version: 9.0.0.cl or later  Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   */ function deleteUser(userIdentifier, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (userIdentifier === null || userIdentifier === void 0) {
                                    throw new RequiredError("UsersApi", "deleteUser", "userIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/users/{user_identifier}/delete".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "forceLogoutUsers",
            value: /**
   *   Version: 9.0.0.cl or later  Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param forceLogoutUsersRequest 
   */ function forceLogoutUsers(forceLogoutUsersRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/users/force-logout";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(forceLogoutUsersRequest, "ForceLogoutUsersRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "importUsers",
            value: /**
   *   Version: 9.0.0.cl or later  Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param importUsersRequest 
   */ function importUsers(importUsersRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (importUsersRequest === null || importUsersRequest === void 0) {
                                    throw new RequiredError("UsersApi", "importUsers", "importUsersRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/import";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(importUsersRequest, "ImportUsersRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "resetUserPassword",
            value: /**
   *   Version: 9.0.0.cl or later  Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param resetUserPasswordRequest 
   */ function resetUserPassword(resetUserPasswordRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (resetUserPasswordRequest === null || resetUserPasswordRequest === void 0) {
                                    throw new RequiredError("UsersApi", "resetUserPassword", "resetUserPasswordRequest");
                                }
                                localVarPath = "/api/rest/2.0/users/reset-password";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(resetUserPasswordRequest, "ResetUserPasswordRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchUsers",
            value: /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUsersRequest 
   */ function searchUsers(searchUsersRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/users/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchUsersRequest, "SearchUsersRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateUser",
            value: /**
   *   Version: 9.0.0.cl or later  Updates a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */ function updateUser(userIdentifier, updateUserRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (userIdentifier === null || userIdentifier === void 0) {
                                    throw new RequiredError("UsersApi", "updateUser", "userIdentifier");
                                }
                                localVarPath = "/api/rest/2.0/users/{user_identifier}/update".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateUserRequest, "UpdateUserRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return UsersApiRequestFactory;
}(BaseAPIRequestFactory);
var UsersApiResponseProcessor = /*#__PURE__*/ function() {
    function UsersApiResponseProcessor() {
        _class_call_check(this, UsersApiResponseProcessor);
    }
    _create_class(UsersApiResponseProcessor, [
        {
            key: "changeUserPassword",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to changeUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */ function changeUserPassword(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createUser",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUser
   * @throws ApiException if the response code was not in [200, 299]
   */ function createUser(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "User",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteUser",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUser
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteUser(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "forceLogoutUsers",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to forceLogoutUsers
   * @throws ApiException if the response code was not in [200, 299]
   */ function forceLogoutUsers(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "importUsers",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUsers
   * @throws ApiException if the response code was not in [200, 299]
   */ function importUsers(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUsersResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ImportUsersResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "resetUserPassword",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to resetUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */ function resetUserPassword(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchUsers",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUsers
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchUsers(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<User>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<User>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateUser",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUser
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateUser(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return UsersApiResponseProcessor;
}();
// apis/VersionControlApi.ts
var VersionControlApiRequestFactory = /*#__PURE__*/ function(BaseAPIRequestFactory) {
    _inherits(VersionControlApiRequestFactory, BaseAPIRequestFactory);
    var _super = _create_super(VersionControlApiRequestFactory);
    function VersionControlApiRequestFactory() {
        _class_call_check(this, VersionControlApiRequestFactory);
        return _super.apply(this, arguments);
    }
    _create_class(VersionControlApiRequestFactory, [
        {
            key: "commitBranch",
            value: /**
   *   Version: 9.2.0.cl or later  Commits TML files of metadata objects to the Git branch configured on your instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param commitBranchRequest 
   */ function commitBranch(commitBranchRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (commitBranchRequest === null || commitBranchRequest === void 0) {
                                    throw new RequiredError("VersionControlApi", "commitBranch", "commitBranchRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/branches/commit";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(commitBranchRequest, "CommitBranchRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param createConfigRequest 
   */ function createConfig(createConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (createConfigRequest === null || createConfigRequest === void 0) {
                                    throw new RequiredError("VersionControlApi", "createConfig", "createConfigRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/config/create";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createConfigRequest, "CreateConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConfigRequest 
   */ function deleteConfig(deleteConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/vcs/git/config/delete";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deleteConfigRequest, "DeleteConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "deployCommit",
            value: /**
   *   Version: 9.2.0.cl or later  Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.      
   * @param deployCommitRequest 
   */ function deployCommit(deployCommitRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (deployCommitRequest === null || deployCommitRequest === void 0) {
                                    throw new RequiredError("VersionControlApi", "deployCommit", "deployCommitRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/commits/deploy";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(deployCommitRequest, "DeployCommitRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "revertCommit",
            value: /**
   *   Version: 9.2.0.cl or later  Reverts TML objects to a previous commit specified in the API request.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */ function revertCommit(commitId, revertCommitRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (commitId === null || commitId === void 0) {
                                    throw new RequiredError("VersionControlApi", "revertCommit", "commitId");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/commits/{commit_id}/revert".replace("{commit_id}", encodeURIComponent(String(commitId)));
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(revertCommitRequest, "RevertCommitRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchCommits",
            value: /**
   *   Version: 9.2.0.cl or later  Gets a list of commits for a given metadata object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCommitsRequest 
   */ function searchCommits(searchCommitsRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (searchCommitsRequest === null || searchCommitsRequest === void 0) {
                                    throw new RequiredError("VersionControlApi", "searchCommits", "searchCommitsRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/commits/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchCommitsRequest, "SearchCommitsRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "searchConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchConfigRequest 
   */ function searchConfig(searchConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/vcs/git/config/search";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(searchConfigRequest, "SearchConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateConfig",
            value: /**
   *   Version: 9.2.0.cl or later  Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param updateConfigRequest 
   */ function updateConfig(updateConfigRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                localVarPath = "/api/rest/2.0/vcs/git/config/update";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(updateConfigRequest, "UpdateConfigRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "validateMerge",
            value: /**
   *   Version: 9.2.0.cl or later  Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param validateMergeRequest 
   */ function validateMerge(validateMergeRequest, _options) {
                var _this = this;
                return _async_to_generator(function() {
                    var _options_authMethods, _this_configuration_authMethods, _this_configuration, _config, localVarPath, requestContext, contentType, serializedBody, authMethod, defaultAuth;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _config = _options || _this.configuration;
                                if (validateMergeRequest === null || validateMergeRequest === void 0) {
                                    throw new RequiredError("VersionControlApi", "validateMerge", "validateMergeRequest");
                                }
                                localVarPath = "/api/rest/2.0/vcs/git/branches/validate";
                                requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */ );
                                requestContext.setHeaderParam("User-Agent", "ThoughtSpot-ts-client");
                                requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
                                contentType = ObjectSerializer.getPreferredMediaType([
                                    "application/json"
                                ]);
                                requestContext.setHeaderParam("Content-Type", contentType);
                                serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(validateMergeRequest, "ValidateMergeRequest", ""), contentType);
                                requestContext.setBody(serializedBody);
                                authMethod = _config.authMethods["bearerAuth"];
                                if (!(authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                defaultAuth = (_options === null || _options === void 0 ? void 0 : (_options_authMethods = _options.authMethods) === null || _options_authMethods === void 0 ? void 0 : _options_authMethods.default) || ((_this_configuration = _this.configuration) === null || _this_configuration === void 0 ? void 0 : (_this_configuration_authMethods = _this_configuration.authMethods) === null || _this_configuration_authMethods === void 0 ? void 0 : _this_configuration_authMethods.default);
                                if (!(defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    2,
                                    requestContext
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return VersionControlApiRequestFactory;
}(BaseAPIRequestFactory);
var VersionControlApiResponseProcessor = /*#__PURE__*/ function() {
    function VersionControlApiResponseProcessor() {
        _class_call_check(this, VersionControlApiResponseProcessor);
    }
    _create_class(VersionControlApiResponseProcessor, [
        {
            key: "commitBranch",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to commitBranch
   * @throws ApiException if the response code was not in [200, 299]
   */ function commitBranch(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CommitResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "CommitResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "createConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function createConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deleteConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function deleteConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, _10, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (isCodeInRange("204", response.httpStatusCode)) {
                                    return [
                                        2
                                    ];
                                }
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
                            case 2:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body3, response.headers);
                            case 8:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "void",
                                    ""
                                ]);
                                return [
                                    2,
                                    body4
                                ];
                            case 10:
                                _10 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 11:
                                throw new (_10.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "deployCommit",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deployCommit
   * @throws ApiException if the response code was not in [200, 299]
   */ function deployCommit(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "revertCommit",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revertCommit
   * @throws ApiException if the response code was not in [200, 299]
   */ function revertCommit(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RevertResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RevertResponse",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchCommits",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCommits
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchCommits(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<CommitHistoryResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<CommitHistoryResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "searchConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function searchConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<RepoConfigObject>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<RepoConfigObject>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "updateConfig",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConfig
   * @throws ApiException if the response code was not in [200, 299]
   */ function updateConfig(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "RepoConfigObject",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        },
        {
            key: "validateMerge",
            value: /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateMerge
   * @throws ApiException if the response code was not in [200, 299]
   */ function validateMerge(response) {
                return _async_to_generator(function() {
                    var contentType, body, _, _1, body1, _2, _3, body2, _4, _5, body3, _6, _7, body4, _8, _9, body5, _10, _11, _12, _tmp;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
                                if (!isCodeInRange("200", response.httpStatusCode)) return [
                                    3,
                                    2
                                ];
                                _ = ObjectSerializer.deserialize;
                                _1 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 1:
                                body = _.apply(ObjectSerializer, [
                                    _1.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body
                                ];
                            case 2:
                                if (!isCodeInRange("400", response.httpStatusCode)) return [
                                    3,
                                    4
                                ];
                                _2 = ObjectSerializer.deserialize;
                                _3 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 3:
                                body1 = _2.apply(ObjectSerializer, [
                                    _3.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Invalid request.", body1, response.headers);
                            case 4:
                                if (!isCodeInRange("401", response.httpStatusCode)) return [
                                    3,
                                    6
                                ];
                                _4 = ObjectSerializer.deserialize;
                                _5 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 5:
                                body2 = _4.apply(ObjectSerializer, [
                                    _5.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unauthorized access.", body2, response.headers);
                            case 6:
                                if (!isCodeInRange("403", response.httpStatusCode)) return [
                                    3,
                                    8
                                ];
                                _6 = ObjectSerializer.deserialize;
                                _7 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 7:
                                body3 = _6.apply(ObjectSerializer, [
                                    _7.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Forbidden access.", body3, response.headers);
                            case 8:
                                if (!isCodeInRange("500", response.httpStatusCode)) return [
                                    3,
                                    10
                                ];
                                _8 = ObjectSerializer.deserialize;
                                _9 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 9:
                                body4 = _8.apply(ObjectSerializer, [
                                    _9.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "ErrorResponse",
                                    ""
                                ]);
                                throw new ApiException(response.httpStatusCode, "Unexpected error", body4, response.headers);
                            case 10:
                                if (!(response.httpStatusCode >= 200 && response.httpStatusCode <= 299)) return [
                                    3,
                                    12
                                ];
                                _10 = ObjectSerializer.deserialize;
                                _11 = ObjectSerializer.parse;
                                return [
                                    4,
                                    response.body.text()
                                ];
                            case 11:
                                body5 = _10.apply(ObjectSerializer, [
                                    _11.apply(ObjectSerializer, [
                                        _state.sent(),
                                        contentType
                                    ]),
                                    "Array<DeployResponse>",
                                    ""
                                ]);
                                return [
                                    2,
                                    body5
                                ];
                            case 12:
                                _12 = ApiException.bind;
                                _tmp = [
                                    void 0,
                                    response.httpStatusCode,
                                    "Unknown API Status Code!"
                                ];
                                return [
                                    4,
                                    response.getBodyAsAny()
                                ];
                            case 13:
                                throw new (_12.apply(ApiException, _tmp.concat([
                                    _state.sent(),
                                    response.headers
                                ])));
                        }
                    });
                })();
            }
        }
    ]);
    return VersionControlApiResponseProcessor;
}();
// types/ObservableAPI.ts
var ObservableAuthenticationApi = /*#__PURE__*/ function() {
    function ObservableAuthenticationApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableAuthenticationApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AuthenticationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AuthenticationApiResponseProcessor();
    }
    _create_class(ObservableAuthenticationApi, [
        {
            /**
   *   Version: 9.0.0.cl or later   Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */ key: "getCurrentUserInfo",
            value: function getCurrentUserInfo(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getCurrentUserInfo(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getCurrentUserInfo(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Get token for the currently logged-in user. /n  Version: 9.4.0.cl or later  Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */ key: "getCurrentUserToken",
            value: function getCurrentUserToken(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getCurrentUserToken(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getCurrentUserToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, specify the Org ID in the `org_id` attribute.  **Note**: This feature is available only on clusters with trusted authentication enabled.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getFullAccessTokenRequest 
   */ key: "getFullAccessToken",
            value: function getFullAccessToken(getFullAccessTokenRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getFullAccessToken(getFullAccessTokenRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getFullAccessToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, send the `Org ID` in the API request.  **Note**: This feature is available only if Trusted authentication is enabled on your cluster.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getObjectAccessTokenRequest 
   */ key: "getObjectAccessToken",
            value: function getObjectAccessToken(getObjectAccessTokenRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getObjectAccessToken(getObjectAccessTokenRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getObjectAccessToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  A successful login returns a session cookie that can be used in your subsequent API requests.      
   * @param loginRequest 
   */ key: "login",
            value: function login(loginRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.login(loginRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.login(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Logs out a user from their current session.      
   */ key: "logout",
            value: function logout(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.logout(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.logout(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token) and [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */ key: "revokeToken",
            value: function revokeToken(revokeTokenRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.revokeToken(revokeTokenRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.revokeToken(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableAuthenticationApi;
}();
var ObservableConnectionsApi = /*#__PURE__*/ function() {
    function ObservableConnectionsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableConnectionsApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ConnectionsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ConnectionsApiResponseProcessor();
    }
    _create_class(ObservableConnectionsApi, [
        {
            /**
   *   Version: 9.2.0.cl or later  Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */ key: "createConnection",
            value: function createConnection(createConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createConnection(createConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConnectionRequest 
   */ key: "deleteConnection",
            value: function deleteConnection(deleteConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteConnection(deleteConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`). ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ``` - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.     
   * @param searchConnectionRequest 
   */ key: "searchConnection",
            value: function searchConnection(searchConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchConnection(searchConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */ key: "updateConnection",
            value: function updateConnection(updateConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateConnection(updateConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateConnection(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableConnectionsApi;
}();
var ObservableCustomActionApi = /*#__PURE__*/ function() {
    function ObservableCustomActionApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableCustomActionApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new CustomActionApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new CustomActionApiResponseProcessor();
    }
    _create_class(ObservableCustomActionApi, [
        {
            /**
   *   Version: 9.6.0.cl or later  Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param createCustomActionRequest 
   */ key: "createCustomAction",
            value: function createCustomAction(createCustomActionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createCustomAction(createCustomActionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createCustomAction(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */ key: "deleteCustomAction",
            value: function deleteCustomAction(customActionIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteCustomAction(customActionIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteCustomAction(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCustomActionsRequest 
   */ key: "searchCustomActions",
            value: function searchCustomActions(searchCustomActionsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchCustomActions(searchCustomActionsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchCustomActions(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */ key: "updateCustomAction",
            value: function updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateCustomAction(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableCustomActionApi;
}();
var ObservableDataApi = /*#__PURE__*/ function() {
    function ObservableDataApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableDataApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new DataApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new DataApiResponseProcessor();
    }
    _create_class(ObservableDataApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches data from a saved Answer.  Requires at least view access to the saved Answer.      
   * @param fetchAnswerDataRequest 
   */ key: "fetchAnswerData",
            value: function fetchAnswerData(fetchAnswerDataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchAnswerData(fetchAnswerDataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchAnswerData(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param fetchLiveboardDataRequest 
   */ key: "fetchLiveboardData",
            value: function fetchLiveboardData(fetchLiveboardDataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchLiveboardData(fetchLiveboardDataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchLiveboardData(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Generates an Answer from a given data source.  Requires at least view access to the data source.  #### Usage guidelines  To generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).   ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```      
   * @param searchDataRequest 
   */ key: "searchData",
            value: function searchData(searchDataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchData(searchDataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchData(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableDataApi;
}();
var ObservableGroupsApi = /*#__PURE__*/ function() {
    function ObservableGroupsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableGroupsApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new GroupsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new GroupsApiResponseProcessor();
    }
    _create_class(ObservableGroupsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */ key: "createUserGroup",
            value: function createUserGroup(createUserGroupRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createUserGroup(createUserGroupRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createUserGroup(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param groupIdentifier GUID or name of the group.
   */ key: "deleteUserGroup",
            value: function deleteUserGroup(groupIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteUserGroup(groupIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteUserGroup(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */ key: "importUserGroups",
            value: function importUserGroups(importUserGroupsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.importUserGroups(importUserGroupsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.importUserGroups(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUserGroupsRequest 
   */ key: "searchUserGroups",
            value: function searchUserGroups(searchUserGroupsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchUserGroups(searchUserGroupsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchUserGroups(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */ key: "updateUserGroup",
            value: function updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateUserGroup(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableGroupsApi;
}();
var ObservableLogApi = /*#__PURE__*/ function() {
    function ObservableLogApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableLogApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new LogApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new LogApiResponseProcessor();
    }
    _create_class(ObservableLogApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance      
   * @param fetchLogsRequest 
   */ key: "fetchLogs",
            value: function fetchLogs(fetchLogsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchLogs(fetchLogsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchLogs(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableLogApi;
}();
var ObservableMetadataApi = /*#__PURE__*/ function() {
    function ObservableMetadataApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableMetadataApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MetadataApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MetadataApiResponseProcessor();
    }
    _create_class(ObservableMetadataApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteMetadataRequest 
   */ key: "deleteMetadata",
            value: function deleteMetadata(deleteMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteMetadata(deleteMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteMetadata(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.      
   * @param exportMetadataTMLRequest 
   */ key: "exportMetadataTML",
            value: function exportMetadataTML(exportMetadataTMLRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.exportMetadataTML(exportMetadataTMLRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.exportMetadataTML(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */ key: "fetchAnswerSqlQuery",
            value: function fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchAnswerSqlQuery(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */ key: "fetchLiveboardSqlQuery",
            value: function fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchLiveboardSqlQuery(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.      
   * @param importMetadataTMLRequest 
   */ key: "importMetadataTML",
            value: function importMetadataTML(importMetadataTMLRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.importMetadataTML(importMetadataTMLRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.importMetadataTML(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  * To get all metadata objects, send the API request without any attributes. * To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. * To get a specific metadata object, specify the GUID. * To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response.      
   * @param searchMetadataRequest 
   */ key: "searchMetadata",
            value: function searchMetadata(searchMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchMetadata(searchMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchMetadata(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableMetadataApi;
}();
var ObservableOrgsApi = /*#__PURE__*/ function() {
    function ObservableOrgsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableOrgsApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new OrgsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new OrgsApiResponseProcessor();
    }
    _create_class(ObservableOrgsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param createOrgRequest 
   */ key: "createOrg",
            value: function createOrg(createOrgRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createOrg(createOrgRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createOrg(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */ key: "deleteOrg",
            value: function deleteOrg(orgIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteOrg(orgIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteOrg(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param searchOrgsRequest 
   */ key: "searchOrgs",
            value: function searchOrgs(searchOrgsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchOrgs(searchOrgsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchOrgs(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */ key: "updateOrg",
            value: function updateOrg(orgIdentifier, updateOrgRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateOrg(orgIdentifier, updateOrgRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateOrg(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableOrgsApi;
}();
var ObservableReportsApi = /*#__PURE__*/ function() {
    function ObservableReportsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableReportsApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ReportsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ReportsApiResponseProcessor();
    }
    _create_class(ObservableReportsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  You can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.      
   * @param exportAnswerReportRequest 
   */ key: "exportAnswerReport",
            value: function exportAnswerReport(exportAnswerReportRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.exportAnswerReport(exportAnswerReportRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.exportAnswerReport(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  You can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param exportLiveboardReportRequest 
   */ key: "exportLiveboardReport",
            value: function exportLiveboardReport(exportLiveboardReportRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.exportLiveboardReport(exportLiveboardReportRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.exportLiveboardReport(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableReportsApi;
}();
var ObservableRolesApi = /*#__PURE__*/ function() {
    function ObservableRolesApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableRolesApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new RolesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new RolesApiResponseProcessor();
    }
    _create_class(ObservableRolesApi, [
        {
            /**
   * Creates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param createRoleRequest 
   */ key: "createRole",
            value: function createRole(createRoleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createRole(createRoleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createRole(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Deletes a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   */ key: "deleteRole",
            value: function deleteRole(roleIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteRole(roleIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteRole(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Gets Roles configured on a ThoughtSpot instance. Requires cluster Administration, Role Administration or Group Administration privileges. /n  Version: 9.5.0.cl or later
   * @param searchRolesRequest 
   */ key: "searchRoles",
            value: function searchRoles(searchRolesRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchRoles(searchRolesRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchRoles(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Updates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   * @param updateRoleRequest 
   */ key: "updateRole",
            value: function updateRole(roleIdentifier, updateRoleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateRole(roleIdentifier, updateRoleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateRole(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableRolesApi;
}();
var ObservableSchedulesApi = /*#__PURE__*/ function() {
    function ObservableSchedulesApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableSchedulesApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SchedulesApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SchedulesApiResponseProcessor();
    }
    _create_class(ObservableSchedulesApi, [
        {
            /**
   *  Create schedule. /n  Version: 9.4.0.cl or later  Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).      
   * @param createScheduleRequest 
   */ key: "createSchedule",
            value: function createSchedule(createScheduleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createSchedule(createScheduleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createSchedule(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Deletes a scheduled job. /n  Version: 9.4.0.cl or later  Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.         
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */ key: "deleteSchedule",
            value: function deleteSchedule(scheduleIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteSchedule(scheduleIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteSchedule(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Search Schedules /n  Version: 9.4.0.cl or later  Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.      
   * @param searchSchedulesRequest 
   */ key: "searchSchedules",
            value: function searchSchedules(searchSchedulesRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchSchedules(searchSchedulesRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchSchedules(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Update schedule. /n  Version: 9.4.0.cl or later  Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */ key: "updateSchedule",
            value: function updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateSchedule(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableSchedulesApi;
}();
var ObservableSecurityApi = /*#__PURE__*/ function() {
    function ObservableSecurityApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableSecurityApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SecurityApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SecurityApiResponseProcessor();
    }
    _create_class(ObservableSecurityApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param assignChangeAuthorRequest 
   */ key: "assignChangeAuthor",
            value: function assignChangeAuthor(assignChangeAuthorRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.assignChangeAuthor(assignChangeAuthorRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.assignChangeAuthor(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.  #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */ key: "fetchPermissionsOfPrincipals",
            value: function fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchPermissionsOfPrincipals(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */ key: "fetchPermissionsOnMetadata",
            value: function fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchPermissionsOnMetadata(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */ key: "shareMetadata",
            value: function shareMetadata(shareMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.shareMetadata(shareMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.shareMetadata(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableSecurityApi;
}();
var ObservableSystemApi = /*#__PURE__*/ function() {
    function ObservableSystemApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableSystemApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SystemApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SystemApiResponseProcessor();
    }
    _create_class(ObservableSystemApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.  This API does not require any parameters to be passed in the request.      
   */ key: "getSystemConfig",
            value: function getSystemConfig(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getSystemConfig(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getSystemConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemInformation",
            value: function getSystemInformation(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getSystemInformation(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getSystemInformation(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemOverrideInfo",
            value: function getSystemOverrideInfo(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getSystemOverrideInfo(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getSystemOverrideInfo(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates the current configuration of the cluster. You must send the configuration settings in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.      
   * @param updateSystemConfigRequest 
   */ key: "updateSystemConfig",
            value: function updateSystemConfig(updateSystemConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateSystemConfig(updateSystemConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateSystemConfig(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableSystemApi;
}();
var ObservableTagsApi = /*#__PURE__*/ function() {
    function ObservableTagsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableTagsApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new TagsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new TagsApiResponseProcessor();
    }
    _create_class(ObservableTagsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "assignTag",
            value: function assignTag(assignTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.assignTag(assignTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.assignTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createTagRequest 
   */ key: "createTag",
            value: function createTag(createTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createTag(createTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */ key: "deleteTag",
            value: function deleteTag(tagIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteTag(tagIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */ key: "searchTags",
            value: function searchTags(searchTagsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchTags(searchTagsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchTags(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "unassignTag",
            value: function unassignTag(assignTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.unassignTag(assignTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.unassignTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */ key: "updateTag",
            value: function updateTag(tagIdentifier, updateTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateTag(tagIdentifier, updateTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateTag(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableTagsApi;
}();
var ObservableThoughtSpotRestApi = /*#__PURE__*/ function() {
    function ObservableThoughtSpotRestApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableThoughtSpotRestApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ThoughtSpotRestApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ThoughtSpotRestApiResponseProcessor();
    }
    _create_class(ObservableThoughtSpotRestApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param assignChangeAuthorRequest 
   */ key: "assignChangeAuthor",
            value: function assignChangeAuthor(assignChangeAuthorRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.assignChangeAuthor(assignChangeAuthorRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.assignChangeAuthor(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "assignTag",
            value: function assignTag(assignTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.assignTag(assignTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.assignTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param changeUserPasswordRequest 
   */ key: "changeUserPassword",
            value: function changeUserPassword(changeUserPasswordRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.changeUserPassword(changeUserPasswordRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.changeUserPassword(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Commits TML files of metadata objects to the Git branch configured on your instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param commitBranchRequest 
   */ key: "commitBranch",
            value: function commitBranch(commitBranchRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.commitBranch(commitBranchRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.commitBranch(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param createConfigRequest 
   */ key: "createConfig",
            value: function createConfig(createConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createConfig(createConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */ key: "createConnection",
            value: function createConnection(createConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createConnection(createConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param createCustomActionRequest 
   */ key: "createCustomAction",
            value: function createCustomAction(createCustomActionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createCustomAction(createCustomActionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createCustomAction(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param createOrgRequest 
   */ key: "createOrg",
            value: function createOrg(createOrgRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createOrg(createOrgRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createOrg(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Creates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param createRoleRequest 
   */ key: "createRole",
            value: function createRole(createRoleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createRole(createRoleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createRole(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Create schedule. /n  Version: 9.4.0.cl or later  Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).      
   * @param createScheduleRequest 
   */ key: "createSchedule",
            value: function createSchedule(createScheduleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createSchedule(createScheduleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createSchedule(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createTagRequest 
   */ key: "createTag",
            value: function createTag(createTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createTag(createTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createUserRequest 
   */ key: "createUser",
            value: function createUser(createUserRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createUser(createUserRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createUser(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */ key: "createUserGroup",
            value: function createUserGroup(createUserGroupRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createUserGroup(createUserGroupRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createUserGroup(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConfigRequest 
   */ key: "deleteConfig",
            value: function deleteConfig(deleteConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteConfig(deleteConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConnectionRequest 
   */ key: "deleteConnection",
            value: function deleteConnection(deleteConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteConnection(deleteConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */ key: "deleteCustomAction",
            value: function deleteCustomAction(customActionIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteCustomAction(customActionIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteCustomAction(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteMetadataRequest 
   */ key: "deleteMetadata",
            value: function deleteMetadata(deleteMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteMetadata(deleteMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteMetadata(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */ key: "deleteOrg",
            value: function deleteOrg(orgIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteOrg(orgIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteOrg(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Deletes a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   */ key: "deleteRole",
            value: function deleteRole(roleIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteRole(roleIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteRole(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Deletes a scheduled job. /n  Version: 9.4.0.cl or later  Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.         
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */ key: "deleteSchedule",
            value: function deleteSchedule(scheduleIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteSchedule(scheduleIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteSchedule(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */ key: "deleteTag",
            value: function deleteTag(tagIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteTag(tagIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   */ key: "deleteUser",
            value: function deleteUser(userIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteUser(userIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteUser(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param groupIdentifier GUID or name of the group.
   */ key: "deleteUserGroup",
            value: function deleteUserGroup(groupIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteUserGroup(groupIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteUserGroup(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.      
   * @param deployCommitRequest 
   */ key: "deployCommit",
            value: function deployCommit(deployCommitRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deployCommit(deployCommitRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deployCommit(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  You can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.      
   * @param exportAnswerReportRequest 
   */ key: "exportAnswerReport",
            value: function exportAnswerReport(exportAnswerReportRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.exportAnswerReport(exportAnswerReportRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.exportAnswerReport(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  You can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param exportLiveboardReportRequest 
   */ key: "exportLiveboardReport",
            value: function exportLiveboardReport(exportLiveboardReportRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.exportLiveboardReport(exportLiveboardReportRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.exportLiveboardReport(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.      
   * @param exportMetadataTMLRequest 
   */ key: "exportMetadataTML",
            value: function exportMetadataTML(exportMetadataTMLRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.exportMetadataTML(exportMetadataTMLRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.exportMetadataTML(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches data from a saved Answer.  Requires at least view access to the saved Answer.      
   * @param fetchAnswerDataRequest 
   */ key: "fetchAnswerData",
            value: function fetchAnswerData(fetchAnswerDataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchAnswerData(fetchAnswerDataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchAnswerData(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */ key: "fetchAnswerSqlQuery",
            value: function fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchAnswerSqlQuery(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param fetchLiveboardDataRequest 
   */ key: "fetchLiveboardData",
            value: function fetchLiveboardData(fetchLiveboardDataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchLiveboardData(fetchLiveboardDataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchLiveboardData(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */ key: "fetchLiveboardSqlQuery",
            value: function fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchLiveboardSqlQuery(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance      
   * @param fetchLogsRequest 
   */ key: "fetchLogs",
            value: function fetchLogs(fetchLogsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchLogs(fetchLogsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchLogs(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.  #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */ key: "fetchPermissionsOfPrincipals",
            value: function fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchPermissionsOfPrincipals(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */ key: "fetchPermissionsOnMetadata",
            value: function fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.fetchPermissionsOnMetadata(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param forceLogoutUsersRequest 
   */ key: "forceLogoutUsers",
            value: function forceLogoutUsers(forceLogoutUsersRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.forceLogoutUsers(forceLogoutUsersRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.forceLogoutUsers(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */ key: "getCurrentUserInfo",
            value: function getCurrentUserInfo(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getCurrentUserInfo(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getCurrentUserInfo(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Get token for the currently logged-in user. /n  Version: 9.4.0.cl or later  Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */ key: "getCurrentUserToken",
            value: function getCurrentUserToken(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getCurrentUserToken(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getCurrentUserToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, specify the Org ID in the `org_id` attribute.  **Note**: This feature is available only on clusters with trusted authentication enabled.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getFullAccessTokenRequest 
   */ key: "getFullAccessToken",
            value: function getFullAccessToken(getFullAccessTokenRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getFullAccessToken(getFullAccessTokenRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getFullAccessToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, send the `Org ID` in the API request.  **Note**: This feature is available only if Trusted authentication is enabled on your cluster.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getObjectAccessTokenRequest 
   */ key: "getObjectAccessToken",
            value: function getObjectAccessToken(getObjectAccessTokenRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getObjectAccessToken(getObjectAccessTokenRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getObjectAccessToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.  This API does not require any parameters to be passed in the request.      
   */ key: "getSystemConfig",
            value: function getSystemConfig(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getSystemConfig(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getSystemConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemInformation",
            value: function getSystemInformation(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getSystemInformation(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getSystemInformation(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemOverrideInfo",
            value: function getSystemOverrideInfo(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.getSystemOverrideInfo(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.getSystemOverrideInfo(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.      
   * @param importMetadataTMLRequest 
   */ key: "importMetadataTML",
            value: function importMetadataTML(importMetadataTMLRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.importMetadataTML(importMetadataTMLRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.importMetadataTML(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */ key: "importUserGroups",
            value: function importUserGroups(importUserGroupsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.importUserGroups(importUserGroupsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.importUserGroups(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param importUsersRequest 
   */ key: "importUsers",
            value: function importUsers(importUsersRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.importUsers(importUsersRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.importUsers(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  A successful login returns a session cookie that can be used in your subsequent API requests.      
   * @param loginRequest 
   */ key: "login",
            value: function login(loginRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.login(loginRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.login(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Logs out a user from their current session.      
   */ key: "logout",
            value: function logout(_options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.logout(_options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.logout(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param resetUserPasswordRequest 
   */ key: "resetUserPassword",
            value: function resetUserPassword(resetUserPasswordRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.resetUserPassword(resetUserPasswordRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.resetUserPassword(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Reverts TML objects to a previous commit specified in the API request.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */ key: "revertCommit",
            value: function revertCommit(commitId, revertCommitRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.revertCommit(commitId, revertCommitRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.revertCommit(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token) and [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */ key: "revokeToken",
            value: function revokeToken(revokeTokenRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.revokeToken(revokeTokenRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.revokeToken(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of commits for a given metadata object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCommitsRequest 
   */ key: "searchCommits",
            value: function searchCommits(searchCommitsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchCommits(searchCommitsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchCommits(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchConfigRequest 
   */ key: "searchConfig",
            value: function searchConfig(searchConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchConfig(searchConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`). ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ``` - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.     
   * @param searchConnectionRequest 
   */ key: "searchConnection",
            value: function searchConnection(searchConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchConnection(searchConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCustomActionsRequest 
   */ key: "searchCustomActions",
            value: function searchCustomActions(searchCustomActionsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchCustomActions(searchCustomActionsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchCustomActions(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Generates an Answer from a given data source.  Requires at least view access to the data source.  #### Usage guidelines  To generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).   ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```      
   * @param searchDataRequest 
   */ key: "searchData",
            value: function searchData(searchDataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchData(searchDataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchData(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  * To get all metadata objects, send the API request without any attributes. * To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. * To get a specific metadata object, specify the GUID. * To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response.      
   * @param searchMetadataRequest 
   */ key: "searchMetadata",
            value: function searchMetadata(searchMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchMetadata(searchMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchMetadata(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param searchOrgsRequest 
   */ key: "searchOrgs",
            value: function searchOrgs(searchOrgsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchOrgs(searchOrgsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchOrgs(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Gets Roles configured on a ThoughtSpot instance. Requires cluster Administration, Role Administration or Group Administration privileges. /n  Version: 9.5.0.cl or later
   * @param searchRolesRequest 
   */ key: "searchRoles",
            value: function searchRoles(searchRolesRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchRoles(searchRolesRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchRoles(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Search Schedules /n  Version: 9.4.0.cl or later  Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.      
   * @param searchSchedulesRequest 
   */ key: "searchSchedules",
            value: function searchSchedules(searchSchedulesRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchSchedules(searchSchedulesRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchSchedules(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */ key: "searchTags",
            value: function searchTags(searchTagsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchTags(searchTagsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchTags(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUserGroupsRequest 
   */ key: "searchUserGroups",
            value: function searchUserGroups(searchUserGroupsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchUserGroups(searchUserGroupsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchUserGroups(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUsersRequest 
   */ key: "searchUsers",
            value: function searchUsers(searchUsersRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchUsers(searchUsersRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchUsers(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */ key: "shareMetadata",
            value: function shareMetadata(shareMetadataRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.shareMetadata(shareMetadataRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.shareMetadata(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "unassignTag",
            value: function unassignTag(assignTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.unassignTag(assignTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.unassignTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param updateConfigRequest 
   */ key: "updateConfig",
            value: function updateConfig(updateConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateConfig(updateConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */ key: "updateConnection",
            value: function updateConnection(updateConnectionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateConnection(updateConnectionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateConnection(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */ key: "updateCustomAction",
            value: function updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateCustomAction(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */ key: "updateOrg",
            value: function updateOrg(orgIdentifier, updateOrgRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateOrg(orgIdentifier, updateOrgRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateOrg(rsp);
                    }));
                }));
            }
        },
        {
            /**
   * Updates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   * @param updateRoleRequest 
   */ key: "updateRole",
            value: function updateRole(roleIdentifier, updateRoleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateRole(roleIdentifier, updateRoleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateRole(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *  Update schedule. /n  Version: 9.4.0.cl or later  Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */ key: "updateSchedule",
            value: function updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateSchedule(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates the current configuration of the cluster. You must send the configuration settings in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.      
   * @param updateSystemConfigRequest 
   */ key: "updateSystemConfig",
            value: function updateSystemConfig(updateSystemConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateSystemConfig(updateSystemConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateSystemConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */ key: "updateTag",
            value: function updateTag(tagIdentifier, updateTagRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateTag(tagIdentifier, updateTagRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateTag(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */ key: "updateUser",
            value: function updateUser(userIdentifier, updateUserRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateUser(userIdentifier, updateUserRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateUser(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */ key: "updateUserGroup",
            value: function updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateUserGroup(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param validateMergeRequest 
   */ key: "validateMerge",
            value: function validateMerge(validateMergeRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.validateMerge(validateMergeRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.validateMerge(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableThoughtSpotRestApi;
}();
var ObservableUsersApi = /*#__PURE__*/ function() {
    function ObservableUsersApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableUsersApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new UsersApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new UsersApiResponseProcessor();
    }
    _create_class(ObservableUsersApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param changeUserPasswordRequest 
   */ key: "changeUserPassword",
            value: function changeUserPassword(changeUserPasswordRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.changeUserPassword(changeUserPasswordRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.changeUserPassword(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createUserRequest 
   */ key: "createUser",
            value: function createUser(createUserRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createUser(createUserRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createUser(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   */ key: "deleteUser",
            value: function deleteUser(userIdentifier, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteUser(userIdentifier, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteUser(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param forceLogoutUsersRequest 
   */ key: "forceLogoutUsers",
            value: function forceLogoutUsers(forceLogoutUsersRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.forceLogoutUsers(forceLogoutUsersRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.forceLogoutUsers(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param importUsersRequest 
   */ key: "importUsers",
            value: function importUsers(importUsersRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.importUsers(importUsersRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.importUsers(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param resetUserPasswordRequest 
   */ key: "resetUserPassword",
            value: function resetUserPassword(resetUserPasswordRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.resetUserPassword(resetUserPasswordRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.resetUserPassword(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUsersRequest 
   */ key: "searchUsers",
            value: function searchUsers(searchUsersRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchUsers(searchUsersRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchUsers(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */ key: "updateUser",
            value: function updateUser(userIdentifier, updateUserRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateUser(userIdentifier, updateUserRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateUser(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableUsersApi;
}();
var ObservableVersionControlApi = /*#__PURE__*/ function() {
    function ObservableVersionControlApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, ObservableVersionControlApi);
        this.configuration = configuration;
        this.requestFactory = requestFactory || new VersionControlApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new VersionControlApiResponseProcessor();
    }
    _create_class(ObservableVersionControlApi, [
        {
            /**
   *   Version: 9.2.0.cl or later  Commits TML files of metadata objects to the Git branch configured on your instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param commitBranchRequest 
   */ key: "commitBranch",
            value: function commitBranch(commitBranchRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.commitBranch(commitBranchRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.commitBranch(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param createConfigRequest 
   */ key: "createConfig",
            value: function createConfig(createConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.createConfig(createConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.createConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConfigRequest 
   */ key: "deleteConfig",
            value: function deleteConfig(deleteConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deleteConfig(deleteConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deleteConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.      
   * @param deployCommitRequest 
   */ key: "deployCommit",
            value: function deployCommit(deployCommitRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.deployCommit(deployCommitRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.deployCommit(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Reverts TML objects to a previous commit specified in the API request.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */ key: "revertCommit",
            value: function revertCommit(commitId, revertCommitRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.revertCommit(commitId, revertCommitRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.revertCommit(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of commits for a given metadata object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCommitsRequest 
   */ key: "searchCommits",
            value: function searchCommits(searchCommitsRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchCommits(searchCommitsRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchCommits(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchConfigRequest 
   */ key: "searchConfig",
            value: function searchConfig(searchConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.searchConfig(searchConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.searchConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param updateConfigRequest 
   */ key: "updateConfig",
            value: function updateConfig(updateConfigRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.updateConfig(updateConfigRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.updateConfig(rsp);
                    }));
                }));
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param validateMergeRequest 
   */ key: "validateMerge",
            value: function validateMerge(validateMergeRequest, _options) {
                var _this = this;
                var requestContextPromise = this.requestFactory.validateMerge(validateMergeRequest, _options);
                var middlewarePreObservable = from(requestContextPromise);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _loop = function() {
                        var middleware = _step.value;
                        middlewarePreObservable = middlewarePreObservable.pipe(mergeMap(function(ctx) {
                            return middleware.pre(ctx);
                        }));
                    };
                    for(var _iterator = this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return middlewarePreObservable.pipe(mergeMap(function(ctx) {
                    return _this.configuration.httpApi.send(ctx);
                })).pipe(mergeMap(function(response) {
                    var middlewarePostObservable = of(response);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        var _loop = function() {
                            var middleware = _step.value;
                            middlewarePostObservable = middlewarePostObservable.pipe(mergeMap(function(rsp) {
                                return middleware.post(rsp);
                            }));
                        };
                        for(var _iterator = _this.configuration.middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return middlewarePostObservable.pipe(map(function(rsp) {
                        return _this.responseProcessor.validateMerge(rsp);
                    }));
                }));
            }
        }
    ]);
    return ObservableVersionControlApi;
}();
// types/PromiseAPI.ts
var PromiseAuthenticationApi = /*#__PURE__*/ function() {
    function PromiseAuthenticationApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseAuthenticationApi);
        this.api = new ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseAuthenticationApi, [
        {
            /**
   *   Version: 9.0.0.cl or later   Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */ key: "getCurrentUserInfo",
            value: function getCurrentUserInfo(_options) {
                var result = this.api.getCurrentUserInfo(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Get token for the currently logged-in user. /n  Version: 9.4.0.cl or later  Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */ key: "getCurrentUserToken",
            value: function getCurrentUserToken(_options) {
                var result = this.api.getCurrentUserToken(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, specify the Org ID in the `org_id` attribute.  **Note**: This feature is available only on clusters with trusted authentication enabled.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getFullAccessTokenRequest 
   */ key: "getFullAccessToken",
            value: function getFullAccessToken(getFullAccessTokenRequest, _options) {
                var result = this.api.getFullAccessToken(getFullAccessTokenRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, send the `Org ID` in the API request.  **Note**: This feature is available only if Trusted authentication is enabled on your cluster.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getObjectAccessTokenRequest 
   */ key: "getObjectAccessToken",
            value: function getObjectAccessToken(getObjectAccessTokenRequest, _options) {
                var result = this.api.getObjectAccessToken(getObjectAccessTokenRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  A successful login returns a session cookie that can be used in your subsequent API requests.      
   * @param loginRequest 
   */ key: "login",
            value: function login(loginRequest, _options) {
                var result = this.api.login(loginRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Logs out a user from their current session.      
   */ key: "logout",
            value: function logout(_options) {
                var result = this.api.logout(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token) and [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */ key: "revokeToken",
            value: function revokeToken(revokeTokenRequest, _options) {
                var result = this.api.revokeToken(revokeTokenRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseAuthenticationApi;
}();
var PromiseConnectionsApi = /*#__PURE__*/ function() {
    function PromiseConnectionsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseConnectionsApi);
        this.api = new ObservableConnectionsApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseConnectionsApi, [
        {
            /**
   *   Version: 9.2.0.cl or later  Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */ key: "createConnection",
            value: function createConnection(createConnectionRequest, _options) {
                var result = this.api.createConnection(createConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConnectionRequest 
   */ key: "deleteConnection",
            value: function deleteConnection(deleteConnectionRequest, _options) {
                var result = this.api.deleteConnection(deleteConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`). ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ``` - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.     
   * @param searchConnectionRequest 
   */ key: "searchConnection",
            value: function searchConnection(searchConnectionRequest, _options) {
                var result = this.api.searchConnection(searchConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */ key: "updateConnection",
            value: function updateConnection(updateConnectionRequest, _options) {
                var result = this.api.updateConnection(updateConnectionRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseConnectionsApi;
}();
var PromiseCustomActionApi = /*#__PURE__*/ function() {
    function PromiseCustomActionApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseCustomActionApi);
        this.api = new ObservableCustomActionApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseCustomActionApi, [
        {
            /**
   *   Version: 9.6.0.cl or later  Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param createCustomActionRequest 
   */ key: "createCustomAction",
            value: function createCustomAction(createCustomActionRequest, _options) {
                var result = this.api.createCustomAction(createCustomActionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */ key: "deleteCustomAction",
            value: function deleteCustomAction(customActionIdentifier, _options) {
                var result = this.api.deleteCustomAction(customActionIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCustomActionsRequest 
   */ key: "searchCustomActions",
            value: function searchCustomActions(searchCustomActionsRequest, _options) {
                var result = this.api.searchCustomActions(searchCustomActionsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */ key: "updateCustomAction",
            value: function updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
                var result = this.api.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseCustomActionApi;
}();
var PromiseDataApi = /*#__PURE__*/ function() {
    function PromiseDataApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseDataApi);
        this.api = new ObservableDataApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseDataApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches data from a saved Answer.  Requires at least view access to the saved Answer.      
   * @param fetchAnswerDataRequest 
   */ key: "fetchAnswerData",
            value: function fetchAnswerData(fetchAnswerDataRequest, _options) {
                var result = this.api.fetchAnswerData(fetchAnswerDataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param fetchLiveboardDataRequest 
   */ key: "fetchLiveboardData",
            value: function fetchLiveboardData(fetchLiveboardDataRequest, _options) {
                var result = this.api.fetchLiveboardData(fetchLiveboardDataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Generates an Answer from a given data source.  Requires at least view access to the data source.  #### Usage guidelines  To generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).   ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```      
   * @param searchDataRequest 
   */ key: "searchData",
            value: function searchData(searchDataRequest, _options) {
                var result = this.api.searchData(searchDataRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseDataApi;
}();
var PromiseGroupsApi = /*#__PURE__*/ function() {
    function PromiseGroupsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseGroupsApi);
        this.api = new ObservableGroupsApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseGroupsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */ key: "createUserGroup",
            value: function createUserGroup(createUserGroupRequest, _options) {
                var result = this.api.createUserGroup(createUserGroupRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param groupIdentifier GUID or name of the group.
   */ key: "deleteUserGroup",
            value: function deleteUserGroup(groupIdentifier, _options) {
                var result = this.api.deleteUserGroup(groupIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */ key: "importUserGroups",
            value: function importUserGroups(importUserGroupsRequest, _options) {
                var result = this.api.importUserGroups(importUserGroupsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUserGroupsRequest 
   */ key: "searchUserGroups",
            value: function searchUserGroups(searchUserGroupsRequest, _options) {
                var result = this.api.searchUserGroups(searchUserGroupsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */ key: "updateUserGroup",
            value: function updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
                var result = this.api.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseGroupsApi;
}();
var PromiseLogApi = /*#__PURE__*/ function() {
    function PromiseLogApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseLogApi);
        this.api = new ObservableLogApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseLogApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance      
   * @param fetchLogsRequest 
   */ key: "fetchLogs",
            value: function fetchLogs(fetchLogsRequest, _options) {
                var result = this.api.fetchLogs(fetchLogsRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseLogApi;
}();
var PromiseMetadataApi = /*#__PURE__*/ function() {
    function PromiseMetadataApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseMetadataApi);
        this.api = new ObservableMetadataApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseMetadataApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteMetadataRequest 
   */ key: "deleteMetadata",
            value: function deleteMetadata(deleteMetadataRequest, _options) {
                var result = this.api.deleteMetadata(deleteMetadataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.      
   * @param exportMetadataTMLRequest 
   */ key: "exportMetadataTML",
            value: function exportMetadataTML(exportMetadataTMLRequest, _options) {
                var result = this.api.exportMetadataTML(exportMetadataTMLRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */ key: "fetchAnswerSqlQuery",
            value: function fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
                var result = this.api.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */ key: "fetchLiveboardSqlQuery",
            value: function fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
                var result = this.api.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.      
   * @param importMetadataTMLRequest 
   */ key: "importMetadataTML",
            value: function importMetadataTML(importMetadataTMLRequest, _options) {
                var result = this.api.importMetadataTML(importMetadataTMLRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  * To get all metadata objects, send the API request without any attributes. * To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. * To get a specific metadata object, specify the GUID. * To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response.      
   * @param searchMetadataRequest 
   */ key: "searchMetadata",
            value: function searchMetadata(searchMetadataRequest, _options) {
                var result = this.api.searchMetadata(searchMetadataRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseMetadataApi;
}();
var PromiseOrgsApi = /*#__PURE__*/ function() {
    function PromiseOrgsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseOrgsApi);
        this.api = new ObservableOrgsApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseOrgsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param createOrgRequest 
   */ key: "createOrg",
            value: function createOrg(createOrgRequest, _options) {
                var result = this.api.createOrg(createOrgRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */ key: "deleteOrg",
            value: function deleteOrg(orgIdentifier, _options) {
                var result = this.api.deleteOrg(orgIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param searchOrgsRequest 
   */ key: "searchOrgs",
            value: function searchOrgs(searchOrgsRequest, _options) {
                var result = this.api.searchOrgs(searchOrgsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */ key: "updateOrg",
            value: function updateOrg(orgIdentifier, updateOrgRequest, _options) {
                var result = this.api.updateOrg(orgIdentifier, updateOrgRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseOrgsApi;
}();
var PromiseReportsApi = /*#__PURE__*/ function() {
    function PromiseReportsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseReportsApi);
        this.api = new ObservableReportsApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseReportsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  You can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.      
   * @param exportAnswerReportRequest 
   */ key: "exportAnswerReport",
            value: function exportAnswerReport(exportAnswerReportRequest, _options) {
                var result = this.api.exportAnswerReport(exportAnswerReportRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  You can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param exportLiveboardReportRequest 
   */ key: "exportLiveboardReport",
            value: function exportLiveboardReport(exportLiveboardReportRequest, _options) {
                var result = this.api.exportLiveboardReport(exportLiveboardReportRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseReportsApi;
}();
var PromiseRolesApi = /*#__PURE__*/ function() {
    function PromiseRolesApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseRolesApi);
        this.api = new ObservableRolesApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseRolesApi, [
        {
            /**
   * Creates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param createRoleRequest 
   */ key: "createRole",
            value: function createRole(createRoleRequest, _options) {
                var result = this.api.createRole(createRoleRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Deletes a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   */ key: "deleteRole",
            value: function deleteRole(roleIdentifier, _options) {
                var result = this.api.deleteRole(roleIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Gets Roles configured on a ThoughtSpot instance. Requires cluster Administration, Role Administration or Group Administration privileges. /n  Version: 9.5.0.cl or later
   * @param searchRolesRequest 
   */ key: "searchRoles",
            value: function searchRoles(searchRolesRequest, _options) {
                var result = this.api.searchRoles(searchRolesRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Updates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   * @param updateRoleRequest 
   */ key: "updateRole",
            value: function updateRole(roleIdentifier, updateRoleRequest, _options) {
                var result = this.api.updateRole(roleIdentifier, updateRoleRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseRolesApi;
}();
var PromiseSchedulesApi = /*#__PURE__*/ function() {
    function PromiseSchedulesApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseSchedulesApi);
        this.api = new ObservableSchedulesApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseSchedulesApi, [
        {
            /**
   *  Create schedule. /n  Version: 9.4.0.cl or later  Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).      
   * @param createScheduleRequest 
   */ key: "createSchedule",
            value: function createSchedule(createScheduleRequest, _options) {
                var result = this.api.createSchedule(createScheduleRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Deletes a scheduled job. /n  Version: 9.4.0.cl or later  Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.         
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */ key: "deleteSchedule",
            value: function deleteSchedule(scheduleIdentifier, _options) {
                var result = this.api.deleteSchedule(scheduleIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Search Schedules /n  Version: 9.4.0.cl or later  Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.      
   * @param searchSchedulesRequest 
   */ key: "searchSchedules",
            value: function searchSchedules(searchSchedulesRequest, _options) {
                var result = this.api.searchSchedules(searchSchedulesRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Update schedule. /n  Version: 9.4.0.cl or later  Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */ key: "updateSchedule",
            value: function updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
                var result = this.api.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseSchedulesApi;
}();
var PromiseSecurityApi = /*#__PURE__*/ function() {
    function PromiseSecurityApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseSecurityApi);
        this.api = new ObservableSecurityApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseSecurityApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param assignChangeAuthorRequest 
   */ key: "assignChangeAuthor",
            value: function assignChangeAuthor(assignChangeAuthorRequest, _options) {
                var result = this.api.assignChangeAuthor(assignChangeAuthorRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.  #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */ key: "fetchPermissionsOfPrincipals",
            value: function fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
                var result = this.api.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */ key: "fetchPermissionsOnMetadata",
            value: function fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
                var result = this.api.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */ key: "shareMetadata",
            value: function shareMetadata(shareMetadataRequest, _options) {
                var result = this.api.shareMetadata(shareMetadataRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseSecurityApi;
}();
var PromiseSystemApi = /*#__PURE__*/ function() {
    function PromiseSystemApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseSystemApi);
        this.api = new ObservableSystemApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseSystemApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.  This API does not require any parameters to be passed in the request.      
   */ key: "getSystemConfig",
            value: function getSystemConfig(_options) {
                var result = this.api.getSystemConfig(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemInformation",
            value: function getSystemInformation(_options) {
                var result = this.api.getSystemInformation(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemOverrideInfo",
            value: function getSystemOverrideInfo(_options) {
                var result = this.api.getSystemOverrideInfo(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates the current configuration of the cluster. You must send the configuration settings in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.      
   * @param updateSystemConfigRequest 
   */ key: "updateSystemConfig",
            value: function updateSystemConfig(updateSystemConfigRequest, _options) {
                var result = this.api.updateSystemConfig(updateSystemConfigRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseSystemApi;
}();
var PromiseTagsApi = /*#__PURE__*/ function() {
    function PromiseTagsApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseTagsApi);
        this.api = new ObservableTagsApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseTagsApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "assignTag",
            value: function assignTag(assignTagRequest, _options) {
                var result = this.api.assignTag(assignTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createTagRequest 
   */ key: "createTag",
            value: function createTag(createTagRequest, _options) {
                var result = this.api.createTag(createTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */ key: "deleteTag",
            value: function deleteTag(tagIdentifier, _options) {
                var result = this.api.deleteTag(tagIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */ key: "searchTags",
            value: function searchTags(searchTagsRequest, _options) {
                var result = this.api.searchTags(searchTagsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "unassignTag",
            value: function unassignTag(assignTagRequest, _options) {
                var result = this.api.unassignTag(assignTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */ key: "updateTag",
            value: function updateTag(tagIdentifier, updateTagRequest, _options) {
                var result = this.api.updateTag(tagIdentifier, updateTagRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseTagsApi;
}();
var PromiseThoughtSpotRestApi = /*#__PURE__*/ function() {
    function PromiseThoughtSpotRestApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseThoughtSpotRestApi);
        this.api = new ObservableThoughtSpotRestApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseThoughtSpotRestApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param assignChangeAuthorRequest 
   */ key: "assignChangeAuthor",
            value: function assignChangeAuthor(assignChangeAuthorRequest, _options) {
                var result = this.api.assignChangeAuthor(assignChangeAuthorRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "assignTag",
            value: function assignTag(assignTagRequest, _options) {
                var result = this.api.assignTag(assignTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param changeUserPasswordRequest 
   */ key: "changeUserPassword",
            value: function changeUserPassword(changeUserPasswordRequest, _options) {
                var result = this.api.changeUserPassword(changeUserPasswordRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Commits TML files of metadata objects to the Git branch configured on your instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param commitBranchRequest 
   */ key: "commitBranch",
            value: function commitBranch(commitBranchRequest, _options) {
                var result = this.api.commitBranch(commitBranchRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param createConfigRequest 
   */ key: "createConfig",
            value: function createConfig(createConfigRequest, _options) {
                var result = this.api.createConfig(createConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */ key: "createConnection",
            value: function createConnection(createConnectionRequest, _options) {
                var result = this.api.createConnection(createConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param createCustomActionRequest 
   */ key: "createCustomAction",
            value: function createCustomAction(createCustomActionRequest, _options) {
                var result = this.api.createCustomAction(createCustomActionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param createOrgRequest 
   */ key: "createOrg",
            value: function createOrg(createOrgRequest, _options) {
                var result = this.api.createOrg(createOrgRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Creates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param createRoleRequest 
   */ key: "createRole",
            value: function createRole(createRoleRequest, _options) {
                var result = this.api.createRole(createRoleRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Create schedule. /n  Version: 9.4.0.cl or later  Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).      
   * @param createScheduleRequest 
   */ key: "createSchedule",
            value: function createSchedule(createScheduleRequest, _options) {
                var result = this.api.createSchedule(createScheduleRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createTagRequest 
   */ key: "createTag",
            value: function createTag(createTagRequest, _options) {
                var result = this.api.createTag(createTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createUserRequest 
   */ key: "createUser",
            value: function createUser(createUserRequest, _options) {
                var result = this.api.createUser(createUserRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */ key: "createUserGroup",
            value: function createUserGroup(createUserGroupRequest, _options) {
                var result = this.api.createUserGroup(createUserGroupRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConfigRequest 
   */ key: "deleteConfig",
            value: function deleteConfig(deleteConfigRequest, _options) {
                var result = this.api.deleteConfig(deleteConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConnectionRequest 
   */ key: "deleteConnection",
            value: function deleteConnection(deleteConnectionRequest, _options) {
                var result = this.api.deleteConnection(deleteConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */ key: "deleteCustomAction",
            value: function deleteCustomAction(customActionIdentifier, _options) {
                var result = this.api.deleteCustomAction(customActionIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteMetadataRequest 
   */ key: "deleteMetadata",
            value: function deleteMetadata(deleteMetadataRequest, _options) {
                var result = this.api.deleteMetadata(deleteMetadataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */ key: "deleteOrg",
            value: function deleteOrg(orgIdentifier, _options) {
                var result = this.api.deleteOrg(orgIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Deletes a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   */ key: "deleteRole",
            value: function deleteRole(roleIdentifier, _options) {
                var result = this.api.deleteRole(roleIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Deletes a scheduled job. /n  Version: 9.4.0.cl or later  Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.         
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */ key: "deleteSchedule",
            value: function deleteSchedule(scheduleIdentifier, _options) {
                var result = this.api.deleteSchedule(scheduleIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */ key: "deleteTag",
            value: function deleteTag(tagIdentifier, _options) {
                var result = this.api.deleteTag(tagIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   */ key: "deleteUser",
            value: function deleteUser(userIdentifier, _options) {
                var result = this.api.deleteUser(userIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param groupIdentifier GUID or name of the group.
   */ key: "deleteUserGroup",
            value: function deleteUserGroup(groupIdentifier, _options) {
                var result = this.api.deleteUserGroup(groupIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.      
   * @param deployCommitRequest 
   */ key: "deployCommit",
            value: function deployCommit(deployCommitRequest, _options) {
                var result = this.api.deployCommit(deployCommitRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  You can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.      
   * @param exportAnswerReportRequest 
   */ key: "exportAnswerReport",
            value: function exportAnswerReport(exportAnswerReportRequest, _options) {
                var result = this.api.exportAnswerReport(exportAnswerReportRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.  Requires `DATADOWNLOADING` (**Can download data**) privilege.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  You can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param exportLiveboardReportRequest 
   */ key: "exportLiveboardReport",
            value: function exportLiveboardReport(exportLiveboardReportRequest, _options) {
                var result = this.api.exportLiveboardReport(exportLiveboardReportRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.      
   * @param exportMetadataTMLRequest 
   */ key: "exportMetadataTML",
            value: function exportMetadataTML(exportMetadataTMLRequest, _options) {
                var result = this.api.exportMetadataTML(exportMetadataTMLRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches data from a saved Answer.  Requires at least view access to the saved Answer.      
   * @param fetchAnswerDataRequest 
   */ key: "fetchAnswerData",
            value: function fetchAnswerData(fetchAnswerDataRequest, _options) {
                var result = this.api.fetchAnswerData(fetchAnswerDataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */ key: "fetchAnswerSqlQuery",
            value: function fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
                var result = this.api.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.      
   * @param fetchLiveboardDataRequest 
   */ key: "fetchLiveboardData",
            value: function fetchLiveboardData(fetchLiveboardDataRequest, _options) {
                var result = this.api.fetchLiveboardData(fetchLiveboardDataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */ key: "fetchLiveboardSqlQuery",
            value: function fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
                var result = this.api.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance      
   * @param fetchLogsRequest 
   */ key: "fetchLogs",
            value: function fetchLogs(fetchLogsRequest, _options) {
                var result = this.api.fetchLogs(fetchLogsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.  #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */ key: "fetchPermissionsOfPrincipals",
            value: function fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
                var result = this.api.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */ key: "fetchPermissionsOnMetadata",
            value: function fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
                var result = this.api.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param forceLogoutUsersRequest 
   */ key: "forceLogoutUsers",
            value: function forceLogoutUsers(forceLogoutUsersRequest, _options) {
                var result = this.api.forceLogoutUsers(forceLogoutUsersRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */ key: "getCurrentUserInfo",
            value: function getCurrentUserInfo(_options) {
                var result = this.api.getCurrentUserInfo(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Get token for the currently logged-in user. /n  Version: 9.4.0.cl or later  Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */ key: "getCurrentUserToken",
            value: function getCurrentUserToken(_options) {
                var result = this.api.getCurrentUserToken(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, specify the Org ID in the `org_id` attribute.  **Note**: This feature is available only on clusters with trusted authentication enabled.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getFullAccessTokenRequest 
   */ key: "getFullAccessToken",
            value: function getFullAccessToken(getFullAccessTokenRequest, _options) {
                var result = this.api.getFullAccessToken(getFullAccessTokenRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, use the following attributes.  * `auto_create` * `username`  To assign privileges to the new user, specify the group name or GUID in `group_identifiers`.  To add the user to an Org, send the `Org ID` in the API request.  **Note**: This feature is available only if Trusted authentication is enabled on your cluster.  To provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param getObjectAccessTokenRequest 
   */ key: "getObjectAccessToken",
            value: function getObjectAccessToken(getObjectAccessTokenRequest, _options) {
                var result = this.api.getObjectAccessToken(getObjectAccessTokenRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.  This API does not require any parameters to be passed in the request.      
   */ key: "getSystemConfig",
            value: function getSystemConfig(_options) {
                var result = this.api.getSystemConfig(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemInformation",
            value: function getSystemInformation(_options) {
                var result = this.api.getSystemInformation(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  This API does not require any parameters to be passed in the request.        
   */ key: "getSystemOverrideInfo",
            value: function getSystemOverrideInfo(_options) {
                var result = this.api.getSystemOverrideInfo(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.      
   * @param importMetadataTMLRequest 
   */ key: "importMetadataTML",
            value: function importMetadataTML(importMetadataTMLRequest, _options) {
                var result = this.api.importMetadataTML(importMetadataTMLRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */ key: "importUserGroups",
            value: function importUserGroups(importUserGroupsRequest, _options) {
                var result = this.api.importUserGroups(importUserGroupsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param importUsersRequest 
   */ key: "importUsers",
            value: function importUsers(importUsersRequest, _options) {
                var result = this.api.importUsers(importUsersRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  A successful login returns a session cookie that can be used in your subsequent API requests.      
   * @param loginRequest 
   */ key: "login",
            value: function login(loginRequest, _options) {
                var result = this.api.login(loginRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Logs out a user from their current session.      
   */ key: "logout",
            value: function logout(_options) {
                var result = this.api.logout(_options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param resetUserPasswordRequest 
   */ key: "resetUserPassword",
            value: function resetUserPassword(resetUserPasswordRequest, _options) {
                var result = this.api.resetUserPassword(resetUserPasswordRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Reverts TML objects to a previous commit specified in the API request.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */ key: "revertCommit",
            value: function revertCommit(commitId, revertCommitRequest, _options) {
                var result = this.api.revertCommit(commitId, revertCommitRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token) and [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */ key: "revokeToken",
            value: function revokeToken(revokeTokenRequest, _options) {
                var result = this.api.revokeToken(revokeTokenRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of commits for a given metadata object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCommitsRequest 
   */ key: "searchCommits",
            value: function searchCommits(searchCommitsRequest, _options) {
                var result = this.api.searchCommits(searchCommitsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchConfigRequest 
   */ key: "searchConfig",
            value: function searchConfig(searchConfigRequest, _options) {
                var result = this.api.searchConfig(searchConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`). ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ``` - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.     
   * @param searchConnectionRequest 
   */ key: "searchConnection",
            value: function searchConnection(searchConnectionRequest, _options) {
                var result = this.api.searchConnection(searchConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCustomActionsRequest 
   */ key: "searchCustomActions",
            value: function searchCustomActions(searchCustomActionsRequest, _options) {
                var result = this.api.searchCustomActions(searchCustomActionsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Generates an Answer from a given data source.  Requires at least view access to the data source.  #### Usage guidelines  To generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).   ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```      
   * @param searchDataRequest 
   */ key: "searchData",
            value: function searchData(searchDataRequest, _options) {
                var result = this.api.searchData(searchDataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  * To get all metadata objects, send the API request without any attributes. * To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. * To get a specific metadata object, specify the GUID. * To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response.      
   * @param searchMetadataRequest 
   */ key: "searchMetadata",
            value: function searchMetadata(searchMetadataRequest, _options) {
                var result = this.api.searchMetadata(searchMetadataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param searchOrgsRequest 
   */ key: "searchOrgs",
            value: function searchOrgs(searchOrgsRequest, _options) {
                var result = this.api.searchOrgs(searchOrgsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Gets Roles configured on a ThoughtSpot instance. Requires cluster Administration, Role Administration or Group Administration privileges. /n  Version: 9.5.0.cl or later
   * @param searchRolesRequest 
   */ key: "searchRoles",
            value: function searchRoles(searchRolesRequest, _options) {
                var result = this.api.searchRoles(searchRolesRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Search Schedules /n  Version: 9.4.0.cl or later  Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.      
   * @param searchSchedulesRequest 
   */ key: "searchSchedules",
            value: function searchSchedules(searchSchedulesRequest, _options) {
                var result = this.api.searchSchedules(searchSchedulesRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */ key: "searchTags",
            value: function searchTags(searchTagsRequest, _options) {
                var result = this.api.searchTags(searchTagsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUserGroupsRequest 
   */ key: "searchUserGroups",
            value: function searchUserGroups(searchUserGroupsRequest, _options) {
                var result = this.api.searchUserGroups(searchUserGroupsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUsersRequest 
   */ key: "searchUsers",
            value: function searchUsers(searchUsersRequest, _options) {
                var result = this.api.searchUsers(searchUsersRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */ key: "shareMetadata",
            value: function shareMetadata(shareMetadataRequest, _options) {
                var result = this.api.shareMetadata(shareMetadataRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */ key: "unassignTag",
            value: function unassignTag(assignTagRequest, _options) {
                var result = this.api.unassignTag(assignTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param updateConfigRequest 
   */ key: "updateConfig",
            value: function updateConfig(updateConfigRequest, _options) {
                var result = this.api.updateConfig(updateConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */ key: "updateConnection",
            value: function updateConnection(updateConnectionRequest, _options) {
                var result = this.api.updateConnection(updateConnectionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.6.0.cl or later  Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */ key: "updateCustomAction",
            value: function updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
                var result = this.api.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */ key: "updateOrg",
            value: function updateOrg(orgIdentifier, updateOrgRequest, _options) {
                var result = this.api.updateOrg(orgIdentifier, updateOrgRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   * Updates a Role. Requires cluster Administration or Role Administration privileges. /n  Version: 9.5.0.cl or later
   * @param roleIdentifier Unique ID or name of the role.
   * @param updateRoleRequest 
   */ key: "updateRole",
            value: function updateRole(roleIdentifier, updateRoleRequest, _options) {
                var result = this.api.updateRole(roleIdentifier, updateRoleRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *  Update schedule. /n  Version: 9.4.0.cl or later  Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */ key: "updateSchedule",
            value: function updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
                var result = this.api.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates the current configuration of the cluster. You must send the configuration settings in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.      
   * @param updateSystemConfigRequest 
   */ key: "updateSystemConfig",
            value: function updateSystemConfig(updateSystemConfigRequest, _options) {
                var result = this.api.updateSystemConfig(updateSystemConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */ key: "updateTag",
            value: function updateTag(tagIdentifier, updateTagRequest, _options) {
                var result = this.api.updateTag(tagIdentifier, updateTagRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */ key: "updateUser",
            value: function updateUser(userIdentifier, updateUserRequest, _options) {
                var result = this.api.updateUser(userIdentifier, updateUserRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */ key: "updateUserGroup",
            value: function updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
                var result = this.api.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param validateMergeRequest 
   */ key: "validateMerge",
            value: function validateMerge(validateMergeRequest, _options) {
                var result = this.api.validateMerge(validateMergeRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseThoughtSpotRestApi;
}();
var PromiseUsersApi = /*#__PURE__*/ function() {
    function PromiseUsersApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseUsersApi);
        this.api = new ObservableUsersApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseUsersApi, [
        {
            /**
   *   Version: 9.0.0.cl or later  Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param changeUserPasswordRequest 
   */ key: "changeUserPassword",
            value: function changeUserPassword(changeUserPasswordRequest, _options) {
                var result = this.api.changeUserPassword(changeUserPasswordRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param createUserRequest 
   */ key: "createUser",
            value: function createUser(createUserRequest, _options) {
                var result = this.api.createUser(createUserRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   */ key: "deleteUser",
            value: function deleteUser(userIdentifier, _options) {
                var result = this.api.deleteUser(userIdentifier, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param forceLogoutUsersRequest 
   */ key: "forceLogoutUsers",
            value: function forceLogoutUsers(forceLogoutUsersRequest, _options) {
                var result = this.api.forceLogoutUsers(forceLogoutUsersRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param importUsersRequest 
   */ key: "importUsers",
            value: function importUsers(importUsersRequest, _options) {
                var result = this.api.importUsers(importUsersRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param resetUserPasswordRequest 
   */ key: "resetUserPassword",
            value: function resetUserPassword(resetUserPasswordRequest, _options) {
                var result = this.api.resetUserPassword(resetUserPasswordRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.      
   * @param searchUsersRequest 
   */ key: "searchUsers",
            value: function searchUsers(searchUsersRequest, _options) {
                var result = this.api.searchUsers(searchUsersRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.0.0.cl or later  Updates a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */ key: "updateUser",
            value: function updateUser(userIdentifier, updateUserRequest, _options) {
                var result = this.api.updateUser(userIdentifier, updateUserRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseUsersApi;
}();
var PromiseVersionControlApi = /*#__PURE__*/ function() {
    function PromiseVersionControlApi(configuration, requestFactory, responseProcessor) {
        _class_call_check(this, PromiseVersionControlApi);
        this.api = new ObservableVersionControlApi(configuration, requestFactory, responseProcessor);
    }
    _create_class(PromiseVersionControlApi, [
        {
            /**
   *   Version: 9.2.0.cl or later  Commits TML files of metadata objects to the Git branch configured on your instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param commitBranchRequest 
   */ key: "commitBranch",
            value: function commitBranch(commitBranchRequest, _options) {
                var result = this.api.commitBranch(commitBranchRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).      
   * @param createConfigRequest 
   */ key: "createConfig",
            value: function createConfig(createConfigRequest, _options) {
                var result = this.api.createConfig(createConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param deleteConfigRequest 
   */ key: "deleteConfig",
            value: function deleteConfig(deleteConfigRequest, _options) {
                var result = this.api.deleteConfig(deleteConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.      
   * @param deployCommitRequest 
   */ key: "deployCommit",
            value: function deployCommit(deployCommitRequest, _options) {
                var result = this.api.deployCommit(deployCommitRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Reverts TML objects to a previous commit specified in the API request.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */ key: "revertCommit",
            value: function revertCommit(commitId, revertCommitRequest, _options) {
                var result = this.api.revertCommit(commitId, revertCommitRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets a list of commits for a given metadata object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchCommitsRequest 
   */ key: "searchCommits",
            value: function searchCommits(searchCommitsRequest, _options) {
                var result = this.api.searchCommits(searchCommitsRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param searchConfigRequest 
   */ key: "searchConfig",
            value: function searchConfig(searchConfigRequest, _options) {
                var result = this.api.searchConfig(searchConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param updateConfigRequest 
   */ key: "updateConfig",
            value: function updateConfig(updateConfigRequest, _options) {
                var result = this.api.updateConfig(updateConfigRequest, _options);
                return result.toPromise();
            }
        },
        {
            /**
   *   Version: 9.2.0.cl or later  Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.      
   * @param validateMergeRequest 
   */ key: "validateMerge",
            value: function validateMerge(validateMergeRequest, _options) {
                var result = this.api.validateMerge(validateMergeRequest, _options);
                return result.toPromise();
            }
        }
    ]);
    return PromiseVersionControlApi;
}();
// utils/config.ts
var createBearerAuthenticationConfig = function(url, paramOrTokenProvider) {
    var serverConfig = new ServerConfiguration(url, {});
    var config = createConfiguration({
        baseServer: serverConfig
    });
    var authApiClient = new PromiseAuthenticationApi(config);
    var configTokenProvider;
    if (paramOrTokenProvider.hasOwnProperty("username")) {
        configTokenProvider = {
            getToken: /*#__PURE__*/ _async_to_generator(function() {
                var token;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                authApiClient.getFullAccessToken(paramOrTokenProvider)
                            ];
                        case 1:
                            token = _state.sent().token;
                            return [
                                2,
                                token
                            ];
                    }
                });
            })
        };
    } else if (typeof paramOrTokenProvider === "function") {
        configTokenProvider = {
            getToken: paramOrTokenProvider
        };
    } else {
        throw new Error("Pass a proper GetFullAccessTokenRequest or a function which returns a token");
    }
    var authConfig = {
        bearerAuth: {
            tokenProvider: configTokenProvider
        }
    };
    var globalConfig = createConfiguration({
        authMethods: authConfig,
        baseServer: serverConfig
    });
    return globalConfig;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    APIKey: APIKey,
    APIKeyInput: APIKeyInput,
    ActionConfig: ActionConfig,
    ActionConfigInput: ActionConfigInput,
    ActionConfigInputCreate: ActionConfigInputCreate,
    ActionDetails: ActionDetails,
    ActionDetailsInput: ActionDetailsInput,
    ActionDetailsInputCreate: ActionDetailsInputCreate,
    AnswerContent: AnswerContent,
    AnswerDataResponse: AnswerDataResponse,
    ApiException: ApiException,
    AssignChangeAuthorRequest: AssignChangeAuthorRequest,
    AssignTagRequest: AssignTagRequest,
    AssociateMetadataInput: AssociateMetadataInput,
    AssociateMetadataInputCreate: AssociateMetadataInputCreate,
    Authentication: Authentication,
    AuthenticationApi: AuthenticationApi,
    AuthenticationInput: AuthenticationInput,
    Author: Author,
    AuthorMetadataTypeInput: AuthorMetadataTypeInput,
    AuthorType: AuthorType,
    BasicAuth: BasicAuth,
    BasicAuthInput: BasicAuthInput,
    BearerAuthAuthentication: BearerAuthAuthentication,
    CALLBACK: CALLBACK,
    CALLBACKInput: CALLBACKInput,
    CALLBACKInputMandatory: CALLBACKInputMandatory,
    ChangeUserPasswordRequest: ChangeUserPasswordRequest,
    Column: Column,
    CommitBranchRequest: CommitBranchRequest,
    CommitFileType: CommitFileType,
    CommitHistoryResponse: CommitHistoryResponse,
    CommitResponse: CommitResponse,
    CommiterType: CommiterType,
    ConnectionInput: ConnectionInput,
    ConnectionsApi: ConnectionsApi,
    CreateConfigRequest: CreateConfigRequest,
    CreateConnectionRequest: CreateConnectionRequest,
    CreateConnectionResponse: CreateConnectionResponse,
    CreateCustomActionRequest: CreateCustomActionRequest,
    CreateOrgRequest: CreateOrgRequest,
    CreateRoleRequest: CreateRoleRequest,
    CreateScheduleRequest: CreateScheduleRequest,
    CreateTagRequest: CreateTagRequest,
    CreateUserGroupRequest: CreateUserGroupRequest,
    CreateUserRequest: CreateUserRequest,
    CronExpression: CronExpression,
    CronExpressionInput: CronExpressionInput,
    CustomActionApi: CustomActionApi,
    CustomActionMetadataTypeInput: CustomActionMetadataTypeInput,
    DataApi: DataApi,
    DataWarehouseObjectInput: DataWarehouseObjectInput,
    DataWarehouseObjects: DataWarehouseObjects,
    Database: Database,
    DefaultActionConfig: DefaultActionConfig,
    DefaultActionConfigInput: DefaultActionConfigInput,
    DefaultActionConfigInputCreate: DefaultActionConfigInputCreate,
    DefaultActionConfigSearchInput: DefaultActionConfigSearchInput,
    DeleteConfigRequest: DeleteConfigRequest,
    DeleteConnectionRequest: DeleteConnectionRequest,
    DeleteMetadataRequest: DeleteMetadataRequest,
    DeleteMetadataTypeInput: DeleteMetadataTypeInput,
    DeployCommitRequest: DeployCommitRequest,
    DeployResponse: DeployResponse,
    ErrorResponse: ErrorResponse,
    ExcludeMetadataListItemInput: ExcludeMetadataListItemInput,
    ExportAnswerReportRequest: ExportAnswerReportRequest,
    ExportLiveboardReportRequest: ExportLiveboardReportRequest,
    ExportMetadataTMLRequest: ExportMetadataTMLRequest,
    ExportMetadataTypeInput: ExportMetadataTypeInput,
    FavoriteMetadataInput: FavoriteMetadataInput,
    FavoriteMetadataItem: FavoriteMetadataItem,
    FavoriteObjectOptionsInput: FavoriteObjectOptionsInput,
    FetchAnswerDataRequest: FetchAnswerDataRequest,
    FetchAnswerSqlQueryRequest: FetchAnswerSqlQueryRequest,
    FetchConnectionDiffStatusResponse: FetchConnectionDiffStatusResponse,
    FetchLiveboardDataRequest: FetchLiveboardDataRequest,
    FetchLiveboardSqlQueryRequest: FetchLiveboardSqlQueryRequest,
    FetchLogsRequest: FetchLogsRequest,
    FetchPermissionsOfPrincipalsRequest: FetchPermissionsOfPrincipalsRequest,
    FetchPermissionsOnMetadataRequest: FetchPermissionsOnMetadataRequest,
    ForceLogoutUsersRequest: ForceLogoutUsersRequest,
    Frequency: Frequency,
    FrequencyInput: FrequencyInput,
    GenericInfo: GenericInfo,
    GetFullAccessTokenRequest: GetFullAccessTokenRequest,
    GetObjectAccessTokenRequest: GetObjectAccessTokenRequest,
    GetTokenResponse: GetTokenResponse,
    GroupsApi: GroupsApi,
    GroupsImportListInput: GroupsImportListInput,
    HttpException: HttpException,
    HttpMethod: HttpMethod,
    ImportMetadataTMLRequest: ImportMetadataTMLRequest,
    ImportUser: ImportUser,
    ImportUserGroupsRequest: ImportUserGroupsRequest,
    ImportUserGroupsResponse: ImportUserGroupsResponse,
    ImportUserType: ImportUserType,
    ImportUsersRequest: ImportUsersRequest,
    ImportUsersResponse: ImportUsersResponse,
    IsomorphicFetchHttpLibrary: IsomorphicFetchHttpLibrary,
    JWTMetadataObject: JWTMetadataObject,
    JWTParameter: JWTParameter,
    JWTUserOptions: JWTUserOptions,
    JWTUserOptionsParametersInner: JWTUserOptionsParametersInner,
    LiveboardContent: LiveboardContent,
    LiveboardDataResponse: LiveboardDataResponse,
    LiveboardOptions: LiveboardOptions,
    LiveboardOptionsInput: LiveboardOptionsInput,
    LogApi: LogApi,
    LogResponse: LogResponse,
    LoginRequest: LoginRequest,
    MetadataApi: MetadataApi,
    MetadataAssociationItem: MetadataAssociationItem,
    MetadataInput: MetadataInput,
    MetadataListItemInput: MetadataListItemInput,
    MetadataObject: MetadataObject,
    MetadataResponse: MetadataResponse,
    MetadataSearchResponse: MetadataSearchResponse,
    MetadataSearchSortOptions: MetadataSearchSortOptions,
    ModelTableList: ModelTableList,
    ObjectIDAndName: ObjectIDAndName,
    Org: Org,
    OrgResponse: OrgResponse,
    OrgsApi: OrgsApi,
    ParametersListItem: ParametersListItem,
    ParametersListItemInput: ParametersListItemInput,
    PdfOptions: PdfOptions,
    PdfOptionsInput: PdfOptionsInput,
    PermissionInput: PermissionInput,
    PermissionsMetadataTypeInput: PermissionsMetadataTypeInput,
    PngOptionsInput: PngOptionsInput,
    PrincipalsInput: PrincipalsInput,
    PrincipalsListItem: PrincipalsListItem,
    PrincipalsListItemInput: PrincipalsListItemInput,
    RecipientDetails: RecipientDetails,
    RecipientDetailsInput: RecipientDetailsInput,
    RepoConfigObject: RepoConfigObject,
    ReportsApi: ReportsApi,
    RequestContext: RequestContext,
    RequiredError: RequiredError,
    ResetUserPasswordRequest: ResetUserPasswordRequest,
    ResponseActivationURL: ResponseActivationURL,
    ResponseContext: ResponseContext,
    ResponseCustomAction: ResponseCustomAction,
    ResponseSchedule: ResponseSchedule,
    ResponseScheduleRun: ResponseScheduleRun,
    RevertCommitRequest: RevertCommitRequest,
    RevertResponse: RevertResponse,
    RevertedMetadata: RevertedMetadata,
    RevokeTokenRequest: RevokeTokenRequest,
    RiseSetter: RiseSetter,
    Role: Role,
    RoleResponse: RoleResponse,
    RolesApi: RolesApi,
    RuntimeFilter: RuntimeFilter,
    RuntimeParamOverride: RuntimeParamOverride,
    RuntimeSort: RuntimeSort,
    ScheduleHistoryRunsOptionsInput: ScheduleHistoryRunsOptionsInput,
    SchedulesApi: SchedulesApi,
    SchedulesPdfOptionsInput: SchedulesPdfOptionsInput,
    SchemaObject: SchemaObject,
    Scope: Scope,
    SearchCommitsRequest: SearchCommitsRequest,
    SearchConfigRequest: SearchConfigRequest,
    SearchConnectionRequest: SearchConnectionRequest,
    SearchConnectionResponse: SearchConnectionResponse,
    SearchCustomActionsRequest: SearchCustomActionsRequest,
    SearchDataRequest: SearchDataRequest,
    SearchDataResponse: SearchDataResponse,
    SearchMetadataRequest: SearchMetadataRequest,
    SearchOrgsRequest: SearchOrgsRequest,
    SearchRoleResponse: SearchRoleResponse,
    SearchRolesRequest: SearchRolesRequest,
    SearchSchedulesRequest: SearchSchedulesRequest,
    SearchTagsRequest: SearchTagsRequest,
    SearchUserGroupsRequest: SearchUserGroupsRequest,
    SearchUsersRequest: SearchUsersRequest,
    SecurityApi: SecurityApi,
    SelfDecodingBody: SelfDecodingBody,
    ServerConfiguration: ServerConfiguration,
    ShareMetadataRequest: ShareMetadataRequest,
    SharePermissionsInput: SharePermissionsInput,
    SortOptionInput: SortOptionInput,
    SortOptions: SortOptions,
    SortingOptions: SortingOptions,
    SqlQuery: SqlQuery,
    SqlQueryResponse: SqlQueryResponse,
    SystemApi: SystemApi,
    SystemConfig: SystemConfig,
    SystemInfo: SystemInfo,
    Table: Table,
    Tag: Tag,
    TagMetadataTypeInput: TagMetadataTypeInput,
    TagsApi: TagsApi,
    ThoughtSpotRestApi: ThoughtSpotRestApi,
    Token: Token,
    URL: URL,
    URLInput: URLInput,
    URLInputMandatory: URLInputMandatory,
    UpdateConfigRequest: UpdateConfigRequest,
    UpdateConnectionRequest: UpdateConnectionRequest,
    UpdateCustomActionRequest: UpdateCustomActionRequest,
    UpdateOrgRequest: UpdateOrgRequest,
    UpdateRoleRequest: UpdateRoleRequest,
    UpdateScheduleRequest: UpdateScheduleRequest,
    UpdateSystemConfigRequest: UpdateSystemConfigRequest,
    UpdateTagRequest: UpdateTagRequest,
    UpdateUserGroupRequest: UpdateUserGroupRequest,
    UpdateUserRequest: UpdateUserRequest,
    User: User,
    UserGroup: UserGroup,
    UserGroupResponse: UserGroupResponse,
    UsersApi: UsersApi,
    ValidateMergeRequest: ValidateMergeRequest,
    VersionControlApi: VersionControlApi,
    configureAuthMethods: configureAuthMethods,
    createBearerAuthenticationConfig: createBearerAuthenticationConfig,
    createConfiguration: createConfiguration,
    server1: server1,
    servers: servers,
    wrapHttpLibrary: wrapHttpLibrary
});
