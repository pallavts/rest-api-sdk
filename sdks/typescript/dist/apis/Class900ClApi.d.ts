import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AnswerDataResponse } from '../models/AnswerDataResponse';
import { AssignChangeAuthorRequest } from '../models/AssignChangeAuthorRequest';
import { AssignTagRequest } from '../models/AssignTagRequest';
import { ChangeUserPasswordRequest } from '../models/ChangeUserPasswordRequest';
import { CreateOrgRequest } from '../models/CreateOrgRequest';
import { CreateTagRequest } from '../models/CreateTagRequest';
import { CreateUserGroupRequest } from '../models/CreateUserGroupRequest';
import { CreateUserRequest } from '../models/CreateUserRequest';
import { DeleteMetadataRequest } from '../models/DeleteMetadataRequest';
import { ExportAnswerReportRequest } from '../models/ExportAnswerReportRequest';
import { ExportLiveboardReportRequest } from '../models/ExportLiveboardReportRequest';
import { ExportMetadataTMLRequest } from '../models/ExportMetadataTMLRequest';
import { FetchAnswerDataRequest } from '../models/FetchAnswerDataRequest';
import { FetchAnswerSqlQueryRequest } from '../models/FetchAnswerSqlQueryRequest';
import { FetchLiveboardDataRequest } from '../models/FetchLiveboardDataRequest';
import { FetchLiveboardSqlQueryRequest } from '../models/FetchLiveboardSqlQueryRequest';
import { FetchLogsRequest } from '../models/FetchLogsRequest';
import { FetchPermissionsOfPrincipalsRequest } from '../models/FetchPermissionsOfPrincipalsRequest';
import { FetchPermissionsOnMetadataRequest } from '../models/FetchPermissionsOnMetadataRequest';
import { ForceLogoutUsersRequest } from '../models/ForceLogoutUsersRequest';
import { GetFullAccessTokenRequest } from '../models/GetFullAccessTokenRequest';
import { GetObjectAccessTokenRequest } from '../models/GetObjectAccessTokenRequest';
import { ImportMetadataTMLRequest } from '../models/ImportMetadataTMLRequest';
import { ImportUserGroupsRequest } from '../models/ImportUserGroupsRequest';
import { ImportUserGroupsResponse } from '../models/ImportUserGroupsResponse';
import { ImportUsersRequest } from '../models/ImportUsersRequest';
import { ImportUsersResponse } from '../models/ImportUsersResponse';
import { LiveboardDataResponse } from '../models/LiveboardDataResponse';
import { LogResponse } from '../models/LogResponse';
import { LoginRequest } from '../models/LoginRequest';
import { MetadataSearchResponse } from '../models/MetadataSearchResponse';
import { OrgResponse } from '../models/OrgResponse';
import { ResetUserPasswordRequest } from '../models/ResetUserPasswordRequest';
import { RevokeTokenRequest } from '../models/RevokeTokenRequest';
import { SearchDataRequest } from '../models/SearchDataRequest';
import { SearchDataResponse } from '../models/SearchDataResponse';
import { SearchMetadataRequest } from '../models/SearchMetadataRequest';
import { SearchOrgsRequest } from '../models/SearchOrgsRequest';
import { SearchTagsRequest } from '../models/SearchTagsRequest';
import { SearchUserGroupsRequest } from '../models/SearchUserGroupsRequest';
import { SearchUsersRequest } from '../models/SearchUsersRequest';
import { ShareMetadataRequest } from '../models/ShareMetadataRequest';
import { SqlQueryResponse } from '../models/SqlQueryResponse';
import { SystemConfig } from '../models/SystemConfig';
import { SystemInfo } from '../models/SystemInfo';
import { Tag } from '../models/Tag';
import { Token } from '../models/Token';
import { UpdateOrgRequest } from '../models/UpdateOrgRequest';
import { UpdateTagRequest } from '../models/UpdateTagRequest';
import { UpdateUserGroupRequest } from '../models/UpdateUserGroupRequest';
import { UpdateUserRequest } from '../models/UpdateUserRequest';
import { User } from '../models/User';
import { UserGroupResponse } from '../models/UserGroupResponse';
export declare class Class900ClApiRequestFactory extends BaseAPIRequestFactory {
    assignChangeAuthor(assignChangeAuthorRequest: AssignChangeAuthorRequest, _options?: Configuration): Promise<RequestContext>;
    assignTag(assignTagRequest: AssignTagRequest, _options?: Configuration): Promise<RequestContext>;
    changeUserPassword(changeUserPasswordRequest: ChangeUserPasswordRequest, _options?: Configuration): Promise<RequestContext>;
    createOrg(createOrgRequest: CreateOrgRequest, _options?: Configuration): Promise<RequestContext>;
    createTag(createTagRequest: CreateTagRequest, _options?: Configuration): Promise<RequestContext>;
    createUser(createUserRequest: CreateUserRequest, _options?: Configuration): Promise<RequestContext>;
    createUserGroup(createUserGroupRequest: CreateUserGroupRequest, _options?: Configuration): Promise<RequestContext>;
    deleteMetadata(deleteMetadataRequest: DeleteMetadataRequest, _options?: Configuration): Promise<RequestContext>;
    deleteOrg(orgIdentifier: string, _options?: Configuration): Promise<RequestContext>;
    deleteTag(tagIdentifier: string, _options?: Configuration): Promise<RequestContext>;
    deleteUser(userIdentifier: string, _options?: Configuration): Promise<RequestContext>;
    deleteUserGroup(groupIdentifier: string, _options?: Configuration): Promise<RequestContext>;
    exportAnswerReport(exportAnswerReportRequest: ExportAnswerReportRequest, _options?: Configuration): Promise<RequestContext>;
    exportLiveboardReport(exportLiveboardReportRequest: ExportLiveboardReportRequest, _options?: Configuration): Promise<RequestContext>;
    exportMetadataTML(exportMetadataTMLRequest: ExportMetadataTMLRequest, _options?: Configuration): Promise<RequestContext>;
    fetchAnswerData(fetchAnswerDataRequest: FetchAnswerDataRequest, _options?: Configuration): Promise<RequestContext>;
    fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest: FetchAnswerSqlQueryRequest, _options?: Configuration): Promise<RequestContext>;
    fetchLiveboardData(fetchLiveboardDataRequest: FetchLiveboardDataRequest, _options?: Configuration): Promise<RequestContext>;
    fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest: FetchLiveboardSqlQueryRequest, _options?: Configuration): Promise<RequestContext>;
    fetchLogs(fetchLogsRequest: FetchLogsRequest, _options?: Configuration): Promise<RequestContext>;
    fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest: FetchPermissionsOfPrincipalsRequest, _options?: Configuration): Promise<RequestContext>;
    fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest: FetchPermissionsOnMetadataRequest, _options?: Configuration): Promise<RequestContext>;
    forceLogoutUsers(forceLogoutUsersRequest?: ForceLogoutUsersRequest, _options?: Configuration): Promise<RequestContext>;
    getCurrentUserInfo(_options?: Configuration): Promise<RequestContext>;
    getFullAccessToken(getFullAccessTokenRequest: GetFullAccessTokenRequest, _options?: Configuration): Promise<RequestContext>;
    getObjectAccessToken(getObjectAccessTokenRequest: GetObjectAccessTokenRequest, _options?: Configuration): Promise<RequestContext>;
    getSystemConfig(_options?: Configuration): Promise<RequestContext>;
    getSystemInformation(_options?: Configuration): Promise<RequestContext>;
    importMetadataTML(importMetadataTMLRequest: ImportMetadataTMLRequest, _options?: Configuration): Promise<RequestContext>;
    importUserGroups(importUserGroupsRequest?: ImportUserGroupsRequest, _options?: Configuration): Promise<RequestContext>;
    importUsers(importUsersRequest: ImportUsersRequest, _options?: Configuration): Promise<RequestContext>;
    login(loginRequest?: LoginRequest, _options?: Configuration): Promise<RequestContext>;
    logout(_options?: Configuration): Promise<RequestContext>;
    resetUserPassword(resetUserPasswordRequest: ResetUserPasswordRequest, _options?: Configuration): Promise<RequestContext>;
    revokeToken(revokeTokenRequest?: RevokeTokenRequest, _options?: Configuration): Promise<RequestContext>;
    searchData(searchDataRequest: SearchDataRequest, _options?: Configuration): Promise<RequestContext>;
    searchMetadata(searchMetadataRequest?: SearchMetadataRequest, _options?: Configuration): Promise<RequestContext>;
    searchOrgs(searchOrgsRequest?: SearchOrgsRequest, _options?: Configuration): Promise<RequestContext>;
    searchTags(searchTagsRequest?: SearchTagsRequest, _options?: Configuration): Promise<RequestContext>;
    searchUserGroups(searchUserGroupsRequest?: SearchUserGroupsRequest, _options?: Configuration): Promise<RequestContext>;
    searchUsers(searchUsersRequest?: SearchUsersRequest, _options?: Configuration): Promise<RequestContext>;
    shareMetadata(shareMetadataRequest: ShareMetadataRequest, _options?: Configuration): Promise<RequestContext>;
    unassignTag(assignTagRequest: AssignTagRequest, _options?: Configuration): Promise<RequestContext>;
    updateOrg(orgIdentifier: string, updateOrgRequest?: UpdateOrgRequest, _options?: Configuration): Promise<RequestContext>;
    updateTag(tagIdentifier: string, updateTagRequest?: UpdateTagRequest, _options?: Configuration): Promise<RequestContext>;
    updateUser(userIdentifier: string, updateUserRequest?: UpdateUserRequest, _options?: Configuration): Promise<RequestContext>;
    updateUserGroup(groupIdentifier: string, updateUserGroupRequest?: UpdateUserGroupRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class Class900ClApiResponseProcessor {
    assignChangeAuthor(response: ResponseContext): Promise<void>;
    assignTag(response: ResponseContext): Promise<void>;
    changeUserPassword(response: ResponseContext): Promise<void>;
    createOrg(response: ResponseContext): Promise<OrgResponse>;
    createTag(response: ResponseContext): Promise<Tag>;
    createUser(response: ResponseContext): Promise<User>;
    createUserGroup(response: ResponseContext): Promise<UserGroupResponse>;
    deleteMetadata(response: ResponseContext): Promise<void>;
    deleteOrg(response: ResponseContext): Promise<void>;
    deleteTag(response: ResponseContext): Promise<void>;
    deleteUser(response: ResponseContext): Promise<void>;
    deleteUserGroup(response: ResponseContext): Promise<void>;
    exportAnswerReport(response: ResponseContext): Promise<any>;
    exportLiveboardReport(response: ResponseContext): Promise<any>;
    exportMetadataTML(response: ResponseContext): Promise<Array<any>>;
    fetchAnswerData(response: ResponseContext): Promise<AnswerDataResponse>;
    fetchAnswerSqlQuery(response: ResponseContext): Promise<SqlQueryResponse>;
    fetchLiveboardData(response: ResponseContext): Promise<LiveboardDataResponse>;
    fetchLiveboardSqlQuery(response: ResponseContext): Promise<SqlQueryResponse>;
    fetchLogs(response: ResponseContext): Promise<Array<LogResponse>>;
    fetchPermissionsOfPrincipals(response: ResponseContext): Promise<any>;
    fetchPermissionsOnMetadata(response: ResponseContext): Promise<any>;
    forceLogoutUsers(response: ResponseContext): Promise<void>;
    getCurrentUserInfo(response: ResponseContext): Promise<User>;
    getFullAccessToken(response: ResponseContext): Promise<Token>;
    getObjectAccessToken(response: ResponseContext): Promise<Token>;
    getSystemConfig(response: ResponseContext): Promise<SystemConfig>;
    getSystemInformation(response: ResponseContext): Promise<SystemInfo>;
    importMetadataTML(response: ResponseContext): Promise<Array<any>>;
    importUserGroups(response: ResponseContext): Promise<ImportUserGroupsResponse>;
    importUsers(response: ResponseContext): Promise<ImportUsersResponse>;
    login(response: ResponseContext): Promise<void>;
    logout(response: ResponseContext): Promise<void>;
    resetUserPassword(response: ResponseContext): Promise<void>;
    revokeToken(response: ResponseContext): Promise<void>;
    searchData(response: ResponseContext): Promise<SearchDataResponse>;
    searchMetadata(response: ResponseContext): Promise<Array<MetadataSearchResponse>>;
    searchOrgs(response: ResponseContext): Promise<Array<OrgResponse>>;
    searchTags(response: ResponseContext): Promise<Array<Tag>>;
    searchUserGroups(response: ResponseContext): Promise<Array<UserGroupResponse>>;
    searchUsers(response: ResponseContext): Promise<Array<User>>;
    shareMetadata(response: ResponseContext): Promise<void>;
    unassignTag(response: ResponseContext): Promise<void>;
    updateOrg(response: ResponseContext): Promise<void>;
    updateTag(response: ResponseContext): Promise<void>;
    updateUser(response: ResponseContext): Promise<void>;
    updateUserGroup(response: ResponseContext): Promise<void>;
}
