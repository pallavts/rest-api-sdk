/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class FetchLiveboardDataRequest {
    /**
    * GUID or name of the Liveboard.
    */
    'metadataIdentifier': string;
    /**
    * GUIDs or names of the visualizations on the Liveboard.
    */
    'visualizationIdentifiers'?: Array<string>;
    /**
    * Transient content of the Liveboard.
    */
    'transientContent'?: string;
    /**
    * JSON output format. By default, the API returns full data in the JSON.
    */
    'dataFormat'?: FetchLiveboardDataRequest.DataFormatEnum = FetchLiveboardDataRequest.DataFormatEnum.Compact;
    /**
    * The starting record number from where the records should be included.
    */
    'recordOffset'?: number = 0;
    /**
    * The number of records to include in a batch.
    */
    'recordSize'?: number = 10;
    /**
    * JSON object representing filter condition to filter the data.
    */
    'runtimeFilter'?: object;
    /**
    * JSON object representing columns to sort the data.
    */
    'runtimeSort'?: object;
    /**
    * JSON object for setting values of parameters in runtime.
    */
    'runtimeParamOverride'?: object;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "metadataIdentifier",
            "baseName": "metadata_identifier",
            "type": "string"
        },
        {
            "name": "visualizationIdentifiers",
            "baseName": "visualization_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "transientContent",
            "baseName": "transient_content",
            "type": "string"
        },
        {
            "name": "dataFormat",
            "baseName": "data_format",
            "type": "FetchLiveboardDataRequest.DataFormatEnum"
        },
        {
            "name": "recordOffset",
            "baseName": "record_offset",
            "type": "number"
        },
        {
            "name": "recordSize",
            "baseName": "record_size",
            "type": "number"
        },
        {
            "name": "runtimeFilter",
            "baseName": "runtime_filter",
            "type": "object"
        },
        {
            "name": "runtimeSort",
            "baseName": "runtime_sort",
            "type": "object"
        },
        {
            "name": "runtimeParamOverride",
            "baseName": "runtime_param_override",
            "type": "object"
        }    ];

    static getAttributeTypeMap() {
        return FetchLiveboardDataRequest.attributeTypeMap;
    }
}

export namespace FetchLiveboardDataRequest {
    export enum DataFormatEnum {
        Compact = <any> 'COMPACT'
    }
}
