/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Role } from './role';
import { UserGroup } from './userGroup';

export class UserGroupResponse {
    /**
    * The unique identifier of the object
    */
    'authorId'?: string;
    /**
    * Indicates whether the response has complete detail of the user group.
    */
    'completeDetail'?: boolean;
    /**
    * Content details of the user group.
    */
    'content'?: object;
    /**
    * Creation time of the user group in milliseconds.
    */
    'creationTimeInMillis'?: number;
    /**
    * Liveboards which are assigned as default liveboards to the user group.
    */
    'defaultLiveboards'?: Array<UserGroup>;
    /**
    * Indicates whether the user group is deleted.
    */
    'deleted'?: boolean;
    /**
    * Indicates whether the user group is deprecated.
    */
    'deprecated'?: boolean;
    /**
    * Description of the user group.
    */
    'description'?: string;
    /**
    * Display name of the user group.
    */
    'displayName': string;
    /**
    * Indicates whether the user group is external.
    */
    'external'?: boolean;
    /**
    * Generation number of the user group.
    */
    'generationNumber'?: number;
    /**
    * Indicates whether the user group is hidden.
    */
    'hidden'?: boolean;
    /**
    * The unique identifier of the object
    */
    'id': string;
    /**
    * Index number of the user group.
    */
    'index'?: number;
    /**
    * Index version number of the user group.
    */
    'indexVersion'?: number;
    /**
    * Metadata version number of the user group.
    */
    'metadataVersion'?: number;
    /**
    * Last modified time of the user group in milliseconds.
    */
    'modificationTimeInMillis'?: number;
    /**
    * The unique identifier of the object
    */
    'modifierId'?: string;
    /**
    * Name of the user group.
    */
    'name': string;
    /**
    * Orgs in which user group exists.
    */
    'orgs'?: Array<UserGroup>;
    /**
    * The unique identifier of the object
    */
    'ownerId'?: string;
    /**
    * Parent type of the user group.
    */
    'parentType'?: UserGroupResponse.ParentTypeEnum;
    /**
    * Privileges which are assigned to the user group.
    */
    'privileges'?: Array<string>;
    /**
    * User Groups who are part of the user group.
    */
    'subGroups'?: Array<UserGroup>;
    /**
    * Indicates whether the user group is a system group.
    */
    'systemGroup'?: boolean;
    /**
    * Tags associated with the user group.
    */
    'tags'?: Array<UserGroup>;
    /**
    * Type of the user group.
    */
    'type'?: UserGroupResponse.TypeEnum;
    /**
    * Users who are part of the user group.
    */
    'users'?: Array<UserGroup>;
    /**
    * Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects.
    */
    'visibility': UserGroupResponse.VisibilityEnum;
    /**
    * List of roles assgined to the user
    */
    'roles'?: Array<Role>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authorId",
            "baseName": "author_id",
            "type": "string"
        },
        {
            "name": "completeDetail",
            "baseName": "complete_detail",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "object"
        },
        {
            "name": "creationTimeInMillis",
            "baseName": "creation_time_in_millis",
            "type": "number"
        },
        {
            "name": "defaultLiveboards",
            "baseName": "default_liveboards",
            "type": "Array<UserGroup>"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "deprecated",
            "baseName": "deprecated",
            "type": "boolean"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "external",
            "baseName": "external",
            "type": "boolean"
        },
        {
            "name": "generationNumber",
            "baseName": "generation_number",
            "type": "number"
        },
        {
            "name": "hidden",
            "baseName": "hidden",
            "type": "boolean"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "index",
            "baseName": "index",
            "type": "number"
        },
        {
            "name": "indexVersion",
            "baseName": "index_version",
            "type": "number"
        },
        {
            "name": "metadataVersion",
            "baseName": "metadata_version",
            "type": "number"
        },
        {
            "name": "modificationTimeInMillis",
            "baseName": "modification_time_in_millis",
            "type": "number"
        },
        {
            "name": "modifierId",
            "baseName": "modifier_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "orgs",
            "baseName": "orgs",
            "type": "Array<UserGroup>"
        },
        {
            "name": "ownerId",
            "baseName": "owner_id",
            "type": "string"
        },
        {
            "name": "parentType",
            "baseName": "parent_type",
            "type": "UserGroupResponse.ParentTypeEnum"
        },
        {
            "name": "privileges",
            "baseName": "privileges",
            "type": "Array<string>"
        },
        {
            "name": "subGroups",
            "baseName": "sub_groups",
            "type": "Array<UserGroup>"
        },
        {
            "name": "systemGroup",
            "baseName": "system_group",
            "type": "boolean"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<UserGroup>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "UserGroupResponse.TypeEnum"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<UserGroup>"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "UserGroupResponse.VisibilityEnum"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<Role>"
        }    ];

    static getAttributeTypeMap() {
        return UserGroupResponse.attributeTypeMap;
    }
}

export namespace UserGroupResponse {
    export enum ParentTypeEnum {
        User = <any> 'USER',
        Group = <any> 'GROUP'
    }
    export enum TypeEnum {
        LocalGroup = <any> 'LOCAL_GROUP',
        LdapGroup = <any> 'LDAP_GROUP'
    }
    export enum VisibilityEnum {
        Sharable = <any> 'SHARABLE',
        NonSharable = <any> 'NON_SHARABLE'
    }
}
