/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FavoriteMetadataItem } from './favoriteMetadataItem';
import { ObjectIDAndName } from './objectIDAndName';
import { Org } from './org';

export class User {
    /**
    * Unique identifier of the user.
    */
    'id': string;
    /**
    * Name of the user.
    */
    'name': string;
    /**
    * Display name of the user.
    */
    'displayName': string;
    /**
    * Visibility of the users. The SHARABLE makes a users visible to other users and user groups, and thus allows them to share objects.
    */
    'visibility': User.VisibilityEnum;
    /**
    * Unique identifier of author of the user.
    */
    'authorId'?: string;
    /**
    * Indicates whether the user can change their password.
    */
    'canChangePassword'?: boolean;
    /**
    * Indicates whether the response has complete detail of the user.
    */
    'completeDetail'?: boolean;
    /**
    * Creation time of the user in milliseconds.
    */
    'creationTimeInMillis'?: number;
    'currentOrg'?: Org;
    /**
    * Indicates whether the user is deleted.
    */
    'deleted'?: boolean;
    /**
    * Indicates whether the user is deprecated.
    */
    'deprecated'?: boolean;
    /**
    * Type of the user account.
    */
    'accountType'?: User.AccountTypeEnum;
    /**
    * Status of the user account.
    */
    'accountStatus'?: User.AccountStatusEnum;
    /**
    * Email of the user.
    */
    'email'?: string;
    /**
    * Expiration time of the user in milliseconds.
    */
    'expirationTimeInMillis'?: number;
    /**
    * Indicates whether the user is external.
    */
    'external'?: boolean;
    /**
    * Metadata objects to be assigned as favorites for the imported user.
    */
    'favoriteMetadata'?: Array<FavoriteMetadataItem>;
    /**
    * First login time of the user in milliseconds.
    */
    'firstLoginTimeInMillis'?: number;
    /**
    * Group mask of the user.
    */
    'groupMask'?: number;
    /**
    * Indicates whether the user is hidden.
    */
    'hidden'?: boolean;
    'homeLiveboard'?: ObjectIDAndName;
    /**
    * Incomplete details of user if any present.
    */
    'incompleteDetails'?: object;
    /**
    * Indicates whether it is first login of the user.
    */
    'isFirstLogin'?: boolean;
    /**
    * Last modified time of the user in milliseconds.
    */
    'modificationTimeInMillis'?: number;
    /**
    * Unique identifier of modifier of the user.
    */
    'modifierId'?: string;
    /**
    * User preference for receiving email notifications on shared answers or liveboard.
    */
    'notifyOnShare'?: boolean;
    /**
    * The user preference for turning off the onboarding experience.
    */
    'onboardingExperienceCompleted'?: boolean;
    /**
    * Organizations in which user exists.
    */
    'orgs'?: Array<Org>;
    /**
    * Unique identifier of owner of the user.
    */
    'ownerId'?: string;
    /**
    * Parent type of the user.
    */
    'parentType'?: User.ParentTypeEnum;
    /**
    * Privileges which are assigned to the user.
    */
    'privileges'?: Array<string>;
    /**
    * The user preference for revisiting the onboarding experience.
    */
    'showOnboardingExperience'?: boolean;
    /**
    * Indicates whether the user is a super user.
    */
    'superUser'?: boolean;
    /**
    * Indicates whether the user is a system user.
    */
    'systemUser'?: boolean;
    /**
    * Tags associated with the user.
    */
    'tags'?: Array<ObjectIDAndName>;
    /**
    * Unique identifier of tenant of the user.
    */
    'tenantId'?: string;
    /**
    * User Groups which the user is part of.
    */
    'userGroups'?: Array<ObjectIDAndName>;
    /**
    * Inherited User Groups which the user is part of.
    */
    'userInheritedGroups'?: Array<ObjectIDAndName>;
    /**
    * Indicates whether welcome email is sent for the user.
    */
    'welcomeEmailSent'?: boolean;
    /**
    * Privileges which are assigned to the user with org.
    */
    'orgPrivileges'?: object;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "User.VisibilityEnum"
        },
        {
            "name": "authorId",
            "baseName": "author_id",
            "type": "string"
        },
        {
            "name": "canChangePassword",
            "baseName": "can_change_password",
            "type": "boolean"
        },
        {
            "name": "completeDetail",
            "baseName": "complete_detail",
            "type": "boolean"
        },
        {
            "name": "creationTimeInMillis",
            "baseName": "creation_time_in_millis",
            "type": "number"
        },
        {
            "name": "currentOrg",
            "baseName": "current_org",
            "type": "Org"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "deprecated",
            "baseName": "deprecated",
            "type": "boolean"
        },
        {
            "name": "accountType",
            "baseName": "account_type",
            "type": "User.AccountTypeEnum"
        },
        {
            "name": "accountStatus",
            "baseName": "account_status",
            "type": "User.AccountStatusEnum"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "expirationTimeInMillis",
            "baseName": "expiration_time_in_millis",
            "type": "number"
        },
        {
            "name": "external",
            "baseName": "external",
            "type": "boolean"
        },
        {
            "name": "favoriteMetadata",
            "baseName": "favorite_metadata",
            "type": "Array<FavoriteMetadataItem>"
        },
        {
            "name": "firstLoginTimeInMillis",
            "baseName": "first_login_time_in_millis",
            "type": "number"
        },
        {
            "name": "groupMask",
            "baseName": "group_mask",
            "type": "number"
        },
        {
            "name": "hidden",
            "baseName": "hidden",
            "type": "boolean"
        },
        {
            "name": "homeLiveboard",
            "baseName": "home_liveboard",
            "type": "ObjectIDAndName"
        },
        {
            "name": "incompleteDetails",
            "baseName": "incomplete_details",
            "type": "object"
        },
        {
            "name": "isFirstLogin",
            "baseName": "is_first_login",
            "type": "boolean"
        },
        {
            "name": "modificationTimeInMillis",
            "baseName": "modification_time_in_millis",
            "type": "number"
        },
        {
            "name": "modifierId",
            "baseName": "modifier_id",
            "type": "string"
        },
        {
            "name": "notifyOnShare",
            "baseName": "notify_on_share",
            "type": "boolean"
        },
        {
            "name": "onboardingExperienceCompleted",
            "baseName": "onboarding_experience_completed",
            "type": "boolean"
        },
        {
            "name": "orgs",
            "baseName": "orgs",
            "type": "Array<Org>"
        },
        {
            "name": "ownerId",
            "baseName": "owner_id",
            "type": "string"
        },
        {
            "name": "parentType",
            "baseName": "parent_type",
            "type": "User.ParentTypeEnum"
        },
        {
            "name": "privileges",
            "baseName": "privileges",
            "type": "Array<string>"
        },
        {
            "name": "showOnboardingExperience",
            "baseName": "show_onboarding_experience",
            "type": "boolean"
        },
        {
            "name": "superUser",
            "baseName": "super_user",
            "type": "boolean"
        },
        {
            "name": "systemUser",
            "baseName": "system_user",
            "type": "boolean"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<ObjectIDAndName>"
        },
        {
            "name": "tenantId",
            "baseName": "tenant_id",
            "type": "string"
        },
        {
            "name": "userGroups",
            "baseName": "user_groups",
            "type": "Array<ObjectIDAndName>"
        },
        {
            "name": "userInheritedGroups",
            "baseName": "user_inherited_groups",
            "type": "Array<ObjectIDAndName>"
        },
        {
            "name": "welcomeEmailSent",
            "baseName": "welcome_email_sent",
            "type": "boolean"
        },
        {
            "name": "orgPrivileges",
            "baseName": "org_privileges",
            "type": "object"
        }    ];

    static getAttributeTypeMap() {
        return User.attributeTypeMap;
    }
}

export namespace User {
    export enum VisibilityEnum {
        Sharable = <any> 'SHARABLE',
        NonSharable = <any> 'NON_SHARABLE'
    }
    export enum AccountTypeEnum {
        LocalUser = <any> 'LOCAL_USER',
        LdapUser = <any> 'LDAP_USER',
        SamlUser = <any> 'SAML_USER',
        OidcUser = <any> 'OIDC_USER',
        RemoteUser = <any> 'REMOTE_USER'
    }
    export enum AccountStatusEnum {
        Active = <any> 'ACTIVE',
        Inactive = <any> 'INACTIVE',
        Expired = <any> 'EXPIRED',
        Locked = <any> 'LOCKED',
        Pending = <any> 'PENDING'
    }
    export enum ParentTypeEnum {
        User = <any> 'USER',
        Group = <any> 'GROUP'
    }
}
