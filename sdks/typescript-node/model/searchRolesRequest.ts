/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class SearchRolesRequest {
    /**
    * unique ID or name of the Roles
    */
    'roleIdentifiers'?: Array<string>;
    /**
    * Unique Id or name of the Organisation
    */
    'orgIdentifiers'?: Array<string>;
    /**
    * Unique Id or name of the User Group
    */
    'groupIdentifiers'?: Array<string>;
    /**
    * Privileges assigned to the Role.
    */
    'privileges'?: Array<SearchRolesRequest.PrivilegesEnum>;
    /**
    * Indicates whether the role is deprecated.
    */
    'deprecated'?: boolean | null;
    /**
    * Indicates whether the Role is external
    */
    'external'?: boolean | null;
    /**
    * Indicates whether the role is shared via connection
    */
    'sharedViaConnection'?: boolean | null;
    /**
    * Permission details of the Role
    */
    'permissions'?: Array<SearchRolesRequest.PermissionsEnum>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "roleIdentifiers",
            "baseName": "role_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "orgIdentifiers",
            "baseName": "org_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "groupIdentifiers",
            "baseName": "group_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "privileges",
            "baseName": "privileges",
            "type": "Array<SearchRolesRequest.PrivilegesEnum>"
        },
        {
            "name": "deprecated",
            "baseName": "deprecated",
            "type": "boolean"
        },
        {
            "name": "external",
            "baseName": "external",
            "type": "boolean"
        },
        {
            "name": "sharedViaConnection",
            "baseName": "shared_via_connection",
            "type": "boolean"
        },
        {
            "name": "permissions",
            "baseName": "permissions",
            "type": "Array<SearchRolesRequest.PermissionsEnum>"
        }    ];

    static getAttributeTypeMap() {
        return SearchRolesRequest.attributeTypeMap;
    }
}

export namespace SearchRolesRequest {
    export enum PrivilegesEnum {
        Unknown = <any> 'UNKNOWN',
        Administration = <any> 'ADMINISTRATION',
        Authoring = <any> 'AUTHORING',
        Userdatauploading = <any> 'USERDATAUPLOADING',
        Datadownloading = <any> 'DATADOWNLOADING',
        Usermanagement = <any> 'USERMANAGEMENT',
        Securitymanagement = <any> 'SECURITYMANAGEMENT',
        Logicalmodeling = <any> 'LOGICALMODELING',
        Datamanagement = <any> 'DATAMANAGEMENT',
        Tagmanagement = <any> 'TAGMANAGEMENT',
        Sharewithall = <any> 'SHAREWITHALL',
        Systemmanagement = <any> 'SYSTEMMANAGEMENT',
        Jobscheduling = <any> 'JOBSCHEDULING',
        A3Analysis = <any> 'A3ANALYSIS',
        Experimentalfeatureprivilege = <any> 'EXPERIMENTALFEATUREPRIVILEGE',
        Bypassrls = <any> 'BYPASSRLS',
        Ranalysis = <any> 'RANALYSIS',
        DisablePinboardCreation = <any> 'DISABLE_PINBOARD_CREATION',
        Developer = <any> 'DEVELOPER',
        ApplicationAdministration = <any> 'APPLICATION_ADMINISTRATION',
        UserAdministration = <any> 'USER_ADMINISTRATION',
        GroupAdministration = <any> 'GROUP_ADMINISTRATION',
        BackupAdministration = <any> 'BACKUP_ADMINISTRATION',
        SystemInfoAdministration = <any> 'SYSTEM_INFO_ADMINISTRATION',
        Enablespotappcreation = <any> 'ENABLESPOTAPPCREATION',
        Syncmanagement = <any> 'SYNCMANAGEMENT',
        OrgAdministration = <any> 'ORG_ADMINISTRATION',
        RoleAdministration = <any> 'ROLE_ADMINISTRATION',
        AuthenticationAdministration = <any> 'AUTHENTICATION_ADMINISTRATION',
        BillingInfoAdministration = <any> 'BILLING_INFO_ADMINISTRATION',
        PreviewThoughtspotSage = <any> 'PREVIEW_THOUGHTSPOT_SAGE'
    }
    export enum PermissionsEnum {
        ReadOnly = <any> 'READ_ONLY',
        Modify = <any> 'MODIFY',
        NoAccess = <any> 'NO_ACCESS'
    }
}
