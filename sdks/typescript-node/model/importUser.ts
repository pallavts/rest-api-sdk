/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FavoriteMetadataInput } from './favoriteMetadataInput';

export class ImportUser {
    /**
    * Unique ID or name of the user.
    */
    'userIdentifier': string;
    /**
    * Unique display name of the user.
    */
    'displayName': string;
    /**
    * Password of the user.
    */
    'password'?: string;
    /**
    * Type of the user account.
    */
    'accountType'?: ImportUser.AccountTypeEnum;
    /**
    * Status of the user account.
    */
    'accountStatus'?: ImportUser.AccountStatusEnum;
    /**
    * Email of the user.
    */
    'email'?: string;
    /**
    * Unique ID or name of the Orgs for the users.
    */
    'orgIdentifiers'?: Array<string>;
    /**
    * Unique ID or name of the User Groups of the users.
    */
    'groupIdentifiers'?: Array<string>;
    /**
    * Visibility of the users. The SHARABLE makes a users visible to other users and user groups, and thus allows them to share objects.
    */
    'visibility'?: ImportUser.VisibilityEnum;
    /**
    * User preference for receiving email notifications on shared answers or liveboard.
    */
    'notifyOnShare'?: boolean;
    /**
    * The user preference for revisiting the onboarding experience.
    */
    'showOnboardingExperience'?: boolean;
    /**
    * The user preference for turning off the onboarding experience.
    */
    'onboardingExperienceCompleted'?: boolean;
    /**
    * Unique ID or name of the users home liveboard.
    */
    'homeLiveboardIdentifier'?: string;
    /**
    * Metadata objects to be assigned as favorites for the imported user.
    */
    'favoriteMetadata'?: Array<FavoriteMetadataInput>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "userIdentifier",
            "baseName": "user_identifier",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "accountType",
            "baseName": "account_type",
            "type": "ImportUser.AccountTypeEnum"
        },
        {
            "name": "accountStatus",
            "baseName": "account_status",
            "type": "ImportUser.AccountStatusEnum"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "orgIdentifiers",
            "baseName": "org_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "groupIdentifiers",
            "baseName": "group_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "ImportUser.VisibilityEnum"
        },
        {
            "name": "notifyOnShare",
            "baseName": "notify_on_share",
            "type": "boolean"
        },
        {
            "name": "showOnboardingExperience",
            "baseName": "show_onboarding_experience",
            "type": "boolean"
        },
        {
            "name": "onboardingExperienceCompleted",
            "baseName": "onboarding_experience_completed",
            "type": "boolean"
        },
        {
            "name": "homeLiveboardIdentifier",
            "baseName": "home_liveboard_identifier",
            "type": "string"
        },
        {
            "name": "favoriteMetadata",
            "baseName": "favorite_metadata",
            "type": "Array<FavoriteMetadataInput>"
        }    ];

    static getAttributeTypeMap() {
        return ImportUser.attributeTypeMap;
    }
}

export namespace ImportUser {
    export enum AccountTypeEnum {
        LocalUser = <any> 'LOCAL_USER',
        LdapUser = <any> 'LDAP_USER',
        SamlUser = <any> 'SAML_USER',
        OidcUser = <any> 'OIDC_USER',
        RemoteUser = <any> 'REMOTE_USER'
    }
    export enum AccountStatusEnum {
        Active = <any> 'ACTIVE',
        Inactive = <any> 'INACTIVE',
        Expired = <any> 'EXPIRED',
        Locked = <any> 'LOCKED',
        Pending = <any> 'PENDING'
    }
    export enum VisibilityEnum {
        Sharable = <any> 'SHARABLE',
        NonSharable = <any> 'NON_SHARABLE'
    }
}
