/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ConnectionInput } from './connectionInput';
import { SortOptionInput } from './sortOptionInput';

export class SearchConnectionRequest {
    /**
    * List of connections and name pattern
    */
    'connections'?: Array<ConnectionInput>;
    /**
    * Array of types of data warehouse defined for the connection.
    */
    'dataWarehouseTypes'?: Array<SearchConnectionRequest.DataWarehouseTypesEnum>;
    /**
    * The starting record number from where the records should be included.
    */
    'recordOffset'?: number = 0;
    /**
    * The number of records that should be included.
    */
    'recordSize'?: number = 10;
    /**
    * Unique ID or name of tags.
    */
    'tagIdentifiers'?: Array<string>;
    /**
    * Data warehouse object type.
    */
    'dataWarehouseObjectType'?: SearchConnectionRequest.DataWarehouseObjectTypeEnum;
    'sortOptions'?: SortOptionInput;
    /**
    * Indicates whether to include complete details of the connection objects.
    */
    'includeDetails'?: boolean | null;
    /**
    * Configuration values. If empty we are fetching configuration from datasource based on given connection id. If required you can provide config details to fetch specific details. Example input: {}, {\"warehouse\":\"SMALL_WH\",\"database\":\"DEVELOPMENT\"}. This is only applicable when data_warehouse_object_type is selected.
    */
    'configuration'?: object;
    /**
    * List of authentication types to fetch data_ware_house_objects from external Data warehouse. This is only applicable when data_warehouse_object_type is selected.
    */
    'authenticationType'?: SearchConnectionRequest.AuthenticationTypeEnum = SearchConnectionRequest.AuthenticationTypeEnum.ServiceAccount;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "connections",
            "baseName": "connections",
            "type": "Array<ConnectionInput>"
        },
        {
            "name": "dataWarehouseTypes",
            "baseName": "data_warehouse_types",
            "type": "Array<SearchConnectionRequest.DataWarehouseTypesEnum>"
        },
        {
            "name": "recordOffset",
            "baseName": "record_offset",
            "type": "number"
        },
        {
            "name": "recordSize",
            "baseName": "record_size",
            "type": "number"
        },
        {
            "name": "tagIdentifiers",
            "baseName": "tag_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "dataWarehouseObjectType",
            "baseName": "data_warehouse_object_type",
            "type": "SearchConnectionRequest.DataWarehouseObjectTypeEnum"
        },
        {
            "name": "sortOptions",
            "baseName": "sort_options",
            "type": "SortOptionInput"
        },
        {
            "name": "includeDetails",
            "baseName": "include_details",
            "type": "boolean"
        },
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "object"
        },
        {
            "name": "authenticationType",
            "baseName": "authentication_type",
            "type": "SearchConnectionRequest.AuthenticationTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return SearchConnectionRequest.attributeTypeMap;
    }
}

export namespace SearchConnectionRequest {
    export enum DataWarehouseTypesEnum {
        Snowflake = <any> 'SNOWFLAKE',
        AmazonRedshift = <any> 'AMAZON_REDSHIFT',
        GoogleBigquery = <any> 'GOOGLE_BIGQUERY',
        AzureSynapse = <any> 'AZURE_SYNAPSE',
        Teradata = <any> 'TERADATA',
        SapHana = <any> 'SAP_HANA',
        Starburst = <any> 'STARBURST',
        OracleAdw = <any> 'ORACLE_ADW',
        Databricks = <any> 'DATABRICKS',
        Denodo = <any> 'DENODO',
        Dremio = <any> 'DREMIO',
        Trino = <any> 'TRINO',
        Presto = <any> 'PRESTO'
    }
    export enum DataWarehouseObjectTypeEnum {
        Database = <any> 'DATABASE',
        Schema = <any> 'SCHEMA',
        Table = <any> 'TABLE',
        Column = <any> 'COLUMN'
    }
    export enum AuthenticationTypeEnum {
        ServiceAccount = <any> 'SERVICE_ACCOUNT',
        Oauth = <any> 'OAUTH',
        Iam = <any> 'IAM',
        Extoauth = <any> 'EXTOAUTH'
    }
}
