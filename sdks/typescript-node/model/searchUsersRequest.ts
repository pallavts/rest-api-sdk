/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FavoriteMetadataInput } from './favoriteMetadataInput';
import { SortOptions } from './sortOptions';

export class SearchUsersRequest {
    /**
    * GUID / name of the user to search
    */
    'userIdentifier'?: string;
    /**
    * A unique display name string for the user account, usually their first and last name
    */
    'displayName'?: string;
    /**
    * Visibility of the user.
    */
    'visibility'?: SearchUsersRequest.VisibilityEnum;
    /**
    * Email of the user account
    */
    'email'?: string;
    /**
    * GUID or name of the group to which the user belongs.
    */
    'groupIdentifiers'?: Array<string>;
    /**
    * Privileges assigned to the user.
    */
    'privileges'?: Array<SearchUsersRequest.PrivilegesEnum>;
    /**
    * Type of the account.
    */
    'accountType'?: SearchUsersRequest.AccountTypeEnum;
    /**
    * Current status of the user account.
    */
    'accountStatus'?: SearchUsersRequest.AccountStatusEnum;
    /**
    * User preference for receiving email notifications when another ThoughtSpot user shares a metadata object such as Answer, Liveboard, or Worksheet.
    */
    'notifyOnShare'?: boolean | null;
    /**
    * The user preference for revisiting the onboarding experience.
    */
    'showOnboardingExperience'?: boolean | null;
    /**
    * Indicates if the user has completed the onboarding walkthrough.
    */
    'onboardingExperienceCompleted'?: boolean | null;
    /**
    * IDs or names of the Orgs to which the user belongs
    */
    'orgIdentifiers'?: Array<string>;
    /**
    * Unique ID or name of the users home liveboard.
    */
    'homeLiveboardIdentifier'?: string;
    /**
    * Metadata objects which are assigned as favorites of the user.
    */
    'favoriteMetadata'?: Array<FavoriteMetadataInput>;
    /**
    * The starting record number from where the records should be included.
    */
    'recordOffset'?: number = 0;
    /**
    * The number of records that should be included.
    */
    'recordSize'?: number = 10;
    'sortOptions'?: SortOptions;
    /**
    * Filter with list of role assigned to the user.
    */
    'roleIdentifiers'?: Array<string>;
    /**
    * Indicates if the user\'s favorite objects should be displayed.
    */
    'includeFavoriteMetadata'?: boolean | null = false;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "userIdentifier",
            "baseName": "user_identifier",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "SearchUsersRequest.VisibilityEnum"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "groupIdentifiers",
            "baseName": "group_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "privileges",
            "baseName": "privileges",
            "type": "Array<SearchUsersRequest.PrivilegesEnum>"
        },
        {
            "name": "accountType",
            "baseName": "account_type",
            "type": "SearchUsersRequest.AccountTypeEnum"
        },
        {
            "name": "accountStatus",
            "baseName": "account_status",
            "type": "SearchUsersRequest.AccountStatusEnum"
        },
        {
            "name": "notifyOnShare",
            "baseName": "notify_on_share",
            "type": "boolean"
        },
        {
            "name": "showOnboardingExperience",
            "baseName": "show_onboarding_experience",
            "type": "boolean"
        },
        {
            "name": "onboardingExperienceCompleted",
            "baseName": "onboarding_experience_completed",
            "type": "boolean"
        },
        {
            "name": "orgIdentifiers",
            "baseName": "org_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "homeLiveboardIdentifier",
            "baseName": "home_liveboard_identifier",
            "type": "string"
        },
        {
            "name": "favoriteMetadata",
            "baseName": "favorite_metadata",
            "type": "Array<FavoriteMetadataInput>"
        },
        {
            "name": "recordOffset",
            "baseName": "record_offset",
            "type": "number"
        },
        {
            "name": "recordSize",
            "baseName": "record_size",
            "type": "number"
        },
        {
            "name": "sortOptions",
            "baseName": "sort_options",
            "type": "SortOptions"
        },
        {
            "name": "roleIdentifiers",
            "baseName": "role_identifiers",
            "type": "Array<string>"
        },
        {
            "name": "includeFavoriteMetadata",
            "baseName": "include_favorite_metadata",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return SearchUsersRequest.attributeTypeMap;
    }
}

export namespace SearchUsersRequest {
    export enum VisibilityEnum {
        Sharable = <any> 'SHARABLE',
        NonSharable = <any> 'NON_SHARABLE'
    }
    export enum PrivilegesEnum {
        Administration = <any> 'ADMINISTRATION',
        Authoring = <any> 'AUTHORING',
        Userdatauploading = <any> 'USERDATAUPLOADING',
        Datadownloading = <any> 'DATADOWNLOADING',
        Usermanagement = <any> 'USERMANAGEMENT',
        Datamanagement = <any> 'DATAMANAGEMENT',
        Sharewithall = <any> 'SHAREWITHALL',
        Jobscheduling = <any> 'JOBSCHEDULING',
        A3Analysis = <any> 'A3ANALYSIS',
        Experimentalfeatureprivilege = <any> 'EXPERIMENTALFEATUREPRIVILEGE',
        Bypassrls = <any> 'BYPASSRLS',
        Ranalysis = <any> 'RANALYSIS',
        Developer = <any> 'DEVELOPER',
        UserAdministration = <any> 'USER_ADMINISTRATION',
        GroupAdministration = <any> 'GROUP_ADMINISTRATION',
        Syncmanagement = <any> 'SYNCMANAGEMENT',
        CanCreateCatalog = <any> 'CAN_CREATE_CATALOG',
        DisablePinboardCreation = <any> 'DISABLE_PINBOARD_CREATION',
        Enablespotappcreation = <any> 'ENABLESPOTAPPCREATION',
        LiveboardVerifier = <any> 'LIVEBOARD_VERIFIER',
        PreviewThoughtspotSage = <any> 'PREVIEW_THOUGHTSPOT_SAGE'
    }
    export enum AccountTypeEnum {
        LocalUser = <any> 'LOCAL_USER',
        LdapUser = <any> 'LDAP_USER',
        SamlUser = <any> 'SAML_USER',
        OidcUser = <any> 'OIDC_USER',
        RemoteUser = <any> 'REMOTE_USER'
    }
    export enum AccountStatusEnum {
        Active = <any> 'ACTIVE',
        Inactive = <any> 'INACTIVE',
        Expired = <any> 'EXPIRED',
        Locked = <any> 'LOCKED',
        Pending = <any> 'PENDING'
    }
}
