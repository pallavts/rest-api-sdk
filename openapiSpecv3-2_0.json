{
  "openapi": "3.0.0",
  "info": {
    "title": "ThoughtSpot Public REST API",
    "version": "2.0"
  },
  "tags": [],
  "paths": {
    "/api/rest/2.0/auth/session/user": {
      "get": {
        "operationId": "getCurrentUserInfo",
        "description": "Get Session object information",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/search": {
      "post": {
        "operationId": "searchUser",
        "description": "To programmatically search a user account in the ThoughtSpot system use this API endpoint.\nUsing this API, you can search a user with GUID / name.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to be updated",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user.",
                    "type": "string",
                    "enum": [
                      "DEFAULT",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_group_identifiers": {
                    "description": "List of user-group to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "List of privileges to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT"
                      ]
                    },
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user shares answers or pinboards.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Unique Organization Identifiers to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/instance": {
      "get": {
        "operationId": "getInstanceInfo",
        "tags": [
          "Instance"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterInfo"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/instance/config": {
      "get": {
        "operationId": "getClusterConfig",
        "tags": [
          "Instance"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterConfig"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/login": {
      "post": {
        "operationId": "login",
        "description": "You can programmatically create login session for a user in ThoughtSpot using this endpoint. \n\nYou can create session by either providing userName and password as inputs in this request body or by including \"Authorization\" header with the token generated through the endpoint /tspublic/rest/v2/session/gettoken. \n\nuserName and password input is given precedence over \"Authorization\" header, when both are included in the request.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "remember_me": {
                    "description": "A flag to remember the user session. When set to true, sets a session cookie that persists in subsequent API calls.",
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/object": {
      "post": {
        "operationId": "getObjectAccessToken",
        "description": " To programmatically create session token for a user in ThoughtSpot, use this endpoint. \n\nYou can generate the token for a user by providing password or secret key from the cluster. \n\nYou need to enable trusted authentication to generate secret key. To generate secret key, follow below steps. \n\n\n 1. Click the Develop tab. \n\n\n 2. Under Customizations, click Settings. \n\n\n 3. To enable trusted authentication, turn on the toggle. \n\n\n 4. A secret_key for trusted authentication is generated. \n\n\n 5. Click the clipboard icon to copy the token. \n\n\n \n\nPassword is given precedence over secretKey input, when both are included in the request.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "object_id": {
                    "description": "GUID of the ThoughtSpot object. If set, the bearer will only have access to the specified Liveboard or another object.",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "organization_id": {
                    "description": "Id of the organization to be associated with the user login. If no input is provided then last logged in organization will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  }
                },
                "required": [
                  "username",
                  "object_id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/full": {
      "post": {
        "operationId": "getFullAccessToken",
        "description": " To programmatically create session token for a user in ThoughtSpot, use this endpoint. \n\nYou can generate the token for a user by providing password or secret key from the cluster. \n\nYou need to enable trusted authentication to generate secret key. To generate secret key, follow below steps. \n\n\n 1. Click the Develop tab. \n\n\n 2. Under Customizations, click Settings. \n\n\n 3. To enable trusted authentication, turn on the toggle. \n\n\n 4. A secret_key for trusted authentication is generated. \n\n\n 5. Click the clipboard icon to copy the token. \n\n\n \n\nPassword is given precedence over secretKey input, when both are included in the request.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "organization_id": {
                    "description": "Id of the organization to be associated with the user login. If no input is provided then last logged in organization will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/logout": {
      "post": {
        "operationId": "logout",
        "description": "To log a user out of the current session, use this endpoint",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/revoke": {
      "post": {
        "operationId": "revokeToken",
        "description": "To expire or revoke a token for a user, use this endpoint",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "deprecated": false
                  },
                  "token": {
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "username",
                  "token"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users": {
      "post": {
        "operationId": "createUser",
        "description": "To programmatically create a user account in the ThoughtSpot system use this API endpoint. Using this API, you can create a user and assign groups.\nTo create a user, you require admin user privileges.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "Password for the user account.",
                    "type": "string",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "default": "LOCAL_USER",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "default": "ACTIVE",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Unique Organization Identifiers to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "user_group_identifiers": {
                    "description": "List of user-group to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user. The visibility attribute is set to DEFAULT when creating a user. The DEFAULT attribute makes a user visible to other users and user groups, and this allows them to share objects",
                    "default": "DEFAULT",
                    "type": "string",
                    "enum": [
                      "DEFAULT",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user shares answers or pinboards.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "to set GUID for home live board.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadatas": {
                    "description": "to set GUID for home live board.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "password",
                  "email"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/$user_identifier": {
      "post": {
        "operationId": "updateUser",
        "description": "To programmatically update a user account in the ThoughtSpot system use this API endpoint.\nUsing this API, you can update a user and assign groups.\nTo update a user, you require admin user privileges.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to be updated",
                    "type": "string",
                    "deprecated": false
                  },
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user. The visibility attribute is set to DEFAULT when creating a user. The DEFAULT attribute makes a user visible to other users and user groups, and this allows them to share objects",
                    "default": "DEFAULT",
                    "type": "string",
                    "enum": [
                      "DEFAULT",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user shares answers or pinboards.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "user_group_identifiers": {
                    "description": "List of user-group to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "to set GUID for home live board.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadatas": {
                    "description": "to set GUID for home live board.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Unique Organization Identifiers to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/import": {
      "post": {
        "operationId": "importUsers",
        "description": "To programmatically import users accounts in the ThoughtSpot system use this API endpoint.\nUsing this API, you can import multiple users.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "List of users needs to be imported.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ImportUser"
                    },
                    "deprecated": false
                  },
                  "default_password": {
                    "description": "Default password to be set if password field not present in above import user like first one",
                    "type": "string",
                    "deprecated": false
                  },
                  "dry_run": {
                    "description": "If true, This will preview the impacted users, but changes won't applied into the system",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "delete_unspecified_users": {
                    "description": "if true, this api will delete all other users specified in above users list. Some important users like tsadmin, guest, system and su will be ignored.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "users",
                  "default_password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "account_type",
          "account_status",
          "email",
          "creation_time_in_millis",
          "first_login_time_in_millis"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "account_type": {
            "type": "string"
          },
          "account_status": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT"
              ]
            }
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "first_login_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hidden": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "notify_on_share": {
            "type": "boolean"
          },
          "show_onboarding_experience": {
            "type": "boolean"
          },
          "onboarding_experience_completed": {
            "type": "boolean"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "account_parent_type": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "complete_detail": {
            "type": "boolean"
          },
          "super_user": {
            "type": "boolean"
          },
          "system_user": {
            "type": "boolean"
          },
          "author_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "modifier_id": {
            "type": "string"
          },
          "welcome_email_sent": {
            "type": "boolean"
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "is_first_login": {
            "type": "boolean"
          },
          "group_mask": {
            "type": "integer",
            "format": "int32"
          },
          "can_change_password": {
            "type": "boolean"
          },
          "current_org": {
            "$ref": "#/components/schemas/Org"
          },
          "incomplete_details": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_inherited_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInheritedGroup"
            }
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Org"
            }
          }
        }
      },
      "FavoriteMetadataInput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION",
              "DATA_SOURCE"
            ]
          },
          "identifier": {
            "type": "string"
          }
        }
      },
      "ImportUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ]
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ]
          },
          "email": {
            "type": "string"
          },
          "org_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "NON_SHARABLE"
            ]
          },
          "notify_on_share": {
            "type": "boolean"
          },
          "show_onboarding_experience": {
            "type": "boolean"
          },
          "onboarding_experience_completed": {
            "type": "boolean"
          },
          "home_liveboard_identifier": {
            "type": "string"
          },
          "favorite_metadatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataInput"
            }
          }
        }
      },
      "ImportUsersResponse": {
        "type": "object",
        "properties": {
          "users_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "users_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "users_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "RiseSetter": {
        "type": "object",
        "required": [
          "field",
          "path"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "ClusterInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "release_version": {
            "type": "string"
          },
          "time_zone": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "date_format": {
            "type": "string"
          },
          "api_version": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "license": {
            "type": "string"
          },
          "date_time_format": {
            "type": "string"
          },
          "time_format": {
            "type": "string"
          },
          "system_user_identifier": {
            "type": "string"
          },
          "super_user_identifier": {
            "type": "string"
          },
          "hidden_object_identifier": {
            "type": "string"
          },
          "system_group_identifier": {
            "type": "string"
          },
          "tsadmin_user_identifier": {
            "type": "string"
          },
          "admin_group_identifier": {
            "type": "string"
          },
          "all_tables_connection_identifier": {
            "type": "string"
          },
          "all_user_group_identifier": {
            "type": "string"
          },
          "all_user_group_display_name": {
            "type": "string"
          },
          "all_user_group_member_user_count": {
            "type": "integer",
            "format": "int32"
          },
          "accept_language": {
            "type": "string"
          },
          "logical_model_version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClusterConfig": {
        "type": "object",
        "properties": {
          "getStartedLink": {
            "type": "string"
          }
        }
      },
      "Token": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "scope",
          "valid_for_userid",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "valid_for_userid": {
            "type": "string"
          },
          "valid_for_username": {
            "type": "string"
          }
        }
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Org": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserInheritedGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Scope": {
        "type": "object",
        "required": [
          "access_type"
        ],
        "properties": {
          "access_type": {
            "type": "string"
          },
          "organisation_id": {
            "type": "integer",
            "format": "int32"
          },
          "metadata_id": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "{base-url}",
      "variables": {
        "base-url": {
          "default": "https://localhost:443"
        }
      }
    }
  ]
}