{
  "openapi": "3.0.0",
  "info": {
    "title": "ThoughtSpot Public REST API",
    "version": "2.0"
  },
  "tags": [],
  "paths": {
    "/api/rest/2.0/auth/session/user": {
      "get": {
        "operationId": "getCurrentUserInfo",
        "description": "Get Session object information",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/search": {
      "post": {
        "operationId": "searchUsers",
        "description": "To programmatically search a user account in the ThoughtSpot system use this API endpoint.\nUsing this API, you can search a user with GUID / name.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to be updated",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "List of user-group to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "List of privileges to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT"
                      ]
                    },
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user shares answers or pinboards.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Unique Org Identifiers to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system": {
      "get": {
        "operationId": "getSystemInfo",
        "description": "Get system details",
        "tags": [
          "System"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config": {
      "get": {
        "operationId": "getSystemConfig",
        "description": "Get system config information",
        "tags": [
          "System"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfig"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/search": {
      "post": {
        "operationId": "searchOrgs",
        "description": "To programmatically search an Org in the ThoughtSpot system use this API endpoint.",
        "tags": [
          "Orgs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifier": {
                    "description": "identifier for the Org: Either unique id or unique name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the Org.",
                    "type": "string",
                    "enum": [
                      "SHOW",
                      "HIDDEN"
                    ],
                    "deprecated": false
                  },
                  "status": {
                    "description": "Status of the Org.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "IN_ACTIVE"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "User identifier for the Org: Either unique id or unique name of the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/search": {
      "post": {
        "operationId": "searchTags",
        "description": "To programmatically search tags in the ThoughtSpot system use this API endpoint.\nProvide any of tag attributes. Matching tags will be returned.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_identifier": {
                    "description": "Name or Id of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Color of the tag.",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/search": {
      "post": {
        "operationId": "searchUserGroups",
        "description": "Search User Groups from the current org",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of liveboards which will be assigned as default liveboards to the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description for the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Unique display name for the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "group_identifier": {
                    "description": "Unique ID or name of the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "Unique ID or name of the org where the user group will be created. \nIf not specified then group will be created in the current logged in org. \nNote that only tenant admins are allowed to create group across org.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges which will be assigned to the user group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "Unique ID or name of the User Groups who will be part of the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Type of the user group.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "Unique ID or name of the Users who will be part of the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, \nand thus allows them to share objects.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/search": {
      "post": {
        "operationId": "searchMetadata",
        "description": "Search Metadata",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataListItemInput"
                    },
                    "deprecated": false
                  },
                  "permissions": {
                    "description": "Permission details for searching the objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionInput"
                    },
                    "deprecated": false
                  },
                  "created_by_user_identifiers": {
                    "description": "Unique ID or name of users who has created the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "dependent_object_version": {
                    "description": "Version of the dependent metadata object.",
                    "default": "V1",
                    "type": "string",
                    "enum": [
                      "V1",
                      "V2"
                    ],
                    "deprecated": false
                  },
                  "exclude_objects": {
                    "description": "Exclude Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExcludeMetadataListItemInput"
                    },
                    "deprecated": false
                  },
                  "favorite_object_options": {
                    "description": "Favorite object options.",
                    "$ref": "#/components/schemas/FavoriteObjectOptionsInput",
                    "deprecated": false
                  },
                  "include_auto_created_objects": {
                    "description": "Indicates whether to include auto created metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_dependent_objects": {
                    "description": "Indicates whether to include dependent objects of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_details": {
                    "description": "Indicates whether to include complete details of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_expert_request": {
                    "description": "Indicates whether to include expert requests information of metadata objects.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_headers": {
                    "description": "Indicates whether to include headers of the metadata objects.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_hidden_objects": {
                    "description": "Indicates whether to include hidden metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_incomplete_objects": {
                    "description": "Indicates whether to include details of incomplete information of the metadata objects if any present.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_visualization_headers": {
                    "description": "Indicates whether to include visualization headers of the Liveboard metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "include_worksheet_search_assist_data": {
                    "description": "Indicates whether to include search assist data of the worksheet objects.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "modified_by_user_identifiers": {
                    "description": "Unique ID or name of users who has modified the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptions",
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataSearchResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/sql": {
      "post": {
        "operationId": "fetchLiveboardSqlQuery",
        "description": "Fetch SQL query for Liveboard visualizations.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/sql": {
      "post": {
        "operationId": "fetchAnswerSqlQuery",
        "description": "Fetch SQL query for Answer.",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/liveboard": {
      "post": {
        "operationId": "exportLiveboardReport",
        "description": "Export report file for Liveboard visualization data.",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ],
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:'region', op1: 'EQ', val1: 'northeast' }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: 'region', asc1 : true, sortCol2 : 'date' }",
                    "type": "object",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/PdfOptionsInput",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/answer": {
      "post": {
        "operationId": "exportAnswerReport",
        "description": "Export report file for Answer data.",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ],
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:region, op1: EQ, val1: northeast }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: region, asc1 :true, sortCol2 : date }",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/principals/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOfPrincipals",
        "description": "Fetch permissions of principals (Users or Usergroups).",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principals": {
                    "description": "Principal details.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    },
                    "deprecated": false
                  },
                  "metadata": {
                    "description": "Metadata objects considered while fetching permission of specified principals.\nIf not provided then all applicable metadata objects are considered.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "principals"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOnMetadata",
        "description": "Fetch permissions on metadata objects.",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "principals": {
                    "description": "Principal details considered while fetching permission on metadata objects.\nIf not provided then all applicable principals are considered.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    },
                    "deprecated": false
                  },
                  "include_dependent_objects": {
                    "description": "Indicates whether to fetch permissions of depedent metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/searchdata": {
      "post": {
        "operationId": "searchData",
        "tags": [
          "Search Data"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query_string": {
                    "description": "Data search query string.",
                    "type": "string",
                    "deprecated": false
                  },
                  "logical_table_identifier": {
                    "description": "Unique ID of data object (worksheet, view, or a table)",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output data format.",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  }
                },
                "required": [
                  "query_string",
                  "logical_table_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/data": {
      "post": {
        "operationId": "fetchLiveboardData",
        "description": "Fetch data of Liveboard visualizations.",
        "tags": [
          "Search Data"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "List of unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output data format.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "default": "",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "default": "",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/data": {
      "post": {
        "operationId": "fetchAnswerData",
        "description": "Fetch data of Answer.",
        "tags": [
          "Search Data"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output data format.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "default": "",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "default": "",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDataResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/logs/fetch": {
      "post": {
        "operationId": "fetchLogs",
        "description": "Fetch Log details",
        "tags": [
          "Log"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log_type": {
                    "description": "Name of the log type.",
                    "type": "string",
                    "enum": [
                      "SECURITY_AUDIT"
                    ],
                    "deprecated": false
                  },
                  "start_epoc_time_in_millis": {
                    "description": "Start epoc time in milli seconds.",
                    "type": "number",
                    "format": "float",
                    "deprecated": false
                  },
                  "end_epoc_time_in_millis": {
                    "description": "End epoc time in milli seconds.",
                    "type": "number",
                    "format": "float",
                    "deprecated": false
                  }
                },
                "required": [
                  "log_type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/login": {
      "post": {
        "operationId": "login",
        "description": "You can programmatically create login session for a user in ThoughtSpot using this endpoint. \n\nYou can create session by either providing userName and password as inputs in this request body or by including \"Authorization\" header with the token generated through the endpoint /tspublic/rest/v2/session/gettoken. \n\nuserName and password input is given precedence over \"Authorization\" header, when both are included in the request.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "remember_me": {
                    "description": "A flag to remember the user session. When set to true, sets a session cookie that persists in subsequent API calls.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/object": {
      "post": {
        "operationId": "getObjectAccessToken",
        "description": " To programmatically create session token for a user in ThoughtSpot, use this endpoint. \n\nYou can generate the token for a user by providing password or secret key from the cluster. \n\nYou need to enable trusted authentication to generate secret key. To generate secret key, follow below steps. \n\n\n 1. Click the Develop tab. \n\n\n 2. Under Customizations, click Settings. \n\n\n 3. To enable trusted authentication, turn on the toggle. \n\n\n 4. A secret_key for trusted authentication is generated. \n\n\n 5. Click the clipboard icon to copy the token. \n\n\n \n\nPassword is given precedence over secretKey input, when both are included in the request.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "object_id": {
                    "description": "GUID of the ThoughtSpot object. If set, the bearer will only have access to the specified Liveboard or another object.",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "org_id": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "auto_create": {
                    "description": "“user_options” attribute is added as an optional attribute which will allow JIT token support",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the User Groups to which newly created user to be added.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "username",
                  "object_id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/full": {
      "post": {
        "operationId": "getFullAccessToken",
        "description": " To programmatically create session token for a user in ThoughtSpot, use this endpoint. \n\nYou can generate the token for a user by providing password or secret key from the cluster. \n\nYou need to enable trusted authentication to generate secret key. To generate secret key, follow below steps. \n\n\n 1. Click the Develop tab. \n\n\n 2. Under Customizations, click Settings. \n\n\n 3. To enable trusted authentication, turn on the toggle. \n\n\n 4. A secret_key for trusted authentication is generated. \n\n\n 5. Click the clipboard icon to copy the token. \n\n\n \n\nPassword is given precedence over secretKey input, when both are included in the request.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "org_id": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "auto_create": {
                    "description": "user_options attribute is added as an optional attribute which will allow JIT token support",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the User Groups to which newly created user to be added.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/logout": {
      "post": {
        "operationId": "logout",
        "description": "To log a user out of the current session, use this endpoint",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/revoke": {
      "post": {
        "operationId": "revokeToken",
        "description": "To expire or revoke a token for a user, use this endpoint",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "type": "string",
                    "deprecated": false
                  },
                  "token": {
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/create": {
      "post": {
        "operationId": "createUser",
        "description": "To programmatically create a user account in the ThoughtSpot system use this API endpoint. Using this API, you can create a user and assign groups.\nTo create a user, you require admin user privileges.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "Password for the user account.",
                    "type": "string",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "default": "LOCAL_USER",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "default": "ACTIVE",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Unique Org Identifiers to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "List of user-group to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user. The visibility attribute is set to DEFAULT when creating a user. The DEFAULT attribute makes a user visible to other users and user groups, and this allows them to share objects",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user shares answers or pinboards.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "to set GUID for home live board.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to be assigned as favorites for the imported user.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "password",
                  "email"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/update": {
      "post": {
        "operationId": "updateUser",
        "description": "To programmatically update a user account in the ThoughtSpot system use this API endpoint.\nUsing this API, you can update a user and assign groups.\nTo update a user, you require admin user privileges.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user. The visibility attribute is set to DEFAULT when creating a user. The DEFAULT attribute makes a user visible to other users and user groups, and this allows them to share objects",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user shares answers or pinboards.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "List of user-group to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "to set GUID for home live board.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to be assigned as favorites for the imported user.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Unique Org Identifiers to be associated with",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user to be updated",
            "deprecated": false
          }
        ]
      }
    },
    "/api/rest/2.0/users/{user_identifier}/delete": {
      "post": {
        "operationId": "deleteUser",
        "description": "To programmatically delete a user account in the ThoughtSpot system use this API endpoint.\nUsing this API, you can delete by passing GUID / name of the user.\nTo delete a user, you require admin user privileges.",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user to be deleted",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/import": {
      "post": {
        "operationId": "importUsers",
        "description": "To programmatically import users accounts in the ThoughtSpot system use this API endpoint.\nUsing this API, you can import multiple users.",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "List of users needs to be imported.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ImportUser"
                    },
                    "deprecated": false
                  },
                  "default_password": {
                    "description": "Default password to be set if password field not present in above import user like first one",
                    "type": "string",
                    "deprecated": false
                  },
                  "dry_run": {
                    "description": "If true, This will preview the impacted users, but changes won't applied into the system",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "delete_unspecified_users": {
                    "description": "if true, this api will delete all other users specified in above users list. Some important users like tsadmin, guest, system and su will be ignored.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/change_password": {
      "post": {
        "operationId": "changeUserPassword",
        "description": "Change user password",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "description": "Current password of the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "Unique ID or name of the user.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "current_password",
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/reset_password": {
      "post": {
        "operationId": "resetUserPassword",
        "description": "Reset user password",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "Unique ID or name of the user.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/force_logout": {
      "post": {
        "operationId": "forceLogoutUsers",
        "description": "Force logout users session",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifiers": {
                    "description": "Unique ID or name of the users for force logging out their sessions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/create": {
      "post": {
        "operationId": "createOrg",
        "description": "To programmatically create an Org in the ThoughtSpot system use this API endpoint.",
        "tags": [
          "Orgs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/update": {
      "post": {
        "operationId": "updateOrg",
        "description": "To programmatically update an Org in the ThoughtSpot system use this API endpoint.",
        "tags": [
          "Orgs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "Add Users to an Org.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "identifier for the Org: Either unique id or unique name of the Org.",
            "deprecated": false
          }
        ]
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/delete": {
      "post": {
        "operationId": "deleteOrg",
        "description": "To programmatically delete an Org in the ThoughtSpot system use this API endpoint.",
        "tags": [
          "Orgs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Org identifier for the Org: Either unique id or unique name of the Org.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/create": {
      "post": {
        "operationId": "createTag",
        "description": "To programmatically create an org in the ThoughtSpot system use this API endpoint.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. Example, Input: #ff78a9.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "color"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/update": {
      "post": {
        "operationId": "updateTag",
        "description": "To programmatically update tags, use this endpoint. Specify either tag id or tag name",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. Example, Input: #ff78a9",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name or Id of the tag.",
            "deprecated": false
          }
        ]
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/delete": {
      "post": {
        "operationId": "deleteTag",
        "description": "To programmatically delete tags, use this endpoint. Specify either tag id or tag name",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag identifier Tag name or Tag id.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/assign": {
      "post": {
        "operationId": "assignTag",
        "description": "Assign tags to metadata objects",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/unassign": {
      "post": {
        "operationId": "unassignTag",
        "description": "Unassign tags to metadata objects",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/create": {
      "post": {
        "operationId": "createUserGroup",
        "description": "Create a User Group from the current org",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user group. The user group name must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Unique display name for the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of liveboards which will be assigned as default liveboards to the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description for the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges which will be assigned to the user group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "Unique ID or name of the User Groups who will be part of the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Type of the user group.",
                    "default": "LOCAL_GROUP",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "Unique ID or name of the Users who will be part of the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus \nallows them to share objects.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/update": {
      "post": {
        "operationId": "updateUserGroup",
        "description": "Update the user group",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user group. The user group name must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of liveboards which will be assigned as default liveboards to the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description for the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Unique display name for the user group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges which will be assigned to the user group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "Unique ID or name of the User Groups who will be part of the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Type of the user group.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "Unique ID or name of the Users who will be part of the user group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus \nallows them to share objects.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the user group.",
            "deprecated": false
          }
        ]
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/delete": {
      "post": {
        "operationId": "deleteUserGroup",
        "description": "Deletes a user group from the current org",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the user group.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/import": {
      "post": {
        "operationId": "importUserGroups",
        "description": "Import user groups to the current org",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "description": "Details of user groups which are to be imported",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupsImportListInput"
                    },
                    "deprecated": false
                  },
                  "delete_unspecified_groups": {
                    "description": "Option to remove any existing groups from system which are not specified in the input request.",
                    "type": "boolean",
                    "deprecated": false
                  },
                  "dry_run": {
                    "description": "Option to dry or mock run of operation without importing any objects.",
                    "type": "boolean",
                    "deprecated": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUserGroupsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/import": {
      "post": {
        "operationId": "importMetadata",
        "description": "Import metadata objects using specified TMLs",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_tmls": {
                    "description": "Details of metadata object TMLs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "import_policy": {
                    "description": "Import policy.",
                    "default": "PARTIAL",
                    "type": "string",
                    "enum": [
                      "PARTIAL",
                      "ALL_OR_NONE",
                      "VALIDATE_ONLY"
                    ],
                    "deprecated": false
                  },
                  "create_new": {
                    "description": "Indicates whether object represented in TMLs to be newly created.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_tmls"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/export": {
      "post": {
        "operationId": "exportMetadata",
        "description": "Export metadata objects TMLs",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "edoc_format": {
                    "description": "TML EDOC content format.",
                    "default": "YAML",
                    "type": "string",
                    "enum": [
                      "JSON",
                      "YAML"
                    ],
                    "deprecated": false
                  },
                  "export_associated": {
                    "description": "Indicates whether to export associated metadata objects of specified metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  },
                  "export_fqn": {
                    "description": "Indicates whether to include GUID (FQN) of specified metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/delete": {
      "post": {
        "operationId": "deleteMetadata",
        "description": "Deletes metadata objects",
        "tags": [
          "Metadata"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeleteMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "delete_disabled_objects": {
                    "description": "Indicates whether to delete disabled metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/assign": {
      "post": {
        "operationId": "assignChangeAuthor",
        "description": "Assign new or change existing authors of metadata objects.",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthorMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "Unique ID or name of the user who will be new author of the metadata objects.",
                    "type": "string",
                    "deprecated": false
                  },
                  "current_owner_identifier": {
                    "description": "Unique ID or name of the current owner of metadata objects.\nMetadata objects matching specified current owner will be considered.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/share": {
      "post": {
        "operationId": "shareMetadata",
        "description": "Share metadata objects with users or user groups.",
        "tags": [
          "Security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE",
                      "LOGICAL_COLUMN",
                      "CONNECTION",
                      "TAG",
                      "USER",
                      "USER_GROUP",
                      "LOGICAL_RELATIONSHIP"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifiers": {
                    "description": "Unique ID or name of metadata objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "permissions": {
                    "description": "Permission details for sharing the objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SharePermissionsInput"
                    },
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Options to specify details of Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "emails": {
                    "description": "Email IDs to which notifications will be sent.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "message": {
                    "description": "Message to be included in notification.",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_custom_url": {
                    "description": "Indicates whether to customize the URLs in the notification content.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_type",
                  "metadata_identifiers",
                  "permissions"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "visibility"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE makes a users visible to other users and user groups, and thus allows them to share objects."
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the user."
          },
          "can_change_password": {
            "type": "boolean",
            "description": "Indicates whether the user can change their password."
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the user."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user in milliseconds."
          },
          "current_org": {
            "$ref": "#/components/schemas/Org",
            "description": "Current logged in Organizations of the user."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user is deprecated."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Expiration time of the user in milliseconds."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user is external."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataItem"
            },
            "description": "Metadata objects to be assigned as favorites for the imported user."
          },
          "first_login_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "First login time of the user in milliseconds."
          },
          "group_mask": {
            "type": "integer",
            "format": "int32",
            "description": "Group mask of the user."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user is hidden."
          },
          "home_liveboard": {
            "$ref": "#/components/schemas/Object_ID_And_Name",
            "description": "Unique ID or name of the users home liveboard."
          },
          "incomplete_details": {
            "type": "object",
            "description": "Incomplete details of user if any present."
          },
          "is_first_login": {
            "type": "boolean",
            "description": "Indicates whether it is first login of the user."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared answers or liveboard."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Org"
            },
            "description": "Organizations in which user exists."
          },
          "owner_id": {
            "type": "string",
            "description": "Unique identifier of owner of the user."
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT"
              ]
            },
            "description": "Privileges which are assigned to the user."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "The user preference for revisiting the onboarding experience."
          },
          "super_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a super user."
          },
          "system_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a system user."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Tags associated with the user."
          },
          "tenant_id": {
            "type": "string",
            "description": "Unique identifier of tenant of the user."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "User Groups which the user is part of."
          },
          "user_inherited_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Inherited User Groups which the user is part of."
          },
          "welcome_email_sent": {
            "type": "boolean",
            "description": "Indicates whether welcome email is sent for the user."
          }
        }
      },
      "FavoriteMetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION",
              "DATA_SOURCE"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "ImportUser": {
        "type": "object",
        "required": [
          "user_identifier",
          "display_name"
        ],
        "properties": {
          "user_identifier": {
            "type": "string",
            "description": "Unique ID or name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Unique display name of the user."
          },
          "password": {
            "type": "string",
            "description": "Password of the user."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "org_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the Orgs for the users."
          },
          "group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the User Groups of the users."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE makes a users visible to other users and user groups, \nand thus allows them to share objects."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared answers or liveboard."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "The user preference for revisiting the onboarding experience."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "home_liveboard_identifier": {
            "type": "string",
            "description": "Unique ID or name of the users home liveboard."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataInput"
            },
            "description": "Metadata objects to be assigned as favorites for the imported user."
          }
        }
      },
      "ImportUsersResponse": {
        "type": "object",
        "properties": {
          "users_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          }
        }
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VisualizationIdentifiersInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the visualization."
          }
        }
      },
      "MetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType associated in the Product"
      },
      "DeleteMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Delete MetadataType API's"
      },
      "PrincipalsInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP"
            ],
            "description": "Principal type."
          }
        }
      },
      "AuthorMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Author API's"
      },
      "PermissionsMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Permission API's"
      },
      "SharePermissionsInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or user groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        }
      },
      "AnswerDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects."
          }
        },
        "description": "Response format associated with fetch data api"
      },
      "LiveboardDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveboardContent"
            },
            "description": "Data content of metadata objects."
          }
        }
      },
      "RiseSetter": {
        "type": "object",
        "required": [
          "field",
          "path"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the cluster."
          },
          "release_version": {
            "type": "string",
            "description": "The release version of the cluster."
          },
          "time_zone": {
            "type": "string",
            "description": "The timezone of the cluster."
          },
          "locale": {
            "type": "string",
            "description": "The default locale of the cluster."
          },
          "date_format": {
            "type": "string",
            "description": "The default date format representation of the cluster."
          },
          "api_version": {
            "type": "string",
            "description": "The API version of the cluster."
          },
          "type": {
            "type": "string",
            "description": "The deployment type of the cluster."
          },
          "environment": {
            "type": "string",
            "description": "The deployed environment of the cluster."
          },
          "license": {
            "type": "string",
            "description": "The license applied to the cluster."
          },
          "date_time_format": {
            "type": "string",
            "description": "The default date time format representation of the cluster."
          },
          "time_format": {
            "type": "string",
            "description": "The default time format representation of the cluster."
          },
          "system_user_id": {
            "type": "string",
            "description": "The unique identifier of system user."
          },
          "super_user_id": {
            "type": "string",
            "description": "The unique identifier of super user."
          },
          "hidden_object_id": {
            "type": "string",
            "description": "The unique identifier of hidden object."
          },
          "system_group_id": {
            "type": "string",
            "description": "The unique identifier of system group."
          },
          "tsadmin_user_id": {
            "type": "string",
            "description": "The unique identifier of tsadmin user."
          },
          "admin_group_id": {
            "type": "string",
            "description": "The unique identifier of admin group."
          },
          "all_tables_connection_id": {
            "type": "string",
            "description": "The unique identifier of all tables connection."
          },
          "all_user_group_id": {
            "type": "string",
            "description": "The unique identifier of ALL user group."
          },
          "accept_language": {
            "type": "string",
            "description": "The supported accept language by the cluster."
          },
          "all_user_group_member_user_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of users of ALL user group."
          },
          "logical_model_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version number of logical model of the cluster."
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "onboarding_content_url": {
            "type": "string"
          }
        }
      },
      "OrgResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the organization."
          },
          "name": {
            "type": "string",
            "description": "Name of the organization."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "IN_ACTIVE"
            ],
            "description": "Status of the organization."
          },
          "description": {
            "type": "string",
            "description": "Description of the organization."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHOW",
              "HIDDEN"
            ],
            "description": "Visibility of the organization."
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name",
          "id",
          "color"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "author_id": {
            "type": "string"
          },
          "modifier_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        }
      },
      "UserGroupResponse": {
        "type": "object",
        "required": [
          "display_name",
          "id",
          "name",
          "visibility"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the user group."
          },
          "content": {
            "type": "object",
            "description": "Content details of the user group."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user group in milliseconds."
          },
          "default_liveboards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Liveboards which are assigned as default liveboards to the user group."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user group is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user group is deprecated."
          },
          "description": {
            "type": "string",
            "description": "Description of the user group."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user group."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user group is external."
          },
          "generation_number": {
            "type": "integer",
            "format": "int32",
            "description": "Generation number of the user group."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user group is hidden."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index number of the user group."
          },
          "index_version": {
            "type": "integer",
            "format": "int32",
            "description": "Index version number of the user group."
          },
          "metadata_version": {
            "type": "integer",
            "format": "int32",
            "description": "Metadata version number of the user group."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user group in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the user group."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Orgs in which user group exists."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT"
              ]
            },
            "description": "Privileges which are assigned to the user group."
          },
          "sub_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "User Groups who are part of the user group."
          },
          "system_group": {
            "type": "boolean",
            "description": "Indicates whether the user group is a system group."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Tags associated with the user group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the user group."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Users who are part of the user group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects."
          }
        }
      },
      "MetadataSearchResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "metadata_type"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "dependent_objects": {
            "type": "object",
            "description": "Details of dependent objects of the metadata objects."
          },
          "incomplete_objects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Details of incomplete information of the metadata objects if any."
          },
          "metadata_detail": {
            "type": "object",
            "description": "Complete details of the metadata objects."
          },
          "metadata_header": {
            "type": "object",
            "description": "Header information of the metadata objects."
          },
          "visualization_headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Visualization header information of the metadata objects."
          }
        },
        "description": "Metadata Search Response Object."
      },
      "MetadataListItemInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the metadata object. User % for a wildcard match."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "PermissionInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or user groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        },
        "description": "Details of users or user groups."
      },
      "ExcludeMetadataListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "FavoriteObjectOptionsInput": {
        "type": "object",
        "properties": {
          "include": {
            "type": "boolean",
            "description": "Only include object marked as favorite."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users."
          }
        },
        "description": "Favorite object options."
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "SqlQueryResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "metadata_type",
          "sql_queries"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "sql_queries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SqlQuery"
            },
            "description": "SQL query details of metadata objects."
          }
        }
      },
      "PdfOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE"
            ],
            "description": "Page orientation of the PDF."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          }
        }
      },
      "LogResponse": {
        "type": "object",
        "required": [
          "date",
          "log"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "Date timestamp of the log entry"
          },
          "log": {
            "type": "string",
            "description": "Log data"
          }
        }
      },
      "Token": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "scope",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Token access scope details"
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "TagMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        }
      },
      "ImportUserGroupsResponse": {
        "type": "object",
        "required": [
          "groups_added",
          "groups_deleted",
          "groups_updated"
        ],
        "properties": {
          "groups_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are added into the system."
          },
          "groups_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are deleted from the system."
          },
          "groups_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are updated in the system."
          }
        }
      },
      "GroupsImportListInput": {
        "type": "object",
        "required": [
          "display_name",
          "group_identifier"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Unique display name of the user group."
          },
          "group_identifier": {
            "type": "string",
            "description": "Unique ID or name of the User Group."
          },
          "default_liveboard_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID of liveboards which will be assigned as default liveboards to the user group."
          },
          "description": {
            "type": "string",
            "description": "Description of the user group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT"
              ]
            },
            "description": "Privileges which will be assigned to the user group."
          },
          "sub_group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the User Groups who will be part of the user group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the user group."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the Users who will be part of the user group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects."
          }
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Current logged in Organizations of the user."
      },
      "FavoriteMetadataItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the metadata."
          },
          "name": {
            "type": "string",
            "description": "name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "Object_ID_And_Name": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The object representation with ID and Name."
      },
      "ImportUserType": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          }
        }
      },
      "AnswerContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          }
        }
      },
      "LiveboardContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          },
          "visualization_id": {
            "type": "string",
            "description": "Unique ID of the visualization."
          },
          "visualization_name": {
            "type": "string",
            "description": "Name of the visualization."
          }
        }
      },
      "SqlQuery": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "sql_query"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "sql_query": {
            "type": "string",
            "description": "SQL query of a metadata object."
          }
        },
        "description": "Response format associated with fetch SQL query api"
      },
      "Scope": {
        "type": "object",
        "required": [
          "access_type"
        ],
        "properties": {
          "access_type": {
            "type": "string",
            "description": "Object access scope type."
          },
          "org_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the metadata."
          },
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the organization."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "{base-url}",
      "variables": {
        "base-url": {
          "default": "https://localhost:443"
        }
      }
    }
  ]
}