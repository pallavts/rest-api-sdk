# -*- coding: utf-8 -*-

"""
tspublicrestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from tspublicrestapi.models.session_date_time_format import SessionDateTimeFormat
from tspublicrestapi.models.session_user_properties import SessionUserProperties


class SessionInfoResponse(object):

    """Implementation of the 'SessionInfoResponse' model.

    Session Info

    Attributes:
        user_name (string): Username of the user account for which the session
            information is returned
        user_display_name (string): A unique display name string for the user
        user_email (string): Email of the user account
        user_created_time (float): Date and time of creation of the user
            account
        user_guid (string): GUID of the user account
        can_change_password (bool): Indicates if the user account can change
            the password
        is_system_user (bool): Indicates if the user account is system or
            external user
        user_group_mask (int): Group mask of the user account
        privileges (list of string): Privileges assigned to the user account
        expiration_time (int): Expiration time of the token for the user
            account
        auth_token (string): Auth token for the user account
        locale (string): Locale of the token for the user account
        timezone (string): Timezone assigned to the user account
        date_format (SessionDateTimeFormat): TODO: type description here.
        time_format (SessionDateTimeFormat): TODO: type description here.
        date_time_format (SessionDateTimeFormat): TODO: type description
            here.
        partial_j_session_guid (string): Partial GUID of the user account
        is_first_login (bool): Indicates if the user account is logging in for
            the first time
        first_login_date (float): Date on which the user account logged in for
            the first time
        user_properties (SessionUserProperties): TODO: type description here.
        state (string): Indicates if the user account is active or inactive

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user_name": 'userName',
        "user_display_name": 'userDisplayName',
        "user_email": 'userEmail',
        "user_created_time": 'userCreatedTime',
        "user_guid": 'userGUID',
        "can_change_password": 'canChangePassword',
        "is_system_user": 'isSystemUser',
        "user_group_mask": 'userGroupMask',
        "privileges": 'privileges',
        "expiration_time": 'expirationTime',
        "auth_token": 'authToken',
        "locale": 'locale',
        "timezone": 'timezone',
        "date_format": 'dateFormat',
        "time_format": 'timeFormat',
        "date_time_format": 'dateTimeFormat',
        "partial_j_session_guid": 'partialJSessionGUID',
        "is_first_login": 'isFirstLogin',
        "first_login_date": 'firstLoginDate',
        "user_properties": 'userProperties',
        "state": 'state'
    }

    def __init__(self,
                 user_name=None,
                 user_display_name=None,
                 user_email=None,
                 user_created_time=None,
                 user_guid=None,
                 can_change_password=None,
                 is_system_user=None,
                 user_group_mask=None,
                 privileges=None,
                 expiration_time=None,
                 auth_token=None,
                 locale=None,
                 timezone=None,
                 date_format=None,
                 time_format=None,
                 date_time_format=None,
                 partial_j_session_guid=None,
                 is_first_login=None,
                 first_login_date=None,
                 user_properties=None,
                 state=None):
        """Constructor for the SessionInfoResponse class"""

        # Initialize members of the class
        self.user_name = user_name
        self.user_display_name = user_display_name
        self.user_email = user_email
        self.user_created_time = user_created_time
        self.user_guid = user_guid
        self.can_change_password = can_change_password
        self.is_system_user = is_system_user
        self.user_group_mask = user_group_mask
        self.privileges = privileges
        self.expiration_time = expiration_time
        self.auth_token = auth_token
        self.locale = locale
        self.timezone = timezone
        self.date_format = date_format
        self.time_format = time_format
        self.date_time_format = date_time_format
        self.partial_j_session_guid = partial_j_session_guid
        self.is_first_login = is_first_login
        self.first_login_date = first_login_date
        self.user_properties = user_properties
        self.state = state

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        user_name = dictionary.get('userName')
        user_display_name = dictionary.get('userDisplayName')
        user_email = dictionary.get('userEmail')
        user_created_time = dictionary.get('userCreatedTime')
        user_guid = dictionary.get('userGUID')
        can_change_password = dictionary.get('canChangePassword')
        is_system_user = dictionary.get('isSystemUser')
        user_group_mask = dictionary.get('userGroupMask')
        privileges = dictionary.get('privileges')
        expiration_time = dictionary.get('expirationTime')
        auth_token = dictionary.get('authToken')
        locale = dictionary.get('locale')
        timezone = dictionary.get('timezone')
        date_format = SessionDateTimeFormat.from_dictionary(dictionary.get('dateFormat')) if dictionary.get('dateFormat') else None
        time_format = SessionDateTimeFormat.from_dictionary(dictionary.get('timeFormat')) if dictionary.get('timeFormat') else None
        date_time_format = SessionDateTimeFormat.from_dictionary(dictionary.get('dateTimeFormat')) if dictionary.get('dateTimeFormat') else None
        partial_j_session_guid = dictionary.get('partialJSessionGUID')
        is_first_login = dictionary.get('isFirstLogin')
        first_login_date = dictionary.get('firstLoginDate')
        user_properties = SessionUserProperties.from_dictionary(dictionary.get('userProperties')) if dictionary.get('userProperties') else None
        state = dictionary.get('state')

        # Return an object of this model
        return cls(user_name,
                   user_display_name,
                   user_email,
                   user_created_time,
                   user_guid,
                   can_change_password,
                   is_system_user,
                   user_group_mask,
                   privileges,
                   expiration_time,
                   auth_token,
                   locale,
                   timezone,
                   date_format,
                   time_format,
                   date_time_format,
                   partial_j_session_guid,
                   is_first_login,
                   first_login_date,
                   user_properties,
                   state)
